.\" You may copy, distribute and modify under the terms of the LDP General
.\" Public License as specified in the LICENSE file that comes with the
.\" gnumaniak distribution
.\"
.\" The author kindly requests that no comments regarding the "better"
.\" suitability or up-to-date notices of any info documentation alternative
.\" is added without contacting him first.
.\"
.\" (C) 2000 Ragnar Hojland Espinosa <ragnar@ragnar-hojland.com>
.\"
.\"	gasp man page
.\"	man pages are NOT obsolete!
.\"	<ragnar@ragnar-hojland.com>
.\"
.\" Japanese Version Copyright (c) 2000 Omo Kazuki
.\"         all rights reserved.
.\" Translated Wed Aug 30 17:42:39 JST 2000
.\"         by Omo Kazuki
.\" Updated & Modified Fri Dec 24 06:00:11 JST 2004
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\"
.TH GASP 1 "November 2000" "gasp 1.2"
.SH 名前
\fBgasp\fR \- GNU アセンブラプリプロセッサ
.SH 書式
.B gasp
.RB [ \-adpsuM ]
.RB [ "\-c \fICHAR" ]
.RB [ "\-o \fIOUTFILE" ]
.RB [ "\-D\fINAME\fB=\fIVALUE" ]
.RB [ "\-I\fIPATH" ]
.RB [ \-\-alternate ]
.RB [ "\-\-commentchar \fICHAR" ]
.RB [ \-\-copysource ]
.RB [ \-\-debug ]
.RB [ \-\-mri ]
.RB [ "\-output \fIOUTFILE" ]
.RB [ \-\-print ]
.RB [ \-\-unreasonable ]
.I INFILE...

.B gasp
.RB [ \-hv ]
.RB [ \-\-help ]
.RB [ \-\-version ]
.SH 説明
.B gasp
は、\fIINFILE\fR 引数を処理して、\fBas\fR(1) に直接入力させるために
連結して標準出力に出力する。

\fBas\fR は、他のプログラムによって生成された出力をアセンブルすることを
目的としているので、アセンブラを手で書くときに便利なマクロや条件文といった
一般的な機能を持っていない。
\fBgasp\fR は、これらの (as にはない) 機能を提供する。
.SH オプション
.TP
.B \-a, \-\-alternate
別のマクロ文法を使用する。
.TP
.B \-c \fICHAR\fB, \-\-commentchar \fICHAR
\fICHAR\fR をコメント文字として使う。デフォルトのコメント文字は
`\fB!\fR' である。
.TP
.B \-d, \-\-debug
\fBgasp\fR が内部的に割り当てる
文字列バッファについてのデバッグ統計情報を表示する。
それぞれ定められたバッファサイズ \fIS\fR について、
割り当てられた文字列 \fIN\fR を
.sp
.nf
    strings size \fIS\fR : \fIN\fR
.fi
.sp
という形式で表す。
これらの統計量はデータを前処理する時に標準エラー出力に書き出される。
.TP
.B \-o \fIOUTFILE\fB, \-\-output \fIOUTFILE
\fBgasp\fR によって生成された出力を \fIOUTFILE\fR に書き出す。
デフォルトでは標準出力に書き出される。
.TP
.B \-p, \-\-print
コメントとして行番号を出力する。
\fB\-s\fR が指定されない限り、無視される。
.TP
.B \-s, \-\-copysource
コメントとしてソースの行を出力する。
.TP
.B \-u, \-\-unreasonable
無制限の (「非現実的な」) ネスト展開を許可する。
他のマクロの定義の中に \fBgasp\fR のマクロを定義できる時、
プリプロセッサは通常、sanity チェックを含める。
プログラムが 1000 回以上のネストされた展開を必要とする時には、
\fBgasp\fR は通常、エラーメッセージを出して終了する。
このチェックをオフにして無制限のネストされた展開を許したい時には、
このオプションを使用せよ。
.TP
.B \-M, \-\-mri
MRI 互換モードに入る。
Microtec Research ASM68K アセンブラ文法と
疑似オペレーションを使うために必要である。
.TP
.B \-D\fINAME\fB=\fIVALUE
プリプロセッサ定数 \fINAME\fR を値 \fIVALUE\fR で定義する。
.TP
.B \-I\fIPATH
\fIPATH\fR をインクルードパスのリストに追加する。
.TP
.B "\-h, \-\-help"
標準出力に使用方法を出力し、正常終了する。
.TP
.B "\-v, \-\-version"
バージョン情報を標準出力に出力し，正常終了する。
.SH プリプロセッサコマンド
コマンドは大文字と小文字を区別せず、1 行は 3 つの部分に分けられる:
(任意の) ラベル、コマンド自身、コマンドの引数である。
.SS 条件文
これらの指示子により、文字列や絶対式の組の比較方法に依存してアセンブリコードの
一部を含めたり除外したりすることが出来る。
条件文の最大ネスト数は 100 である。
.TP
.B .AIF \fIARG1 CMP ARG2
.PD 0
.TP
.B .AIF \fB"\fIARG1\fB"\fI CMP \fB"\fIARG2\fB"
.sp
有効な \fICMP\fR 比較演算子で、文字列と絶対式で表されるものは、
以下の通りである:
.sp
.RS
.TP
.B EQ
\fIARG1\fR と \fIARG2\fR は等しいか?
.TP
.B NE
\fIARG1\fR と \fIARG2\fR は異なっているか?
.PP
.sp
有効な \fICMP\fR 比較演算子で、絶対式のみで表されるものは、
以下の通りである:
.sp
.TP
.B LT
\fIARG1\fR は \fIARG2\fR より小さいか?
.TP
.B LE
\fIARG1\fR は \fIARG2\fR と等しいか、それより小さいか?
.TP
.B GT
\fIARG1\fR は \fIARG2\fR より大きいか?
.TP
.B GE
\fIARG1\fR は \fIARG2\fR と等しいか、それより大きいか?
.RE
.PD 1
.TP
.B .AELSE
条件文が失敗したときに実行されるアセンブリコードの最初の部分に含まれる印。
必須ではなく、(\fB.AIF\fR と \fB.AENDI\fR の間の) 条件ブロックの中でのみ
与えられる。
.TP
.B .AENDI
\/\fB.AIF\fR 条件ブロックの終りを示す。
.PP
.SS ループ
これらの指示子はコードの部分を繰り返すことを許可する。
.TP
.B .AREPEAT \fIEXPR
.PD 0
.TP
.B .AENDR
.PD 1
.br
\/\fB.AREPEAT\fR と \fB.AENDR\fR の間のアセンブリコードを
絶対式 \fIEXPR\fR で指定された回数だけ繰り返す。
.TP
.B .AWHILE \fIARG1 CMP ARG2
.PD 0
.TP
.B .AENDW
.PD 1
.br
\/\fB.AWHILE\fR と \fB.AENDW\fR の間のアセンブリコードを
\fICMP\fR 比較演算子の結果が true である限り繰り返す。
\fICMP\fR のフォーマットは\fB.AIF\fR のものと同じである。
.TP
.B .EXITM
ループから抜け出す。
.SS 変数
変数には文字列、レジスタ、式の結果が入る。
2 種類の変数がある。

\fB\(bu\fR\ \fB.EQU\fR か \fB.ASSIGN\fR により定義される変数。
アセンブラコードの出力においてこの種の変数の値を求めるには、
単に変数名を書けばよい。
これらの変数はアセンブラコードの出力をしているときにのみ計算されるので、
条件式や \fB.AWHILE\fR ループの中に使うべきではない。
.sp
.nf
   foo  .EQU   FLIP-64
   bar: .EQU   FLIP-64
   mov.l  foo, r0
.fi
.sp
\fB\(bu\fR\ 前処理をしている間に使われる変数で、
\fB.ASSIGNC\fR か \fB.ASSIGNA\fR によって定義される。
この種の変数の値を求めるには、`\fB\e&\fR' を前に付ける。
.sp
.nf		      
   opcit  .ASSIGNA  47
   .AWHILE \e&opcit GT 0
   .AENDW
.fi
.sp
マクロ変数はほとんど同じ方法で扱われるが、
それらの値を求めるには、代わりに `\fB\e\fR' を前に付ける。
.TP
.B \fIPVAR\fB .EQU \fIEXPR
プリプロセッサ変数 PVAR に式 EXPR の値を割り当てる。再定義には、制限はない。
.TP
.B \fIPVAR\fB .ASSIGN \fIEXPR
\/\fB.EQU\fR と似ているが、\fIPVAR\fR は再定義できない。
.TP
.B \fIPVAR\fB .ASSIGNA \fIAEXPR
前処理の間使用され、数値を定義する。
\fIAEXPR\fR は絶対式でなくてはならない。再定義には、制限は無い。
.TP
.B \fIPVAR\fB .ASSIGNC "\fISTR\fR"
前処理の間使用され、文字列の値を定義する。再定義には、制限はない。
.TP
.B \fIPVAR\fB .REG (\fIREGISTER\fB)
レジスタと同じ働きをする変数を定義する。
特に、\fIREGISTER\fR は式としては計算されない。
再定義には、制限はない。
.PP
これら全ての指定は、変数名として左端にある "ラベル" を受け入れる。
必要なら、上の `bar' のように、変数名の後ろにコロンを付けてもよい。
.SS マクロ定義
\fB.MACRO\fR と \fB.ENDM\fR の指示子により、
アセンブラコードの出力を生成する独自のマクロを定義出来る。
.TP
.B .MACRO \fINAME
.PD 0
.TP
.B .MACRO \fINAME \fR[\fBARG\fR[\fB=\fIDEFAULT_VALUE\fR]\fB, ...\fR]
.PD 1
\fINAME\fR というマクロの定義を開始する。もしマクロの定義で引数が必要なら、
コンマかスペースで区切ってマクロの名前のあとにそれらの名前を書く。
マクロ引数のデフォルトの値は、
\/\fIARG\fB=\fIVALUE\fR というフォーマットで指定する。

マクロを呼び出すとき、引数の値をポジションかキーワードで指定できる。
たとえば、`SUM 9, 17' は `SUM TO=17, FROM=9' と同じである。
マクロ引数は
.B .ASSIGNA
や
.B .ASSIGNC
で定義した値と同等なので、
それらをループのコントロールや条件式として使える。
異なっているのは、変数の値を求めるときに接頭語として付ける記号だけである :
マクロ引数には `\fB\eARG\fR' を使い、
プリプロセッサ変数には `\fB\e&VAR\fR' を使う。
.TP
.B \fINAME\fB .MACRO
.PD 0
.TP
.B \fINAME\fB .MACRO ( \fR[\fBARG\fR[\fB=\fIDEFAULT_VALUE\fR]\fB, ...\fR]\fB )
.PD 1
マクロを定義する別の形式 : ラベル位置にマクロの名前を、
名前の後のかっこ内にすべての引数を指定する。
.TP
.B .ENDM
マクロ定義の終りの印。
.TP
.B .EXITM
現在のマクロ定義や、マクロループから抜け出す。
.TP
.B \e@
この疑似変数は、\fBgasp\fR がマクロをいくつ実行したかを表す。
この変数はマクロ定義の中でのみ使うことができる。
.TP
.B LOCAL \fINAME\fR[\fB, \fINAME...\fR]
\fINAME\fR 毎に固有の文字列を生成し、
マクロ展開において \fINAME\fR のインスタンスを置き換える。

文字列はマクロ展開毎に異なったものになるので、
マクロ展開の間で衝突する恐れなしに、
シンボルを定義するマクロを書くことができる。

これは \fB\-\-alternate\fR を指定している時のみ有効である。
.SS データ
これらの指示子は、メモリのワーキングエリアを指定する。
メモリを初期化する指示子は、以下の通りである:
.TP
.B .DATA \fIEXPR\fR[\fB, \fIEXPR...\fR]
.PD 0
.TP
.B .DATA.B \fIEXPR\fR[\fB, \fIEXPR...\fR]
.TP
.B .DATA.W \fIEXPR\fR[\fB, \fIEXPR...\fR]
.TP
.B .DATA.L \fIEXPR\fR[\fB, \fIEXPR...\fR]
.PD 1
\fIEXPR\fR 式の数値を計算し、一致する \fBas\fR 指示子
(\fBLAB\fR でラベルされている) を発行する。
無指定の \fB.DATA\fR は\fB.long\fRを発行し、\fB.DATA.B\fR は \fB.byte\fR を、
\/\fB.DATA.W\fR は \fB.short\fR を、\fB.DATA.L\fR は \fB.long\fR を発行する。

例えば、`foo .DATA 1,2,3' は `foo: .long 1,2,3' を発行する。
.TP
.B .DATAB \fIREPEAT\fB, \fIEXPR
.PD 0
.TP
.B .DATAB.B \fIREPEAT\fB, \fIEXPR
.TP
.B .DATAB.W \fIREPEAT\fB, \fIEXPR
.TP
.B .DATAB.L \fIREPEAT\fB, \fIEXPR
.PD 1
(\fBas\fR 指示子 \fB.fill\fR を使って) 式 \fIEXPR\fR の値を
\/\fIREPEAT\fR 個作る。\fIREPEAT\fR は絶対値の絶対式である。
\/\fB.DATAB.B\fR は 1 byte の値を作り、
\/\fB.DATAB.W\fR は 2 byte の値を、\fB.DATAB.L\fR は 4 byte の値を作る。
サフィックス無しの \fB.DATAB\fR は、
ちょうど \fB.DATAB.L\fR と同じように 4 byte の値を作る。
.TP
.B .SDATA\ "\fISTR\fB"\fI...
文字列のデータ。
(\fB.SDATAZ\fR と違い、文字列終わりの印はない) 
コンマ区切りのそれぞれの \fISTR\fR 引数の連続するバイトを発行する。
.TP
.B .SDATAB \fIREPEAT\fB,\ "\fISTR\fB"\fI...
繰り返された文字列のデータ。
いくつ発行されるかを特徴付ける。
\fISTR\fR 引数を何回発行するかを、\fIREPEAT\fR で指定する。
.TP
.B .SDATAZ\ "\fISTR\fR"\fI...
NUL 文字で終端された文字列のデータ。\fB.SDATA\fR と同様だが、
最後に NUL 文字一つが書かれている点が異なる。
.TP
.B .SDATAC\ "\fISTR\fR"\fI...
長さの数値が前に付いた文字列データ。
\fB.SDATA\fR と同様だが、文字列の前に 1 byte の数値がある。
例えば、`.SDATAC "HI"' は `.byte 2,72,73' を生成する。数値フィールドが
1 byte だけなので、\fB.SDATAC\fR は 256 byte 以下の長さの
文字列に対してのみ使える。
.PP
.BR .RES ", " .SRES ", " .SRESC ", " .SRESZ
指示子はメモリを初期化せず予約しておくために使う。
\fBgasp\fR はこれらの指示子を、GNU \fBas .space\fR
指示子の適切なコールとして解決する。
.TP
.B .RES \fICOUNT
.PD 0
.TP
.B .RES.B \fICOUNT
.TP
.B .RES.W \fICOUNT
.TP
.B .RES.L \fICOUNT
.PD 1
\/\fICOUNT\fR 用の初期化されていないデータ要素のためのメモリを予約する。
サフィックスはそれぞれの要素の大きさを指定している :
\/\fB.RES.B\fR は \fICOUNT\fR byte を予約し、
.B .RES.W
は \fICOUNT\fR byte のペアを予約し、そして
.B .RES.L
は \fICOUNT\fR の 4 つ組を予約する。
サフィックス無しの
.B .RES
は
.B .RES.L
に等しい。
.TP
.B .SRES \fICOUNT
.PD 0
.TP
.B .SRES.B \fICOUNT
.TP
.B .SRES.W \fICOUNT
.TP
.B .SRES.L \fICOUNT
.PD 1
.B .SRES
は
.B .RES
と同義である。
.TP
.B .SRESC \fICOUNT
.PD 0
.TP
.B .SRESC.B \fICOUNT
.TP
.B .SRESC.W \fICOUNT
.TP
.B .SRESC.L \fICOUNT
.PD 1
\/\fB.SRES\fR と同じようなものだが、`\fICOUNT\fR+1' 要素のメモリを予約する。
.TP
.B .SRESZ \fICOUNT
.PD 0
.TP
.B .SRESZ.B \fICOUNT
.TP
.B .SRESZ.W \fICOUNT
.TP
.B .SRESZ.L \fICOUNT
.PD 1
.B .SRESZ
は
.B .SRESC
と同義である。
.SS リスト
これらの指示子は \fBas\fR の list 指示子をコントロールする。
.TP
.B .PRINT LIST
.PD 0
.TP
.B .PRINT NOLIST
.PD 1
\fB.list\fR か \fB.nolist\fR をその引数に従って発行する。
.TP
.B .FORM LIN=\fILN
.PD 0
.TP
.B .FORM COL=\fICOLS
.TP
.B .FORM LIN=\fILN\fB COL=\fICOLS\fR
.PD 1
アセンブルリストのためのページサイズ、
\fILN\fR 行 \fICOLS\fR 桁 (デフォルトは 60x132) を指定する。
行と列の一方または両方を指定できる。
\/\fB.FORM\fR の前の例で示されたどんな値でも、デフォルトとはならない。
.B .psizef
は GNU \fBas\fR 指示子を発行する。
.TP
.B .HEADING \fISTRING
\fISTRING\fR は、アセンブリリストのタイトルになる。
`\fB.title "\fISTRING\fB"\fR' を発行する。
.TP
.B .PAGE
アセンブリリストで新しいページに強制する。\fB.eject\fR を発行する。
.SH その他のコマンド
.TP
.B .ALTERNATE
アセンブリの中で別のマクロ文法をこれ以降は使用する。
.TP
.B .ORG
このコマンドは認識されるが、まだ実装されていない。\fBgasp\fR は
\/\fB.ORG\fR を使用しているプログラムに対してエラーメッセージを出す。
.TP
.B .RADIX \fIS\fR
明示的に符号化の進数が指定されていない数値について、
デフォルトの基数 (radix) を指定する (デフォルトは \fBD\fR である)。
\fIS\fR は大文字小文字を区別しない。
.RS
.TP
.B .RADIX B
2 進数。
.TP
.B .RADIX Q
8 進数。
.TP
.B .RADIX D
10 進数。
.TP
.B .RADIX H
16 進数。
.RE
.TP
.B .EXPORT \fINAME
.PD 0
.TP
.B .GLOBAL \fINAME
.PD 1
\fINAME\fR をグローバルに宣言する (\fB.global \fINAME\fR を発行する)。
.TP
.B .PROGRAM
無視される。
.TP
.B .END
それぞれのプリプロセッサファイルの最後の印。
ファイルの最後がこのコマンドなしで終っていた場合は、ワーニングが出る。
.TP
.B .INCLUDE "\fISTR\fB"
ファイル名 \fISTR\fR を
\/\fB.INCLUDE\fR 指示子で指定されている項目として処理する。
インクルードの最大の深さは 30 である。
.TP
.B .ALIGN \fISIZE
絶対式 \fISIZE\fR を計算し、
\fB.align \fIevaluated_expression\fR を発行する。
.SH GASP の文法
(スペースかタブで、改行ではない) 空白で、
1 行が 3 つの部分に分かれている時は特に重要である。
空白はいくつあってもよい。

\fB\(bu\fR\ 最初の部分には、
必須ではない "ラベル" が必ず左寄せ (行頭には空白がない) で書かれる。
ラベルの後ろには、必須ではないコロンが付いている。

\fB\(bu\fR\ いくつかの空白の後に 2 番目の部分があって、
そこには \fBgasp\fR か \fBas\fR 指示子を含む。

\fB\(bu\fR\ 行中のそれ以降の部分は指示子の引数であり、
コンマか空白で区切られている。
.SS 特別な文法の印
\fBgasp\fR はいくつかの特別な印を認識する: コメントの境界を定めるもの、
次の行にステートメントを続けるもの、記号をその他のキャラクタと区別するもの、
テキストを出力に直接コピーするもの (一つの特別な印としては、`\fB\@f\fR'
はマクロの定義の中のみで使われる)。

どんなソースの行でも、その後ろに付いているものはコメントかもしれない。
コメントはクォートされないコメント文字 (デフォルトでは `\fB!\fR')
から始まるか、エスケープされたコメント文字や 2 文字のコメント文字
(デフォルトでは、`\fB\e!\fR' か `\fB!!\fR') で始まり、行末まで続く。
この 2 種類のコメント印は、取り扱いがわずかに違う :
.RS
.TP
.B !
1 文字のエスケープされてないコメント文字は 
\fBgasp\fR の出力の中にアセンブラコードのコメントを生成する。
\fBgasp\fR はどの様なプリプロセッサの変数
(マクロ引数や、その前に
.B .ASSIGNA
か
.B .ASSIGNC
で定義された変数) でも計算する。
例えば、次のように始まるマクロ
.sp
.nf
   .MACRO  SUM FROM=0, TO=9
   ! \eFROM \eTO
.fi					 
.sp
は、第 1 行で呼んだマクロの値の出力を記録して、コメントとして吐き出す。
.TP
.B \e!
.PD 0
.TP
.B !!
.PD 1
エスケープされたコメント文字か、2 文字のコメント文字は、
\fBgasp\fR のソースコメントの印である。
\fBgasp\fR はアセンブラコードの出力にこのようなコメントをコピーしない。
.RE
 
ファイルの次の行に記述を続けるには、2 行目の先頭に `\fB+\fR' を付ける。
時々、ある特定の文字列を \fBgasp\fR に処理させたくないことがある。
\fBgasp\fR のソースから、その出力に
\fB文字通りにコピーする\fRには、`\fB\e(\fR' をコピーしたい文字列の前に置き、
`\fB)\fR' を後ろに置く。
例えば、アセンブラコードの出力に `\fB\e!\fR' 文字が欲しい時は、
`\e(\e!)' と書く。

プリプロセッサ変数と、その直後に続く数値の文字を分離するには、
シングルクォート ('\fB'\fR') を書く。
例えば、`.SDATA "\P'1"' は変数 P の値と数値の 1 とを連結した文字列になる。
(`P1' 自身がプリプロセッサ変数の有効な名前なので、
`\eP1' と書いただけではこの結果は得られないだろう)
.SS 文字列定数と数値定数
文字列定数を書くには、2 通りの方法がある: 
全くのテキストと数で示されたバイトの値である。
二重引用符 (\fB"\fISTR\fB"\fR) の間で完全な文字列は指定される。
不等号記号 (\fB<\fIEXPR\fB>\fR) の間で絶対式として、
個々の NumericByte 値が指定される。
文字列を出力する指示子は、どんな種類のどんな命令でも、
結果を連結するのを許可する。

特定の進数での、あるいは最後の \fB.RADIX\fR 指示子によって現在選ばれる
どんな進数の定数でも書ける。

特定の進数で数を書くためには、パターン `\fIS\fB'\fIDDD\fR' を使う:
進数指定文字 \fIS\fR の次にシングルクォートがあり、数字 \fIDDD\fR が続く。
進数指定文字は、\fB.RADIX\fRで指定できるものと一致する。
.SS シンボル
\fBgasp\fR は英字または、`\fB_\fR' 、`\fB$\fR' から始まり、
同様に文字または数字が続いているようなシンボルやラベル名を認識できる。

有効なシンボルは、アルファベット・`\fB_\fR'・`\fB$\fR' から始まり、
これらの文字または数字が続く。
.SS 算術式
結果に依存した 2 つの式がある: 
結果が定数 (つまり、それらは \fBgasp\fR が知らない値を含まない) となる
絶対式と、以下の形
.sp
.nf
   \fIADDSYM\fB+\fICONST\fB-\fISUBSYM
.fi       
.sp	
に変換できなければならない再配置可能式がある。
ここで \fIADDSYM\fR と \fISUBSYM\fR は、不明な値のアセンブラシンボルであり 
\fICONST\fR は定数である。

\fBgasp\fR の数値式は、C のルールにとても良く似ている。
優先順位を変える時に括弧を使える;
そうでなければ、数値的な基本としては、次に記すような優先順位になる:

\fB\(bu\fR\ 1. 一つの引数 `+' (同一の場合), `-' (算術的に反対の場合), 
あるいは `~' (ビット否定)

\fB\(bu\fR\ 2. `*' (乗算) と `/' (除算)。
引数は、絶対式でなくてはならない。

\fB\(bu\fR\ 3. `+' (加算) と `-' (減算)。
少なくとも一つの項は絶対式でなくてはならない。

\fB\(bu\fR\ 4. `&' (ビットの AND)。両方の項は、絶対式でなくてはならない。

\fB\(bu\fR\ 5. `|' (ビットの OR) と、`~' (ビットの XOR。C における `^')。
両方の引数は、絶対式でなくてはならない。
.SS 文字列の基本
これらの関数を使って、
文字列 (\fBgasp\fR ステートメントの項にある) を計算できる:
.TP
.B .LEN("\fISTR\fB")
文字列 \fB"\fISTR\fB"\fR の長さを絶対式として計算する。
例えば、`.RES.B .LEN("sample")' は、
メモリの 6 byte を予約する。
.TP
.B .INSTR("\fISTR\fB", "\fISEG\fB", \fIIX\fB)
\fISTR\fR の中で、位置 \fIIX\fR より後ろの最初に出現する \fISEG\fR を探す。
もし、\fISEG\fR が \fISTR\fR 中で、位置 \fIIX\fR より後ろになければ、
結果は -1 になる。
.TP
.B .SUBSTR("\fISTR\fB", \fISTART\fB, \fILEN\fB)
\fISTR\fR の \fISTART\fR から始まって \fILEN\fR byte まで伸びている部分文字列。
.SH 別のマクロ文法
\fB\-\-alternate\fR オプションが指定されている時、
別のマクロ文法が \fBgasp\fR によって使われる。
この文法は、Phar Lap マクロアセンブラを想い出させるが、
これは、Phar Lap マクロのエミュレーションや、
それと似ているアセンブラであるという事を意味してはいない。
特に、\fBgasp\fR は DB や IRP のような指示子をサポートしていない。

\fB\(bu\fR\ プリプロセッサ指示子を `\fB.\fR' ドットを前に置かずに使える。
例えば、`SDATA' と .SDATA' を同じ効果のものとして書ける。

\fB\(bu\fR\ LOCAL が有効になっている。

\fB\(bu\fR\ 文字列の境界を、
"STRING", 'STRING', <STRING> のように書ける。

\fB\(bu\fR\ 文字列の中のどんな文字も文字通りに取り込むために、
(たとえその文字が他に特別な意味を持っていたとしても)
`\fB!\fR' を文字の前につけられる。例えば、`"hello !"world!""

\fB\(bu\fR\ \fB%\fIEXPR\fR を \fIEXPR\fR 式の数値を求めるために書くことが出来、
その結果は文字列として使用できる。

.SH 例
\fBgasp\fR に
.sp
.nf
           .MACRO  saveregs from=8 to=14
   count   .ASSIGNA \efrom
           ! save r\efrom..r\eto
	   .AWHILE  \e&count LE \eto
	   mov     r\e&count,@-sp
   count   .ASSIGNA  \e&count + 1
           .AENDW
	   .ENDM

           saveregs from=12

   bar:    mov     #H'dead+10,r0
   foo     .SDATAC "hello"<10>
           .END
.fi
.sp
を与えると、下の GNU \fBas\fR のコードを生成する:

.sp
.nf
           ! save r12..r14
	   mov     r12,@-sp
	   mov     r13,@-sp
	   mov     r14,@-sp

   bar:    mov     #57005+10,r0
   foo:    .byte   6,104,101,108,108,111,10
.fi
.SH 関連項目
 \fBas\fR(1)
.SH 注意
バグは <bug-gnu-utils@gnu.org> と <hjl@lucon.org> にレポートして欲しい。
.br
man ページは Ragnar Hojland Espinosa
<ragnar@ragnar-hojland.com> によって書かれた。
