.\" This page is originally in the SysVinit package.
.\"
.\" Translated Fri 14 Feb 1997 by Kazuyoshi Furutaka <furutaka@Flux.tokai.jaeri.go.jp>
.\" Updated Sun 14 May 2000 by Kentaro Shirakata <argrath@ub32.org>
.\"
.\"{{{}}}
.\"{{{  Title
.TH INITTAB 5 "May 19, 1998" "" "Linux System Administrator's Manual"
.\"}}}
.\"{{{ 名前 
.SH 名前
inittab \- sysv-互換のinitが使うinittabファイルの書式
.\"}}}
.\"{{{  概要
.SH 概要
\fBinittab\fPファイルは、ブートアップ時や通常運転中にどの様なプロセスを
起動するのか(例えば\& /etc/init.d/boot, /etc/rc, getty等)を指定するファイルである。
.BR init (8)
は複数の\fIランレベル\fPを区別する。
それぞれの\fIランレベル\fPに対して固有のプロセス群を起動する事ができる。
ランレベルとして有効なものは、\fB0\fP\-\fB6\fPと、
\fBondemand\fPエントリーとしての\fBA\fP, \fBB\fP, \fBC\fPである。
\fBinittab\fPファイル中のエントリーは次の書式で記される :
.RS
.sp
\fIid\fP:\fIrunlevels\fP:\fIaction\fP:\fIprocess\fP
.sp
.RE
`#' で始まる行は無視される。
.\"{{{  id
.IP \fIid\fP
は
.B inittab
ファイル中でエントリーを識別するための、
1-4文字からなる固有の識別子である
(バージョン5.2.18以前の、又はa.outのライブラリでコンパイルされた
sysvinitでは2文字までに制限されている) 。
.sp
註:gettys や他のログインプロセスに対しては、
\fIid\fP欄と対応する tty の添字を同じにすべきである
(例えば\fBtty1\fPに対しては\fB1\fPというように)。
でないと、ログインのアカウンティングが正常に動作しない可能性がある。
.\"}}}
.\"{{{  runlevels
.IP \fIrunlevels\fP
は、指定した動作を行なうランレベルの一覧を示す。
.\"}}}
.\"{{{  action
.IP \fIaction\fP
はどのような動作を行うべきかをあらわす。
.\"}}}
.\"{{{  process
.IP \fIprocess\fP
には実行されるプロセスを指定する。
プロセス欄の最初の文字が`+'である場合、
.B init
はそのプロセスに対して utmp 及び wtmp アカウンティングを行わない。
これは gettys が自分のutmp/wtmpの面倒を自分でみてしまうために必要となっている。
これは歴史上有名なバグでもある。
.\"}}}
.PP
\fIrunlevels\fPには異なったランレベルを表わす複数の文字を書いても良い。
例えば、\fB123\fPはランレベル1, 2, 3でそのプロセスを起動することを表わす。
\fBondemand\fPエントリーのための\fIrunlevels\fPは
\fBA\fP, \fBB\fP, \fBC\fPのいずれか一つのみを書くことができる。
\fBsysinit\fP、\fBboot\fP及び\fBbootwait\fPエントリーの
\fIrunlevel\fP欄は無視される。
.PP
システムのランレベルが変更された場合は、
現在実行中のプロセスのうち新たなランレベルに記されていないものは、
先ず\s-2SIGTERM\s0により、次いで\s-2SIGKILL\s0シグナルにより kill される。
.PP
\fIaction\fP として有効なものは次の通り:
.\"{{{  respawn
.IP \fBrespawn\fP
プロセスが終了した場合は常に再起動する(例えば\& getty) 。
.\"}}}
.\"{{{  wait
.IP \fBwait\fP
指定したランレベルになった時に一度だけ起動する。
.B init
はこのプロセスが終了するまで待機する。
.\"}}}
.\"{{{  once
.IP \fBonce\fP
指定したランレベルになった時に一度だけ実行する。
.\"}}}
.\"{{{  boot
.IP \fBboot\fP
システムブート中に実行される。
\fIrunlevels\fP欄は無視される。
.\"}}}
.\"{{{  bootwait
.IP \fBbootwait\fP
システムブート中に実行されるが、
.B init
はそれが終了するまで待機する
(例えば/etc/rc)。
\fIrunlevels\fP欄は無視される。
.\"}}}
.\"{{{  off
.IP \fBoff\fP
何もしない。
.\"}}}
.\"{{{  ondemand
.IP \fBondemand\fP
\fBondemand\fPランレベルの印が付いたプロセスは、
指定した\fBondemand\fPランレベルになった時に常に実行される。
しかし、ランレベルは変化しない
(\fBondemand\fPランレベルとは`a', `b', `c'のことである)。
.\"}}}
.\"{{{  initdefault
.IP \fBinitdefault\fP
\fBinitdefault\fPエントリーは、システムブート完了時に入るべき
ランレベルを示す。
\fBinitdefault\fPエントリーが存在しない場合は、
.B init
はどのランレベルに入るべきかをコンソールに問い合わせる。
\fIprocess\fP欄は無視される。
.\"}}}
.\"{{{  sysinit
.IP \fBsysinit\fP
システムブート中に実行される。
このエントリーはいかなる\fBboot\fP及び\fBbootwait\fPエントリーよりも
先に実行される。
\fIrunlevels\fP欄は無視される。
.\"}}}
.\"{{{  powerwait
.IP \fBpowerwait\fP
電源に異常が起きた時に実行されるプロセス。
init は普通コンピュータと接続されている UPS と通信しているプロセスから
このことを知らされる。
\fBinit\fPはこのプロセスが終了するまで待機する。
.\"}}}
.\"{{{  powerfail
.IP \fBpowerfail\fP
\fBpowerwait\fPと同様だが、\fBinit\fPはこのプロセスが完了するのを
待たないところが異なる。
.\"}}}
.\"{{{  powerokwait
.IP \fBpowerokwait\fP
このプロセスは電源が回復したことを\fBinit\fPが知った時に実行される。
.IP \fBpowerfailnow\fP
このプロセスは電源に異常が起き、さらに外部 UPS のバッテリー容量が
少なくなったことを(外部 UPS と監視プロセスがこのような状態を
検出できるようになっている場合に)\fBinit\fPが知った時に実行される。
.\"}}}
.\"{{{  ctrlaltdel
.IP \fBctrlaltdel\fP
\fBinit\fPがSIGINTシグナルを受け取ったときに実行される。
これは誰かがシステムコンソールで\fBCTRL\-ALT\-DEL\fPという組み合わせで
キーを押したことを意味する。
システムをシングルユーザレベルにしたい時やマシンをリブート
したい時など、\fBshutdown\fP的なことを行いたい場合に実行される。
.\"}}}
.\"{{{  kbrequest
.IP \fBkbrequest\fP
\fBinit\fPがキーボードハンドラーから、コンソールキーボード上で特定の組み合わせ
のキー入力が行なわれた、とのシグナルを受け取ったときに実行される。
.sp
この機能に関する文書はまだ不完全である; 
kbd-x.xx パッケージ中を探せばより多くの資料が見つかるだろう
(この文書を書いている時点で最新のものは kbd-0.94 である)。
基本的には、あるキーの組み合わせを"KeyboardSignal"という動作に結びつけたい
という場合に用いられる。
例えば、Alt-上向き矢印というキーの組み合わせをこの用途に使いたい場合は、
キーマップファイル中に次の様に書いておけばよい:
.RS
.sp
alt keycode 103 = KeyboardSignal
.sp
.RE
.\"}}}
.\"}}}
.\"{{{  例
.SH 例
以下は、昔のLinuxで使われていたものに似たinittabの例である:
.RS
.sp
.nf
.ne 7
# linux用のinittab
id:1:initdefault:
rc::bootwait:/etc/rc
1:1:respawn:/etc/getty 9600 tty1
2:1:respawn:/etc/getty 9600 tty2
3:1:respawn:/etc/getty 9600 tty3
4:1:respawn:/etc/getty 9600 tty4
.fi
.sp
.RE
このinittabファイルはブート中に\fB/etc/rc\fPを実行し、
tty1\-tty4でgettyを起動する。
.PP
次に示すのは、異なったランレベルがある手の込んだ例である
(スクリプト中のコメントを参照):
.RS
.sp
.nf
.ne 19
# ブート後に入るべきランレベル
id:2:initdefault:

# 何より先ずシステムの初期化をする。
si::sysinit:/etc/rc.d/bcheckrc

# ランレベル0及び6はそれぞれ haltとreboot。
# 1 はメンテナンスモード
l0:0:wait:/etc/rc.d/rc.halt
l1:1:wait:/etc/rc.d/rc.single
l2:2345:wait:/etc/rc.d/rc.multi
l6:6:wait:/etc/rc.d/rc.reboot

# "三つ指をついてリセット"された時に何をすべきか。
ca::ctrlaltdel:/sbin/shutdown -t5 -rf now

# ランレベル2及び3: コンソールでgettyを実行する
# (レベル3の場合はモデムポートでも)。
1:23:respawn:/sbin/getty tty1 VC linux
2:23:respawn:/sbin/getty tty2 VC linux
3:23:respawn:/sbin/getty tty3 VC linux
4:23:respawn:/sbin/getty tty4 VC linux
S2:3:respawn:/sbin/uugetty ttyS2 M19200

.fi
.sp
.RE
.\"}}}
.\"{{{  ファイル
.SH ファイル
/etc/inittab
.\"}}}
.\"{{{  著者
.SH 著者
\fBinit\fPはMiquel van Smoorenburg
(miquels@drinkel.ow.org)により作成された。
この man ページは
Sebastian Lederer (lederer@francium.informatik.uni-bonn.de)が作成し
Michael Haardt (u31b3hs@pool.informatik.rwth-aachen.de)が変更を行った。
.\"}}}
.\"{{{  関連項目
.SH 関連項目
.BR init (8),
.BR telinit (8)
.\"}}}

