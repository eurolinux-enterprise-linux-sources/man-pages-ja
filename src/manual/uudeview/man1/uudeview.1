.\" $Id: uudeview.1,v 1.3 2004/04/14 17:49:58 ysato Exp $ "
.\" Translated Sat May  8 17:28:30 JST 1999
.\"	by FUJIWARA Teruyoshi <fujiwara@linux.or.jp>
.\"0 WORD: plain text	プレーンテキスト
.TH UUDEVIEW 1 "December 1996"
.\"0 .SH NAME
.SH 名前
.\"0 uudeview \- a powerful decoder for binary files
uudeview \- バイナリファイル用の高性能なデコーダ
.\"0 .SH SYNOPSIS
.SH 書式
.B "uudeview [-i] [-d] [-f] [-o] [-b1] [-t] [(+e|-e) \fIextlist\fP]"
.br
.B "         [-v] [-s] [-m] [-n] [-p \fIpath\fP] [@file] \fIfile(s)\fP"
.br
.\"0 .SH DESCRIPTION
.SH 説明
.\"0 .I uudeview
.\"0 decodes files that you have received in encoded form via electronic mail
.\"0 or from the usenet, similar to the standard
.\"0 .BR uudecode (1)
.\"0 command, yet with more comfort and flexibility.
.I uudeview
は、電子メールや Usenet から受け取ったエンコードされた形式のファイルを
デコードする。標準付属の
.BR uudecode (1)
に似ているが、これよりも快適かつ柔軟である。
.\"0 .I uudeview
.\"0 supports the
.\"0 .I uuencoding, xxencoding, Base64
.\"0 and
.\"0 .I BinHex
.\"0 encoding methods, and is able to handle split-files (which have been sent
.\"0 in multiple parts) as well as multiple files at once, thus greatly simplifying
.\"0 the decoding process. Usually, you will not have to manually edit files to
.\"0 prepare them for decoding.
.I uudeview
はエンコーディング方法として
.I uuencoding, xxencoding, Base64, BinHex
をサポートしており、分割ファイル(複数の部分に分けて送られたもの)を扱う
ことができ、さらに複数のファイルを同時に扱うこともできる。したがって、
デコードの手間を大きく省くことができる。ユーザは普通、デコードの準備を
するためにファイルを手で編集する必要はない。
.PP
.\"0 After invoking
.\"0 .I uudeview,
.\"0 it will scan all given files for encoded data, sort them and their parts
.\"0 and then present you with the list of files that seem like they can be
.\"0 decoded properly. You can then pick files individually for decoding.
.I uudeview
は起動されると、与えられたファイルを全てスキャンしてデコードすべきデー
タを探し、そのデータとデータに含まれるパートをソートし、うまくデコード
できそうなファイルの一覧をユーザに示す。ユーザはこの一覧からデコードす
るファイルを個別に選ぶ。
.\"0 .SH OPTIONS
.SH オプション
.TP
.B -i
.\"0 Disables interactivity. After scanning the files and sorting everything out,
.\"0 the program will not ask for whether a file shall be decoded or not, but
.\"0 immediately batch-decodes everything possible.
対話機能を無効にする。ファイルのスキャンとその結果のソートを行った後、
.I uudeview
はファイルをデコードするかどうかをユーザに問い合わせず、デコード可能な
ものを即座にバッチ処理でデコードする。
.TP
.B -d
.\"0 Sets the program into desperate mode. It will then offer you to decode
.\"0 incomplete files. This is useful if you are missing the last part of a
.\"0 50-parts posting, but in most cases the desperately-decoded files will
.\"0 simply be corrupt and unusable. The degree of usefulness of an incomplete
.\"0 file depends on the file type.
.I uudeview
を desperate モードにする。このモードでは、不完全なファイルもデコード
の候補となる。この機能が有効なのは 50 個のパートに分かれた投稿の最後の
部分が欠けているような場合であるが、大抵の場合は、無理にデコードしたファ
イルは単に壊れているだけで利用はできないだろう。不完全なファイルがどの
程度使えるかはファイルの種類による。
.TP
.B -f
.\"0 Uses fast mode for file scanning. The program assumes that each input file
.\"0 holds at most one part, which is usually true for files in a news spool
.\"0 directory. This option
.\"0 .B breaks decoding
.\"0 of input files with multiple articles. Also, certain sanity checks are
.\"0 disabled, probably causing erroneous files to be presented for decoding.
.\"0 Sometimes you'll get error messages when decoding, sometimes you'll
.\"0 just receive invalid files. Don't use
.\"0 .B -f
.\"0 if you can't live with these problems.
高速モードでファイルをスキャンする。
.I uudeview
は各入力ファイルに多くとも 1 ファイルしか含まれていないものと想定する。
これは普通、ニューススプール内にあるファイルについては成り立つ。このオ
プションを指定すると、複数の記事に分かれた入力ファイルのデコードは
.B 中断される
。また、データが正しいかどうかのチェックも一部が無効になるので、誤りが
あるファイルもおそらくデコードの候補として示される。デコードの時にエラー
メッセージを受け取ることもあるし、単に不正なファイルができることもある。
このような問題に遭いたくないなら
.B -f
オプションは使わないこと。
.TP
.B -o
.\"0 Gives the OK to overwrite existing files when decoding. The default is
.\"0 to prompt the user whether to overwrite, rename or skip the file.
デコード時に既存のファイルを上書きすることを許可する。デフォルトでは、
上書きするか、別の名前を付けるか、そのファイルを飛ばすかの問い合わせが
ユーザに対して行われる。
.TP
.B -v
.\"0 .B Disables
.\"0 verbosity. Normally, the program prints some status messages
.\"0 while reading the input files, which can be very helpful if something
.\"0 should go wrong. Use if these messages disturb you.
詳細表示を
.B 無効に
する。通常、このプログラムは入力ファイルを読み込む際に何らかのステータ
スメッセージを表示する。これは問題が起きたときには非常に役に立つ。この
ようなメッセージが鬱陶しい場合にこのオプションを使うこと。
.TP
.\"0 .B -p path
.B -p パス
.\"0 Sets the path where decoded files shall be written to. This must be a valid
.\"0 pathname, or you'll get errors when trying to decode anything. Defaults to
.\"0 the current working directory.
デコードしたファイルを書き込むディレクトリを設定する。これは有効なパス
名でなければならず、そうでない場合はファイルをデコードしようとした時に
エラーとなる。デフォルト値は現在の作業ディレクトリである。
.TP
.\"0 .B +e exts
.B +e 拡張子
.\"0 Selects only the files with the given extensions for decoding, others will
.\"0 be ignored.
.\"0 .B +e .gif.jpg
.\"0 would decode all gif and jpeg files, but not tif or other files. The
.\"0 list of extensions works case-insensitive.
指定された拡張子を持つファイルだけを選択してデコードする。他のファイル
は無視される。
.B +e .gif.jpg
を指定すると、GIF ファイルと JPG ファイルは全てデコードされるが、TIF
等はデコードされない。拡張子のリストでは大文字と小文字は区別されない。
.TP
.\"0 .B -e exts
.B -e 拡張子
.\"0 The reverse of the above.
上記のオプションの反対の意味を持つ。
.PP
.\"0 You will experience unwanted results if you try to mix \+e and \-e options
.\"0 on the command line.
コマンドラインで \+e と \-e を混ぜて使っても、希望した結果は得られない
だろう。
.TP
.B -b1
.\"0 This changes
.\"0 .I uudeview's
.\"0 policy of finding a part number on a subject line and may only be needed
.\"0 in some rare cases when part numbers are found in () parentheses as well
.\"0 as in [] brackets, for example in a series of multi-part postings. By
.\"0 default,
.\"0 .I uudeview
.\"0 uses the numbers found in () parentheses first. But if this number indicates
.\"0 the file's number in the series and the part number is given in [] brackets,
.\"0 use this parameters to make the program read the other number first. This
.\"0 does not affect decoding of files with only one or neither type of brackets.
.\"0 If you prefer, you can also use the option as
.\"0 .B -b[]
このオプションは、サブジェクトからパート番号を取り出すという
.I uudeview
のポリシーを変更する。このオプションが必要となるのは稀であるが、
例えば複数に分割して投稿が行われた時のように、パート番号が 括弧 () や
ブラケット [] 内に書かれている場合だけは必要となる。デフォルトでは、
.I uudeview
はまず 括弧 () 内にある数字を使う。しかし、この番号が全体のファイル数
を示しており、パート番号はブラケット [] に書かれている場合には、このパ
ラメータを使って
.I uudeview
に他の数字を最初に読み込ませるようにすること。このオプションは、1 種類
のブラケットしか含まないファイルや、どちらの種類のブラケットも含まない
ファイルの展開には影響を与えない。必要ならば、このオプションは
.B -b[]
のように使うこともできる。
.TP
.B -s
.\"0 Read "minus smartness". This option turns off automatic part number
.\"0 detection from the subject line. Try this option if
.\"0 .I uudeview
.\"0 fails to parse the subject line correctly and makes errors at guessing
.\"0 part numbers, resulting in incorrect ordering of the parts. With this
.\"0 option, parts are always put together sequentially (so the parts must
.\"0 be correctly ordered in the input file). Also, with this option, the
.\"0 program cannot detect that parts are missing.
「賢くなくする(minus smartness)」と読むこと。このオプションは、サブジェ
クト行からパート番号を自動検出する機能を無効にする。
.I uudeview
がサブジェクト行の正しい展開に失敗してパート番号の推定時にエラーを出力
し、パートの順番が狂う場合にはこのオプションを試すとよい。このオプショ
ンを使うと、パートは必ず順番通りに繋げられる(したがって、入力ファイル
ではパートを正しい順に並べなければならない)。また、このオプションを使
うと、プログラムは欠けているパートを検出することはできない。
.\"0 .B Note:
.\"0 The correct part number found in proper
.\"0 .I MIME
.\"0 files is still evaluated.
.\"0 If this option is given twice, the subject itself is ignored, too, and
.\"0 won't be used to group parts. Use if the messages that the parts come
.\"0 delivered in have different subject lines.
.B 注意:
この場合でも、きちんとした
.I MIME
ファイルに含まれている正しいパート番号は評価される。このオプションを
2 回指定すると、サブジェクトそのものも無視され、パートのグループ付けに
は使われない。パートを配送する一連のメッセージのサブジェクト行がそれぞ
れ異なる場合には、このオプションを使用すること。
.TP
.B -m
.\"0 Ignore file mode. uuencoded and xxencoded files have the original file
.\"0 permissions stored on the begin line. If this option is not given, the
.\"0 decoder tries to restore them. With this option, the resulting permissions
.\"0 will always be 0666 minus your umask.
ファイルのモードを無視する。uuencode や xxencode されたファイルの
begin 行には、元のファイルのパーミッションが書かれている。このオプショ
ンが与えられなければ、デコーダは元のパーミッションを復元しようとする。
このオプションを与えると、得られるパーミッションは 0666 からユーザの
umask を引いた値となる。
.TP
.B -n
.\"0 No progress bars. Normally, UUDeview prints ASCII bars crawling up
.\"0 to 100 percent, but does not check if your terminal is capable of
.\"0 displaying them. Use this switch if your terminal isn't, or if you
.\"0 find the bars annoying.
プログレスバーを表示しない。uudeview は通常、進行状況に合わせて 100%
まで伸びてゆく横棒を ASCII 文字で表示するが、端末がこれを表示できるか
どうかのチェックは行わない。端末が表示できない場合や、プログレスバーを
目障りと感じた場合にはこのオプションを使うこと。
.TP
.B -t
.\"0 Use plaintext messages. Usually, uudeview only presents encoded data
.\"0 for decoding. With this option set, text parts from
.\"0 .I MIME
.\"0 messages and non-encoded messages are also offered. Plaintext messages
.\"0 frequently don't have an associated filename, so they're assigned a
.\"0 unique name from a sequential four-digit number.
プレーンテキストのメッセージを使う。通常、uudeview はデコードの際には
エンコードされたデータだけを表示する。このオプションを設定すると、
.I MIME
メッセージに入っているテキストパートやエンコードされていないデータもデ
コード対象として示される。プレーンテキストのメッセージにはファイル名が
付けられていないことが多いので、これらには 4 桁の通し番号を使ったユニー
クな名前が付けられる。
.TP
.\"0 .B file(s)
.B ファイル(複数可)
.\"0 The files to be scanned for encoded files. You can also give a single hyphen
.\"0 \'\-\' to read from standard input. Any number of files may be given, but
.\"0 there is usually a limitation of 128 options imposed by the shell. If you are
.\"0 composing the list of files with wildcards, make sure you don't accidentally
.\"0 feed the program with binary files. This will result in undefined behaviour.
エンコードされたファイルを探すためにスキャンするファイル。ハイフン
(\'\-\')を指定すれば、標準入力から読み込むこともできる。指定するファイ
ルの数はいくつでも良いが、通常はシェルがオプションの数を 128 個までに
制限している。ワイルドカードを使ってファイルのリストを作った場合には、
間違ってバイナリファイルをプログラムに入力しないこと。こうなった場合の
動作は未定義である。
.TP
.\"0 .B @file
.B @ファイル
.\"0 Makes
.\"0 .I uudeview
.\"0 read further options from the file. Each line of the file must hold exactly
.\"0 one option. The file 
.\"0 .B is erased 
.\"0 after the program finishes. This feature may be used to specify an unlimited
.\"0 number of files to be scanned. Combined with the powers of
.\"0 .BR find (1),
.\"0 entire directory trees (like the news spool directory) can be processed.
追加のオプションをファイルから
.I uudeview
に読み込ませる。このファイルでは 1 行に 1 つだけオプションを書かなけ
ればならない。このファイルはプログラムの終了時に
.B 削除される
。この機能を使うとファイルを何個でも指定することができる。
.BR find (1)
の機能と組み合わせれば、ディレクトリツリー全体(ニューススプールのディ
レクトリ等)を処理することができる。
.PP
.\"0 Options may also be set in the $UUDEVIEW environment variable, which is
.\"0 read before processing the options on the command line.
環境変数 $UUDEVIEW にオプションを指定することもできる。この値はコマン
ドラインのオプションを処理する前に読み込まれる。
.\"0 .SH DECODING
.SH デコード
.\"0 After all input files have been scanned, you are asked for each file what
.\"0 do do with it. Of course, the usual answer is to decode it, but there are
.\"0 other possibilities. You can use the following commands (each command is
.\"0 a single letter):
入力ファイルを全てスキャンした後、それぞれのファイルの扱いについてユー
ザに問い合わせが行われる。当然ながら普通はデコードの実行と答えるのだが、
選択肢は他にもある。以下のコマンドを使用することができる(各コマンドは 
1 文字である):
.TP
.B d
.\"0 (D)ecode the file and write the decoded file to disk, with the given name.
ファイルをデコードし、デコードしたファイルを指定された名前でディスクに
書き込む。
.TP
.B y
.\"0 (Y)es does the same as (d).
(d) と同じ動作である。
.TP
.B x
.\"0 E(x)tract also decodes the file.
このコマンドもファイルをデコードする。
.TP
.B n
.\"0 Skips this file without decoding it.
このファイルをデコードしないで飛ばす。
.TP
.B b
.\"0 Steps back to the previous file.
前のファイルに戻る。
.TP
.B i
.\"0 Displays info about the file, if present. If a multipart posting had a
.\"0 zeroeth part, it is printed, otherwise the first part up to the encoded
.\"0 data is printed.
ファイルに関する情報があれば、それを表示する。マルチパートの投稿に 0
番目のパートがあればそれを表示する。0 番目のパートがなければ、エンコー
ドされているデータまでにある最初のパートが表示される。
.TP
.B e
.\"0 Execute a command. You can enter any arbitrary command, possibly using the
.\"0 current file as an argument. All dollar signs '$' in this command line are
.\"0 replaced with the filename of the current file (speaking correctly, the name
.\"0 of a temporary file). You should not background processes using this
.\"0 temporary file, as programs might get confused if their input file suddenly
.\"0 disappears.
コマンドを実行する。どんなコマンドでも入力することができるが、この際に
は多分、現在のファイルが引き数として使われるだろう。コマンドライン中の
ドル記号 '$' は全て、現在のファイルのファイル名に置き換えられる(正確に
は一時ファイルの名前)。この一時ファイルを使ってバックグラウンドプロセ
スを実行してはならない。なぜなら、入力ファイルが突然消えた場合にプログ
ラムの処理が混乱するからである。
.TP
.B l
.\"0 List a file. Use this command only if you know that the file in question is
.\"0 a textfile, otherwise, you'll get a load of junk.
ファイルをリスト表示する。このコマンドを使うのは、問い合わせ対象のファ
イルがテキストファイルの場合だけにすること。そうでない場合にはゴミが大
量にできるだけである。
.TP
.B r
.\"0 Rename. You can choose a different name for the file in order to save it
.\"0 under this new name.
名前を変える。別の名前を選んで、そのファイルを新しい名前で保存すること
ができる。
.TP
.B p
.\"0 Set the path where decoded files shall be written to. This path can also
.\"0 be set with the -p command line option.
デコードしたファイルを書き込むパスを設定する。このパスは、コマンドライ
ンオプションの -p コマンドで設定することもできる。
.TP
.B q
.\"0 Quits the program immediately.
即座にプログラムを終了する。
.TP
.B ?
.\"0 Prints a short description of all these commands.
以上のコマンド全ての簡単な説明を表示する。
.PP
.\"0 If you don't enter a command and simply hit return at the prompt, the
.\"0 default command, decoding the file, is used.
コマンドを入力しないで、プロンプトでリターンキーだけを叩いた場合には、
デフォルトのコマンドであるファイルのデコードが実行される。
.\"0 .SH RUNTIME MESSGAGES
.SH 実行時のメッセージ
.\"0 In verbose mode (that is, if you didn't disable verbosity with the
.\"0 -v option), progress messages will appear.
.\"0 They are extremely helpful in tracing what the program does, and can
.\"0 be used to figure out the reason why files cannot be decoded, if you
.\"0 understand them. This section explains how to interpret them.
.\"0 Understanding this section is not essential to operate the program.
詳細表示モード(つまり、-v オプションで詳細表示を無効にしていない場合)
では、進行状況メッセージが出力される。このメッセージはプログラムの実行
を追跡するのに非常に便利であり、これを理解できればファイルのデコードに
失敗した原因の追求に使うことができる。このセクションではメッセージの解
釈の仕方を説明する。プログラムを操作するだけならば、このセクションを理
解することはあまり重要でない。
.PP
.\"0 First, there are "Loading" messages, which begin with the string
.\"0 "Loaded". Each line should feature the following items:
最初は「ロード中」のメッセージである。これは文字列 "Loaded" で始まる。
それぞれの行は以下の要素を示さなくてはならない:
.TP
.\"0 .B Source File
.B 入力ファイル
.\"0 The first item is the source file from which a part was loaded. Many
.\"0 parts can be detected within a single file.
最初の要素はソースファイルであり、ここからパートがロードされる。
1 つのファイルから多くのパートが検出されることもある。
.TP
.\"0 .B Subject Line
.B サブジェクト行
.\"0 The complete subject is reproduced in single quotes.
完全なサブジェクトがシングルクォートで括られた形で再現される。
.TP
.\"0 .B Identifier
.B 識別子
.\"0 The program derives a unique identification for this thread from the
.\"0 subject line, for grouping articles that look like they belong to the
.\"0 same file. The result of this algorithm is presented in braces.
このプログラムは、同じファイルに属していると思われる記事をまとめるため、
サブジェクト行を利用してこのスレッドをユニークに識別する。このアルゴリ
ズムの結果はブレースで括って表示される。
.TP
.\"0 .B Filename
.B ファイル名
.\"0 If a filename was detected on the subject line or within the data (for
.\"0 example, on a begin line, or as part of the Content-Type information).
サブジェクト行やデータ内でファイル名が検出されたかどうか(例えば、begin
行や Content-Type 情報の一部として検出される)。
.TP
.\"0 .B Part Number
.B パート番号
.\"0 The part number derived from the subject line, or, in the case of
.\"0 properly MIME-formatted messages, from the "part" information.
パート番号を表す。サブジェクト行から取り出されたり、きちんとした MIME
形式のメッセージの場合には「パート」情報から取り出されたりする。
.TP
.B Begin/End
.\"0 If a "begin" or "end" token was detected, it is printed here.
"begin" トークンや "end" トークンが検出された場合、それがここで出力さ
れる。
.TP
.\"0 .B Encoding Type
.B エンコーディング型
.\"0 If encoded data was detected within this part, either "UUdata",
.\"0 "Base64", "XXdata" or "Binhex" is printed here.
このパート内でエンコードされたデータが検出された場合、"UUdata",
"Base64", "XXdata", "Binhex" のいずれかが出力される。
.PP
.\"0 More messages are printed after scanning has completed. A single line
.\"0 will be printed for each group of articles. The contents of this line
.\"0 are best understood by looking at an example. Here is one:
スキャンが終わった後にはこれ以外のメッセージが出力される。記事のグルー
プそれぞれに対して 1 つの行が出力される。この行の内容は例で見る方が分
かりやすいだろう。以下に例を示す:
.PP
.B Found 'mailfile.gz' State 16 UUData Parts begin 1 2 3 4 5 end 6 OK
.PP
.\"0 This indicates that the file
.\"0 .I mailfile.gz
.\"0 has been found. The file was uuencoded ("UUData") and consists of
.\"0 6 parts. The "begin" token was found in the first part, and the
.\"0 "end" token was found in the sixth part. Because it looks like
.\"0 everything's there, this file is tagged as being "OK". The
.\"0 .I State
.\"0 is a set of bits, where the following values may be or'ed:
この行はファイル
.I mailfile.gz
が見つかったことを示す。ファイルは uuencode されており("UUData")、6 つ
のパートからなる。また、"begin" トークンが最初のパートで見つかり、
"end" トークンが 6 番目のパートで見つかった。全て揃っているように見え
るので、このファイルには "OK" のタグが付けられる。
.I State
には以下に示す各種ビットが設定される。ビットの値は OR されることもあるだろう。
.TP
.B 1
.\"0 Missing Part
欠けているパートがある
.TP
.B 2
.\"0 No Begin
Begin が無い
.TP
.B 4
.\"0 No End
End が無い
.TP
.B 8
.\"0 No encoded data found.
エンコードされているデータが見つからない
.TP
.B 16
.\"0 File looks Ok
ファイルは問題なしと思われる
.TP
.B 32
.\"0 An error occured during decoding of the file.
ファイルのデコード時にエラーが起きた
.TP
.B 64
.\"0 File was successfully decoded.
ファイルがうまくデコードできた
.\"0 .SH NOTES
.SH 注意
.\"0 Because the program cannot receive terminal input when reading from standard
.\"0 input, the interactivity is automatically disabled in this case.
このプログラムは、標準入力から読み込みを行うときには端末の入力を受け取
ることができないので、この場合には対話機能は自動的に無効にされる。
.PP
.\"0 When MIME-style message headers are detected, the program behaves nearly
.\"0 MIME-compliant.
MIME 形式のメッセージヘッダが検出されたときは、このプログラムはほぼ
MIME 準拠の動作を行う。
.\"0 .I Nearly,
.\"0 because the standard does not allow a file to hold more than one messages,
.\"0 but
.\"0 .I uudeview
.\"0 works without this restrictions. Actually, if you guarantee this condition
.\"0 using the 
.\"0 .B -f
.\"0 command line switch, the program fully complies to RFC1521.
「
.I ほぼ
」というのは、規約ではファイルが複数のメッセージを含むことは認められて
いないけれど、
.I uudeview
はこの制限なしで動作するからである。実際には、コマンドラインオプション
.B -f
を用いて必ずこの状態になるようにすれば、このプログラムは RFC1521 に完
全に準拠する。
.\"0 (Even with this switch set, all parts of a proper MIME multipart message
.\"0 are handled.)
(このオプションが設定されていても、正しい MIME マルチパートメッセージ
に含まれるパートは全て処理される。)
.PP
.\"0 The scanner tends to ignore short Base64 data (less than four lines)
.\"0 outside of MIME messages. Some checks for this condition are used in
.\"0 desperate mode, but they may cause misdetection of encoded data,
.\"0 resulting in some invalid files.
スキャンの処理部分は、MIME メッセージの外部にある短い Base64 データ(4
行以下)を無視することがよくある。この状態に対するチェックがいくつか
desperate モードで行われるが、これを行うとエンコードされたデータを誤っ
て検出し、不正なファイルができることがある。
.PP
.\"0 Files are always decoded into a temporary file first, then this file is copied
.\"0 to the final location. This is to prevent accidentally overwriting existing
.\"0 files with data that turns out too late to be undecodeable. Thus be careful
.\"0 to have twice the necessary space available. Also, when reading from
.\"0 standard input, all the data is dumped to a temporary file before
.\"0 starting the usual scanning process on that file.
ファイルは最初は必ず一時ファイルにデコードされ、その後に最終的な場所に
コピーされる。これは、後になってからデコードできないことが分かるような
データで既存のファイルを誤って上書きすることを防ぐためである。したがっ
て、必要なサイズの 2 倍の空きスペースを予め確保すること。また、標準入
力から読み込みを行う時には、全てのデータは一時ファイルに書き込まれ、そ
の後にこのファイルに対して通常のスキャン処理が始められる。
.PP
.\"0 .I uudeview
.\"0 tries to derive all necessary information from the Subject: line if present.
.\"0 If it holds garbage, or if the program fails to find a unique identification
.\"0 and the part number there, 
.\"0 .I uudeview
.\"0 might still be able to decode the file using other heuristics, but you'll
.\"0 need major luck then.
Subject 行があれば、
.I uudeview
は必要な情報全てをこの行から取り出そうとする。Subject 行にゴミが入っ
ている場合や、プログラムがユニークな識別情報とパート番号を Subject 行
から見つけられなかった場合でも、
.I uudeview
は別のヒューリスティクスを用いてファイルをデコードすることができるが、
この場合の結果は運任せである。
.PD 0
.PP
.\"0 Yet this is only a concern with split-files. If all encoded files only consist
.\"0 of single parts, don't worry.
ただし、これが関係あるのはファイルが分割されている場合だけである。エン
コードされたファイルが全て 1 つのパートだけからなる場合には何も心配す
る必要はない。
.PD
.PP
.\"0 If you rename, copy or link the program to
.\"0 .BR uudecode ,
.\"0 it may act as a smart replacement for the standard, accepting the same
.\"0 command-line options. This has not been well-tested yet.
このプログラムの名前を変えたり、コピーしたり、リンクをすることによって
.BR uudecode
にした場合、このプログラムは標準の
.BR uudecode
の高性能な代用プログラムとして動作し、同じコマンドラインオプションを受
け付ける。ただし、テストはまだ十分でない。
.\"0 .SH "SEE ALSO"
.SH 関連項目
.BR uuenview (1),
.BR uudecode (1),
.BR uuencode (1),
.PD 0
.PP
.\"0 The
.\"0 .I uudeview
.\"0 homepage on the Web, 
ウェブ上にある
.I uudeview
のホームページ:
.PD 0
.PP
http://www.uni-frankfurt.de/~fp/uudeview/
.PD
.\"0 .SH BUGS
.SH バグ
.\"0 To read a file whose name starts with a hyphen '-', prepend a path
.\"0 name, for example './'.
名前がハイフン('-')で始まるファイルを読み込むには、パス名(例えば './')
を前に付けること。
.PP
.\"0 Before reporting a bug, make sure the file can be decoded by other means. I
.\"0 hate to receive bug-reports where it turns out that
.\"0 .I uudeview
.\"0 just failed to decode complete garbage.
バグとして報告する前には、そのファイルが他の手段でデコードできることを
確かめること。作者は、全くのゴミのデコードに失敗したと後でわかるような
バグ報告は受け取りたくない。
.PP
.\"0 If you think you've found a bug, email the source file (at best,
.\"0 compress and encode the original file, don't just include it) and
.\"0 a listing of the program's messages (from verbose mode) to
.\"0 .I fp@informatik.uni-frankfurt.de.
バグを見つけたと思ったら、入力ファイル(できれば単に入れるだけでなく、
元のファイルに圧縮とエンコードを施すこと)とプログラムのメッセージのリ
スト(詳細表示モード)を
.I fp@informatik.uni-frankfurt.de
宛に送ること。
.PP
.\"0 The checksums found in
.\"0 .I BinHex
.\"0 data are currently ignored.
現在は
.I BinHex
データに入っているチェックサムは無視される。
.PP
.\"0 The program cannot fully handle partial multipart messages (MIME-style
.\"0 multipart messages split over several mail messages). The individual
.\"0 parts are recognized and concatenated, and the embedded multipart
.\"0 message is "decoded" into a plain-text file, which must then be fed
.\"0 again to
.\"0 .I uudeview.
.\"0 Don't worry, these kinds of messages are rare.
このプログラムは、分割されたマルチパートメッセージ(複数のメールに分割
された MIME 形式のマルチパートメッセージ)を完全に処理することができな
い。各パートが識別されて 1 つにまとめられ、これに含まれているマルチパー
トメッセージがプレーンテキストファイルに「デコード」されるが、このファ
イルを再び
.I uudeview
に入力しなければならない。しかし、このようなメッセージは滅多にないので
心配する必要はない。

