.\" Copyright (c) 1995 Jim Van Zandt <jrv@vanzandt.mv.com> and aeb
.\" Sun Feb 26 11:46:23 MET 1995
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" Modified, Sun Feb 26 15:04:20 1995, faith@cs.unc.edu
.\" Modified, Thu Apr 20 22:08:17 1995, jrv@vanzandt.mv.com
.\" Modified, Mon Sep 18 22:32:47 1995, hpa@storm.net (H. Peter Anvin)
.\" FIXME The following are not documented:
.\"     KDFONTOP (since 2.1.111)
.\"     KDGKBDIACRUC (since 2.6.24)
.\"     KDSKBDIACR
.\"     KDSKBDIACRUC (since 2.6.24)
.\"     KDKBDREP (since 2.1.113)
.\"     KDMAPDISP (not implemented as at 2.6.27)
.\"     KDUNMAPDISP (not implemented as at 2.6.27)
.\"     VT_LOCKSWITCH (since 1.3.47, needs CAP_SYS_TTY_CONFIG)
.\"     VT_UNLOCKSWITCH (since 1.3.47, needs CAP_SYS_TTY_CONFIG)
.\"     VT_GETHIFONTMASK (since 2.6.18)
.\"
.\" Japanese Version Copyright (c) 1996,1997 TAKAHASHI Mutsuji
.\"				   1998      ISHIKAWA Mutsumi
.\"                               all rights reserved.
.\" Translated Sun Jan 11 03:24:14 JST 1998
.\"         by TAKAHASHI Mutsuji <muz@ilp.iijnet.or.jp>
.\"            and ISHIKAWA Mutsumi <ishikawa@linux.or.jp>
.\"
.\" Japanese Version Last Modified Thu Feb  5 17:35:37 JST 1998
.\"	by ISHIKAWA Mutsumi <ishikawa@linux.or.jp>
.\" Updated & Modefied Sat Feb 27 1999 by Shouichi Saito
.\" Updated Tue Jan 28 JST 2003 by Kentaro Shirakata <argrath@ub32.org>
.\"
.TH CONSOLE_IOCTL 4 2009-02-28 "Linux" "Linux Programmer's Manual"
.SH 名前
console ioctl \- コンソール端末と仮想コンソールの ioctl
.SH 説明
次のような Linux 固有の
.BR ioctl (2)
がサポートされている。
それぞれ3番目の引数が必要である、ここでは \fIargp\fP とする。
.IP \fBKDGETLED\fP
LED の状態を取得する。
\fIargp\fP は \fIchar\fP のポインターである。
\fI*argp\fP の下位 3 ビットに以下のように LED の状態がセットされる。

    LED_CAP       0x04   キャピタルロックが点灯
    LEC_NUM       0x02   ナンバーロックが点灯
    LED_SCR       0x01   スクロールロックが点灯
.IP \fBKDSETLED\fP
LEDを点灯させる。LEDは \fIargp\fP の下位 3 ビットに従い点灯される。
しかし、より高位のビットがセットされている時には、キャピタルロック、
ナンバーロック、スクロールロックのキーボード機能の状態を表示する LED は
通常状態に戻る。
.LP
カーネル 1.1.54 以前は、LED はそれぞれのキーボードフラグの状態を反映する
だけで、KDGETLED/KDSETLED もキーボードフラグを変更するだけであった。
カーネルl 1.1.54 からは LED に任意の表示をする事ができるようになったが、
デフォルトではキーボードフラグを表示する。
次に示す 2 つの ioctl はキーボードフラグにアクセスするのに用いられる。
.IP \fBKDGKBLED\fP
キャピタルロック、ナンバーロック、スクロールロックの(LED の表示では
なく)キーボードフラグを得る。
\fIargp\fP はフラグの状態がセットされる文字変数を指す。
(0x7)でマスクして得られる下位 3 ビットが現在のフラグの状態を示し、
(0x70)でマスクして得られる次の 3 ビットがデフォルトのフラグの状態を
示す。(カーネル 1.1.54以降)
.IP \fBKDSKBLED\fP
キャピタルロック、ナンバーロック、スクロールロックの(LED の表示ではなく)
キーボードフラグをセットする。
\fIargp\fP がセットしたいフラグである。
(0x7)でマスクして得られる下位 3 ビットがフラグの状態で、(0x70)でマスクして
得られる次の 3 ビットがデフォルトのフラグの状態である。(カーネル
1.1.54以降)
.IP \fBKDGKBTYPE\fP
キーボードの種類を得る。これは値 0x02 と定義されている KB_101を返す。
.IP \fBKDADDIO\fP
I/Oポートを有効な物として加える。これは \fIioperm(arg,1,1)\fP と等価である。
.IP \fBKDDELIO\fP
I/Oポートを有効な物から外す。これは \fIioperm(arg,1,0)\fP と等価である。
.IP \fBKDENABIO\fP
ビデオボードへの I/O を可能にする。
これは \fIioperm(0x3b4, 0x3df-0x3b4+1, 1)\fP と等価である。
.IP \fBKDDISABIO\fP
ビデオボードへの I/O を不可能にする。
これは \fIioperm(0x3b4, 0x3df-0x3b4+1, 0)\fP と等価である。
.IP \fBKDSETMODE\fP
テキスト/グラフィクスモードを設定する。
\fIargp\fP は次のうちのどれか：

    KD_TEXT       0x00
    KD_GRAPHICS   0x01
.IP \fBKDGETMODE\fP
テキスト/グラフィクスモードを取得する。
\fIargp\fP が指す \fIlong\fP 型変数に
上述の値のどちらかがセットされる。
.IP \fBKDMKTONE\fP
指定された長さのトーンを発生する。
\fIargp\fP の下位 16 ビットはクロックサイクルを単位にして周期を指定し、
上位 16 ビットが msec の単位で表した、(トーンを発生させる)時間を指定する。
トーンを発生させる時間がゼロのときは、サウンドはオフになる。
制御は直ちに戻る。
例えば、\fIargp\fP = (125<<16) + 0x637 とすれば、通常 ctrl-G を押した時に
発生する音になる。
(カーネル 0.99pl1 以降;この機能は カーネル 2.1.49 から
2.1.50 ではバグのため動作しない)
.IP \fBKIOCSOUND\fP
音の発生の開始や停止を行う。
\fIargp\fP の下位 16 ビットはクロックサイクルを単位として周期を示す。
(つまり \fIargp\fP = 1193180/周波数)。
\fIargp\fP = 0 の場合、サウンドはオフになる。
どちらの場合でも、ただちに制御は戻る。
.IP \fBGIO_CMAP\fP
現在のデフォルトのカラーマップをカーネルより取得する。
.IP \fBPIO_CMAP\fP
デフォルトのテキストモードのカラーマップを変更する。
\fIargp\fP が指す 48 バイトの配列中には、16 の可能なスクリーンの色を、
赤、緑、青の順に 0 をオフ、255を最大強度とした値として納める。
デフォルトの色は順に、黒、濃い赤、濃い緑、茶、濃い青、濃い紫、濃いシアン、
明るい灰色、濃い灰色、明るい赤、明るい緑、黄、明るい青、明るい紫、
明るいシアン、白である。(カーネル 1.3.3以降)
.IP \fBGIO_FONT\fP
拡張された形式で 256 文字のスクリーンフォントを得る。
\fIargp\fP は 8192 バイトの配列を指す。
現在ロードされているフォントが 512 文字のフォントであるか、コンソールが
テキストモードでない時には失敗し \fBEINVAL\fP のエラーコードを返す。
.IP \fBGIO_FONTX\fP
スクリーンフォントとそれに関連した情報を取得する。
\fIargp\fP は構造体 consolefontdesc (\fBPIO_FONTX\fP を参照のこと)を指す。
関数呼び出しのときには、\fIcharcount\fP には、\fIchardata\fP が指す
バッファにおさまる最大の文字数をセットしなければならない。
関数呼び出しから戻った時には \fIcharcount\fP と \fIcharheight\fP には、
現在ロードされているフォントの該当するデータが収められている。
配列 \fIchardata\fP には、最初に \fIcharcount\fP にいれた値によって
フォントを収めるのに十分なスペースがあるとわかればフォントデータが収められる。
そうでない時には、バッファは変更されず、 \fIerrno\fP に \fBENOMEM\fP が
セットされる(カーネル 1.3.1 以降)。
.IP \fBPIO_FONT\fP
256 文字のフォントをセットする。EGA/VGA キャラクタージェネレーター
(character generator) にフォントをロードする。
\fIargp\fP は、8192 バイト(一文字 32 バイト)のマップを指す。
マップのうち、最初の \fIN\fP のみが 8x\fIN\fP のフォントのために
用いられる(0 < \fIN\fP <= 32)。
この呼び出しをすると Unicode のマッピングが無効になる。
.IP \fBPIO_FONTX\fP
スクリーンフォントと、それに関連するレンダリング情報をセットする。
\fIargp\fP は、以下の構造体を指す。

.in +4n
.nf
struct consolefontdesc {
    unsigned short charcount;  /* フォントの文字数
                                  (256 または 512) */
    unsigned short charheight; /* 一文字の走査線の数
                                  (1-32) */
    char          *chardata;   /* 展開されたフォントデータ */
};
.fi
.in

必要ならスクリーンは適当にサイズ変更され、\fBSIGWINCH\fP が適切な
プロセスに送られる。
このコールにより Unicode のマッピングが無効になる。
.IP \fBPIO_FONTRESET\fP
スクリーンフォント、サイズ、 Unicode マッピングをブート時のデフォルト値に
リセットする。\fIargp\fP は用いられないが、将来のバージョンの
Linux との互換性を保つために NULL にセットすべきである。
.IP \fBGIO_SCRNMAP\fP
スクリーンマッピングをカーネルより取得する。\fIargp\fP はサイズ E_TABSZ の
領域を指す。その領域には各キャラクターを表示するのに用いられるフォントの
位置がロードされている。
この呼び出しは現在ロードされているフォントが 256 文字よりも多い時には
無意味な情報を返す事が多い。
.IP \fBGIO_UNISCRNMAP\fP
フル Unicode スクリーンマッピングをカーネルより取得する。
\fIargp\fP はサイズ E_TABSZ*sizeof(unsigned short) の領域を指す。
その領域には各キャラクターを示す Unicode がロードされている。
U+F000 に始まる Unicode の特別な集合は、「フォント直接な(direct to font)」
マッピングを示すのに用いられる(カーネル 1.3.1 以降)。
.IP \fBPIO_SCRNMAP\fP
「ユーザー定義可能な(user definable)」(4番目の)テーブルをカーネルに
ロードする。そのテーブルは各バイトをスクリーンシンボルにマッピングする。
\fIargp\fP はサイズE_TABSZの領域を指す。
.IP \fBPIO_UNISCRNMAP\fP
「ユーザー定義可能な」(4番目の)テーブルをカーネルにロードする。
そのテーブルは各バイトをユニコードにマッピングし、その後、
現在ロードされているユニコードからフォントへのマップに従い
スクリーンシンボルに変換される。
U+F000 に始まるユニコードは直接フォントシンボルにマッピングするのに
使える(カーネル 1.3.1 以降)
.IP \fBGIO_UNIMAP\fP
Unicode からフォントへのマッピングをカーネルから取得する。
\fIargp\fP は、

.in +4n
.nf
struct unimapdesc {
    unsigned short  entry_ct;
    struct unipair *entries;
};
.fi
.in

という構造体を指す。
ここで \fIentries\fP は、

.in +4n
.nf
struct unipair {
    unsigned short unicode;
    unsigned short fontpos;
};
.fi
.in

という構造体の配列へのポインターである。
(カーネル 1.1.92 以降)
.IP \fBPIO_UNIMAP\fP
Unicode からフォントへのマッピングをカーネルにセットする。\fIargp\fP
は構造体 \fIstruct unimapdesc\fP へのポインターである。(カーネル 1.1.92 以降)
.IP \fBPIO_UNIMAPCLR\fP
テーブルをクリアし、その事をハシュアルゴリズムに伝える。
\fIargp\fPは

.in +4n
.nf
struct unimapinit {
    unsigned short advised_hashsize;  /* 0 if no opinion */
    unsigned short advised_hashstep;  /* 0 if no opinion */
    unsigned short advised_hashlevel; /* 0 if no opinion */
};
.fi
.in

という構造体を指すポインターである。
(カーネル 1.1.92 以降)
.IP \fBKDGKBMODE\fP
現在のキーボードモードを取得する。\fIargp\fP の指す \fIlong\fP 型変数が、
次のうちのどれかに設定される。

    K_RAW         0x00
    K_XLATE       0x01
    K_MEDIUMRAW   0x02
    K_UNICODE     0x03
.IP \fBKDSKBMODE\fP
現在のキーボードモードを設定する。
\fIargp\fP は上記の値のうちのどれかに等しい \fIlong\fP にする。
.IP \fBKDGKBMETA\fP
メタキーハンドリングモード(meta key handling mode)を取得する。
\fIargp\fP が指す \fIlong\fP 型変数は、次のうちのどれかに設定される。

    K_METABIT     0x03   set high order bit
    K_ESCPREFIX   0x04   escape prefix
.IP \fBKDSKBMETA\fP
メタキーハンドリングモードを設定する。
\fIargp\fP は上記の値のどれかに等しい \fIlong\fP にする。
.IP \fBKDGKBENT\fP
キーコードをアクションコードに変換するキー変換表のエントリーの一つを
取得する。
\fIargp\fP は、

.in +4n
.nf
struct kbentry {
    unsigned char  kb_table;
    unsigned char  kb_index;
    unsigned short kb_value;
};
.fi
.in

へのポインターである。
最初の2つの要素、\fIkb_table\fP には選択するキーテーブル (0 <=
\fIkb_table\fP < MAX_NR_KEYMAPS)、\fIkb_index\fP にはキーコード(0 <=
\fIkb_index\fP < NR_KEYS)を設定する。
\fIkb_value\fP は対応するアクションコード、または、そのようなキーが
ないときには K_HOLE、\fIkb_table\fP が無効な時には K_NOSUCHMAP に設定される。
.IP \fBKDSKBENT\fP
変換テーブルのエントリーの一つを設定する。\fIargp\fP は
構造体 \fIstruct kbentry\fP へのポインターである。
.IP \fBKDGKBSENT\fP
ファンクションキーの文字列を取得する。\fIargp\fP は、

.in +4n
.nf
struct kbsentry {
    unsigned char kb_func;
    unsigned char kb_string[512];
};
.fi
.in

という構造体へのポインターである。

\fIkb_func\fP 番目のファンクションキーのアクションコードに対応する
(NULL で終端された)文字列が \fIkb_string\fP に設定される。
.IP \fBKDSKBSENT\fP
ファンクションキーの文字列のエントリーを設定する。\fIargp\fP は、
構造体 \fIstruct kbsentry\fP へのポインターである。
.IP \fBKDGKBDIACR\fP
カーネルのアクセントテーブル(accent table)を読み込む。\fIargp\fPは、

.in +4n
.nf
struct kbdiacrs {
    unsigned int   kb_cnt;
    struct kbdiacr kbdiacr[256];
};
.fi
.in

という構造体へのポインターである。
ここで、\fIkb_cnt\fP は配列中のエントリーの個数で、個々のエントリーは、

.in +4n
.nf
struct kbdiacr {
    unsigned char diacr;
    unsigned char base;
    unsigned char result;
};
.fi
.in

という構造体である。
.IP \fBKDGETKEYCODE\fP
カーネルの(スキャンコードからキーコードへ
変換する)キーコードテーブルエントリーを読み込む。
\fIargp\fP は、

.in +4n
.nf
struct kbkeycode {
    unsigned int scancode;
    unsigned int keycode;
};
.fi
.in

へのポインターである。
\fIkeycode\fP は、\fIscancode\fP に対応した値に設定される。(ただし、89
<= \fIscancode\fP <= 255 のみについて。1 <= \fIscancode\fP <= 88 では
\fIkeycode\fP == \fIscancode\fP である。)
(カーネル 1.1.63 以降)
.IP \fBKDSETKEYCODE\fP
カーネルのキーコードテーブルエントリーを書き込む。\fIargp\fP は構造体
\fIstruct kbkeycode\fP へのポインターである。
(カーネル 1.1.63 以降)
.IP \fBKDSIGACCEPT\fP
この関数呼び出しは、特別な組合せでキーを押した時に発生するシグナル
\fIargp\fP (1 <= \fIargp\fP <= NSIG) を進んで受け付けるかどうかを示す。
(linux/drivers/char/keyboard.c の Spawn_console() を見よ。)
.IP \fBVT_OPENQRY\fP
最初の空いている(まだオープンされていない)コンソールを返す。
\fIargp\fP の指す \fIint\fP 型の整数には、vt の番号がセットされる
(1 <= \fI*argp\fP <= MAX_NR_CONSOLES)。
.IP \fBVT_GETMODE\fP
アクティブな vt のモードを取得する。\fIargp\fPは、

.in +4n
.nf
struct vt_mode {
   char mode;     /* vt mode */
   char waitv;    /* if set, hang on writes if not active */
   short relsig;  /* signal to raise on release req */
   short acqsig;  /* signal to raise on acquisition */
   short frsig;   /* unused (set to 0) */
};
.fi
.in

という構造体を指すポインタであり、アクティブな vt のモードが
セットされる。
\fImode\fP は次のどれかに設定される：

   VT_AUTO       自動vt切替え
   VT_PROCESS    プロセスコントロール切替え
   VT_ACKACQ     アクノリッジ切替え
.IP \fBVT_SETMODE\fP
アクティブな vt のモードを設定する。\fIargp\fP は構造体
\fIstruct vt_mode\fP への
ポインターである。
.IP \fBVT_GETSTATE\fP
グローバルな vt の状態の情報を取得する。\fIargp\fPは、

.in +4n
.nf
struct vt_stat {
   unsigned short v_active;  /* active vt */
   unsigned short v_signal;  /* signal to send */
   unsigned short v_state;   /* vt bit mask */
};
.fi
.in

へのポインターである。
使用されているそれぞれの vt につき \fIv_state\fP の対応するビットが
セットされる。
(カーネルl 1.0 から 1.1.92 まで)
.IP \fBVT_RELDISP\fP
ディスプレーを解放する。
.IP \fBVT_ACTIVATE\fP
\fIargp\fP (1 <= \fIargp\fP <= MAX_NR_CONSOLES)の vt に切替える。
.IP \fBVT_WAITACTIVE\fP
\fIargp\fPの vt がアクティブになるまで待つ。
.IP \fBVT_DISALLOCATE\fP
\fIargp\fP の vt に結びつけられたメモリーを解放する。
(カーネル 1.1.54 以降)
.IP \fBVT_RESIZE\fP
カーネルが認識するスクリーンサイズを設定する。\fIargp\fP は、

.in +4n
.nf
struct vt_sizes {
   unsigned short v_rows;       /* # rows */
   unsigned short v_cols;       /* # columns */
   unsigned short v_scrollsize; /* no longer used */
};
.fi
.in

へのポインターである。
これはビデオモードを変更しない事に注意。
.BR resizecons (8)
を見よ(カーネル 1.1.54 以降)。
.IP \fBVT_RESIZEX\fP
カーネルが認識する各種のスクリーンパラメータを設定する。\fIargp\fP は、

.in +4n
.nf
struct vt_consize {
    unsigned short v_rows;  /* number of rows */
    unsigned short v_cols;  /* number of columns */
    unsigned short v_vlin;  /* number of pixel rows
                               on screen */
    unsigned short v_clin;  /* number of pixel rows
                               per character */
    unsigned short v_vcol;  /* number of pixel columns
                               on screen */
    unsigned short v_ccol;  /* number of pixel columns
                               per character */
};
.fi
.in

へのポインターである。

パラメータはゼロであってもよい。そのときは「変更しないこと」を
意味するが、複数のパラメータが設定された時にはそれらの間で矛盾が
ないようにしなければならない。
この関数呼び出しによってもビデオモードは変更されない事に注意。
.BR resizecons (8)
を参照の事(カーネル 1.3.3 以降)。
.PP
以下の ioctl がどのように動作をするかは、\fIargp\fP が指す構造体の
最初のバイト(ここでは \fIsubcode\fP と呼ぶ)に依存する。
これらの呼出しは、スーパーユーザーか現在の tty のオーナにのみ許される。
.IP "\fBTIOCLINUX, subcode=0\fP"
スクリーンをダンプ(dump)する
カーネル 1.1.92 以降でなくなった(1.1.92 以降では、代わりに /dev/vcsN
または /dev/vcsaN より読み込む)。
.IP "\fBTIOCLINUX, subcode=1\fP"
タスク情報を取得する。カーネル 1.1.92 でなくなった。
.IP "\fBTIOCLINUX, subcode=2\fP"
選択を設定する。
\fIargp\fP が指すのは、
.in +4n
.nf

struct {
   char subcode;
   short xs, ys, xe, ye;
   short sel_mode;
}

.fi
.in
であり、ここで
\fIxs\fP と \fIys\fP は始めの桁と行で、\fIxe\fP と \fIye\fP は終りの桁と
行である。
(左上の隅が 桁=行=1 )
\fIsel_mode\fP は 0 が文字毎の選択で、1は語毎の選択、2は行毎の選択を
意味する。
示されたスクリーン上の文字はハイライト表示され devices/char/console.c の
静的配列 sel_buffer に保存される。
.IP "\fBTIOCLINUX, subcode=3\fP"
選択したものをペーストする。
選択バッファ中の文字 が \fIfd\fP に書き出される。
.IP "\fBTIOCLINUX, subcode=4\fP"
スクリーンをアンブランク(unblank)する。
.IP "\fBTIOCLINUX, subcode=5\fP"
語毎の選択のための「語」中の文字を規定している 256 ビットのルックアップ
テーブルの内容を設定する(カーネル 1.1.32 以降)。
.IP "\fBTIOCLINUX, subcode=6\fP"
\fIargp\fP は文字変数を指すポインタで、その内容がカーネル変数
\fIshift_state\fPの値に設定される(カーネル 1.1.32 以降)。
.IP "\fBTIOCLINUX, subcode=7\fP"
\fIargp\fP は文字変数を指すポインタで、その内容がカーネル変数
\fIreport_mouse\fP の値に設定される(カーネル 1.1.33 以降)。
.IP "\fBTIOCLINUX, subcode=8\fP"
スクリーン幅、スクリーン高さ、カーソル位置、全ての文字属性の組をダンプする
(カーネル 1.1.67 から 1.1.91までのみ。
カーネル 1.1.92 以降では /dev/vcsa*より読み込む)。
.IP "\fBTIOCLINUX, subcode=9\fP"
スクリーン幅、スクリーン高さ、カーソル位置、全ての文字属性の組を復元する
(カーネル 1.1.67 から 1.1.91 までのみ。
カーネル 1.1.92 以降では /dev/vcsa* に書き込む)。
.IP "\fBTIOCLINUX, subcode=10\fP"
新世代モニターのパワーセーブ機能を制御する。
VESA スクリーンブランキングモードが \fIargp\fP[1]に設定される。
その値はスクリーンブランキングがどのように行われるかを示す。以下がその
値である。

	\fI0\fP: スクリーンブランキングなし。

	\fI1\fP:現在のビデオアダプターレジスタが保存されたあと、
コントローラは垂直同期パルスをオフにするようプログラムされる。これにより
モニターは「スタンバイ」モードにはいる。
モニターに Off_Mode タイマが備わっておれば、最終的にはモニターが自分で
電源を落す。

	\fI2\fP:現在の設定を保存した後、垂直、水平同期パルスがオフになる。
これによりモニターは「オフ」モードになる。
モニターに Off_Mode タイマーがない時、または、blank_timer がタイムアウトしたら
すぐにモニターの電源を落したいときにこの選択肢を選ぶ。
(注意：頻繁にモニターの電源を切るとモニターを痛める。)

(カーネル 1.1.76 以降)

.SH 戻り値
成功時には 0 が返される。エラーに対しては \-1 が返され、
\fIerrno\fP が設定される。
.SH エラー
\fIerrno\fP は次のような値をとる:
.TP
.B EBADF
ファイルディスクリプタが無効。
.TP
.B ENOTTY
ファイルディスクリプタがキャラクタ・スペシャルデバイスと関連付けられて
いない。または、要求されたものがそれに当てはまらない。
.TP
.B EINVAL
ファイルディスクリプタまたは \fIargp\fP が無効。
.TP
.B EPERM
権限が不十分。

.SH 注意
.BR 警告 :
このマニュアルページを Linux のコンソール ioctl を文書化したものと思わない事。
これは、興味がある人がソースを読むことの代わりになるように用意した物である。
ioctl は文書化されない Linux の内部機能であって、警告なしに
変更されることがある。
(そして、このページはカーネル 1.1.94 のときの状況を記述した物で、それは
以前のバージョンと比べれば、多くの違いがある)

ioctl はカーネルと、ある特定のよく知られたプログラムとの情報交換のために
導入される事が非常に多い(fdisk, hdparm, setserial,tunelp, loadkeys,
selection, setfont など)。そのため ioctl の動作は、その特定のプログラムが
必要とした時には変更になる。

これらの ioctl を使ったプログラムは他のバージョンの Unix との互換性が
ないし、古いバージョンの Linux では、走らない。さらに将来のバージョンの
Linux では走らなくなるかも知れない。

POSIX 機能を使いなさい。
.SH 関連項目
.BR dumpkeys (1),
.BR kbd_mode (1),
.BR loadkeys (1),
.BR mknod (1),
.BR setleds (1),
.BR setmetamode (1),
.BR execve (2),
.BR fcntl (2),
.BR ioperm (2),
.BR termios (3),
.BR console (4),
.BR console_codes (4),
.BR mt (4),
.BR sd (4),
.BR tty (4),
.BR tty_ioctl (4),
.BR ttyS (4),
.BR vcs (4),
.BR vcsa (4),
.BR charsets (7),
.BR mapscrn (8),
.BR resizecons (8),
.BR setfont (8),
.IR /usr/include/linux/kd.h ,
.I /usr/include/linux/vt.h
