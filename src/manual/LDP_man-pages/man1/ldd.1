.\" Copyright 1995-2000 David Engel (david@ods.com)
.\" Copyright 1995 Rickard E. Faith (faith@cs.unc.edu)
.\" Copyright 2000 Ben Collins (bcollins@debian.org)
.\"    Redone for GLibc 2.2
.\" Copyright 2000 Jakub Jelinek (jakub@redhat.com)
.\"    Corrected.
.\" Most of this was copied from the README file.
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Do not restrict distribution.
.\" May be distributed under the GNU General Public License
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH LDD 1 2012\-07\-16 "" "Linux Programmer's Manual"
.SH 名前
ldd \- 共有ライブラリへの依存関係を表示する
.SH 書式
\fBldd\fP [OPTION]... FILE...
.SH 説明
\fBldd\fP はコマンドラインで指定したプログラムや共有ライブラリについて、 それぞれで必要とされる共有ライブラリを表示する。
.SS Security
.\" Mainline glibc's ldd allows this possibility (the line
.\"      try_trace "$file"
.\" in glibc 2.15, for example), but many distro versions of
.\" ldd seem to remove that code path from the script.
In the usual case, \fBldd\fP invokes the standard dynamic linker (see
\fBld.so\fP(8))  with the \fBLD_TRACE_LOADED_OBJECTS\fP environment variable set
to 1, which causes the linker to display the library dependencies.  Be
aware, however, that in some circumstances, some versions of \fBldd\fP may
attempt to obtain the dependency information by directly executing the
program.  Thus, you should \fInever\fP employ \fBldd\fP on an untrusted
executable, since this may result in the execution of arbitrary code.  A
safer alternative when dealing with untrusted executables is:

    $ objdump \-p /path/to/program | grep NEEDED
.SH オプション
.TP 
\fB\-\-version\fP
\fBldd\fP のバージョン番号を表示する。
.TP 
\fB\-v\ \-\-verbose\fP
シンボルのバージョン情報などを含めた全ての情報を表示する。
.TP 
\fB\-u\ \-\-unused\fP
使用されていない直接の依存関係を表示する (glibc 2.3.4 以降)。
.TP 
\fB\-d\ \-\-data\-relocs\fP
リロケーションを実行し、足りないオブジェクトについてレポートする (ELF のみ)。
.TP 
\fB\-r\ \-\-function\-relocs\fP
足りないオブジェクトや関数についてレポートする (ELF のみ)。
.TP 
\fB\-\-help\fP
使用法を表示する。
.SH 注意
標準的なバージョンの \fBldd\fP は glibc2 に付属している。 libc5 には古いバージョンのものが付属しており、
これが入っているシステムもまだ存在する。 libc5 バージョンではロングオプションがサポートされていない。 一方、glibc2 バージョンでは
\fB\-V\fP をサポートしておらず、これと同じ意味の \fB\-\-version\fP しかサポートしていない。
.LP
libc5 バージョンのプログラムでは、 コマンドラインで与えられたライブラリ名に \(aq/\(aq
が含まれている場合は、ライブラリ名をそのまま用いる。 \(aq/\(aq が含まれていない場合は、標準的なパスからライブラリを検索する。
カレントディレクトリにある共有ライブラリに対して実行するには、 名前にプレフィックス "./" を付けること。
.SH バグ
\fBldd\fP は a.out 共有ライブラリでは動作しない。
.PP
.\" .SH AUTHOR
.\" David Engel.
.\" Roland McGrath and Ulrich Drepper.
\fBldd\fP は非常に古い a.out プログラム (\fBldd\fP のサポートがコンパイラに追加される以前にビルドされたようなプログラム)
では動作しない。 このようなプログラムに対して \fBldd\fP を用いると、プログラムは \fIargc\fP = 0 で実行される。結果は予想不可能である。
.SH 関連項目
\fBld.so\fP(8), \fBldconfig\fP(8)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.51 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
