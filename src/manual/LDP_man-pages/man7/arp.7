'\" t
.\" This man page is Copyright (C) 1999 Matthew Wilcox <willy@bofh.ai>.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" Modified June 1999 Andi Kleen
.\" $Id: arp.7,v 1.9 2001/03/12 08:45:27 nakano Exp $
.\"
.\" Japanese Version Copyright (c) 1999-2001 NAKANO Takeo all rights reserved.
.\" Translated 1999-12-06, NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated & Modified 2001-02-16, NAKANO Takeo
.\" Updated 2008-12-26, Akihiro MOTOKI, LDP v3.14
.\"
.\"WORD		permanent		保存
.\"WORD		neighbor cache entry	近傍キャッシュエントリ
.\"WORD		stale			古くなった
.\"WORD		proxy arp		代理 arp
.\"WORD		garbage collect (-or)	ガベージ・コレクト(コレクタ)
.\"WORD		capability		権限
.\"WORD		neighbor soliciation message	近傍要請メッセージ
.\"WORD		network flooding	ネットワーク・フラッディング
.\"WORD		thrashing		スラッシング
.\"WORD		connection oriented	接続指向
.\"WORD		forward progress	フォワードプログレス
.\"
.TH ARP 7 2008-11-25 "Linux" "Linux Programmer's Manual"
.SH 名前
arp \- Linux ARP カーネルモジュール
.SH 説明
このカーネルプロトコルモジュールは、
RFC\ 826 で定義されている Address Resolution Protocol を
実装したものである。 ARP は、ダイレクトに接続されたネットワーク上で、
第 2 層のハードウェアアドレスをIPv4 プロトコルアドレスに
変換するために用いられる。ユーザーは設定の場合を除いて
通常直接このモジュールに関ることはない。
これはカーネル内部の他のプロトコルにサービスを提供するものである。
.PP
ユーザープロセスは、
.BR packet (7)
ソケットを用いれば ARP パケットを受信することができる。
ARP キャッシュをユーザー空間で管理することもできる。
これには
.BR netlink (7)
を用いる。 ARP テーブルも制御可能で、これには任意の
.B AF_INET
ソケットに
.BR ioctl (2)
を用いる。
.PP
ARP モジュールはハードウェアアドレスからプロトコルアドレスへの
マッピングのキャッシュを管理する。キャッシュの大きさには制限が
あるので、古いエントリや利用されないエントリはガベージコレクト
される。 permanent (保存) マークがつけられたエントリは、
決してガベージコレクタによって消去されない。
ioctl を用いればキャッシュを直接操作することもできる。
また後述の
.I /proc
インタフェースによりキャッシュの振る舞いを調整できる。
.PP
存在しているマッピングに対して、
正のフィードバックが一定時間ない (後述の
.I /proc
インタフェースを見よ) と、
近傍キャッシュエントリ (neighbor cache entry) は
古くなった (stale) とみなされる。
正のフィードバックは高位のレイヤーからも取得できる
(例えば TCP ACK が成功した場合など)。
他のプロトコルは、
.BR sendmsg (2)
に
.B MSG_CONFIRM
フラグを用いることによって、
フォワードプログレス (forward progress) をシグナルできる。
フォワードプログレスがなければ、
ARP は再びプローブを試みる。
まずローカルな arp デーモンに問合わせを行い、
更新された MAC アドレスを取得しようとする。
このリクエストに
.B app_solicit
回失敗すると、古い MAC アドレスがわかっている場合は、
unicast のプローブが
.B ucaset_solicit
回送られる。これにも失敗すると、新しい ARP リクエスト
をネットワークにブロードキャストする。
リクエストは、データが送信キューになければ送られない。
.PP
Linux は、あるアドレスへのリクエストを受信・フォワードし、
受信したインターフェースで代理 arp が有効になっている場合には、
自動的にそのアドレスを non-permanent な代理 arp エントリに追加する。
そのターゲットに reject route があった場合には、
代理 arp エントリは一切追加されない。
.SS ioctl
すべての
.B AF_INET
ソケットでは、 3 つの ioctl が使用できる。
これらは
.I struct arpreq
へのポインタを引数に取る。

.in +4n
.nf
struct arpreq {
    struct sockaddr arp_pa;      /* protocol address */
    struct sockaddr arp_ha;      /* hardware address */
    int             arp_flags;   /* flags */
    struct sockaddr arp_netmask; /* netmask of protocol address */
    char            arp_dev[16];
};
.fi
.in

.BR SIOCSARP ", " SIOCDARP ", " SIOCGARP
は、それぞれ ARP マッピングを設定・削除・取得する。
ARP マップの設定と削除は特権が必要な操作であり、
.B CAP_NET_ADMIN
権限を持つプロセスか、実行ユーザー ID が 0 のプロセス
でなければ実行できない。
.PP
.I arp_pa
は
.B AF_INET
ソケットでなければならず、
.I arp_ha
は
.I arp_dev
で設定されたデバイスと同じタイプでなければならない。
.I arp_dev
はデバイスの名前を示す、ゼロで終端された文字列である。
.RS
.TS
tab(:) allbox;
c s
l l.
\fIarp_flags\fR
フラグ:意味
ATF_COM:参照完了
ATF_PERM:エントリを peramanent にする
ATF_PUBL:エントリを publish する
ATF_USETRAILERS:trailer が必要
ATF_NETMASK:netmask を用いる
ATF_DONTPUB:回答しない
.TE
.RE

.PP
.B ATF_NETMASK
フラグがセットされているときには、
.I arp_netmask
が有効でなければならない。
Linux 2.2 は代理ネットワーク ARP エントリをサポートしていないので、
これは 0xffffffff にセットしておくか、あるいは
現存の代理 arp エントリを削除したい場合には 0 にしておく必要がある。
.B ATF_USETRAILERS
は obsolete なので、用いるべきでない。
.SS /proc インタフェース
ARP では、グローバルなパラメータやインターフェースごとのパラメータを
.I /proc
インタフェースを通して設定することができる。
これらのインタフェースには、
.I proc/sys/net/ipv4/neigh/*/*
ファイルの読み書きによりアクセスできる。
システムにあるそれぞれのインターフェースには、
それぞれ対応するディレクトリが
.I /proc/sys/net/ipv4/neigh/
以下にある。
"default" ディレクトリに対して設定をすると、
それ以降生成されるデバイス全てに対してその設定が用いられる。
特に指定がなければ、時間に関る sysctl の単位は秒である。
.TP
.IR anycast_delay " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
IPv6 の近傍要請メッセージ (neighbor soliciation message)
に応答するまでの最大遅延時間 (jiffy 単位)。
anycast のサポートはまだ実装されていない。
デフォルトは 1 秒。
.TP
.IR app_solicit " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
ユーザー空間の ARP デーモンに netlink を用いて探索させる最大回数。
これを越えるとマルチキャストによる探索に移行する
.RI ( mcast_solicit
を見よ)。
.TP
.IR base_reachable_time " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
近傍のホストがみつかると、そのエントリは
.IR base_reachable_time "/2 から 3*" base_reachable_time /2
の間のランダムな値の時間、有効であるとみなされる。
エントリの有効性は、高位のプロトコルからポジティブなフィードバックを
受け取ると延長される。デフォルトは 30 秒。
このファイルは現在は非推奨であり、代わりに
.I base_reachable_time_ms
を使うこと。
.TP
.IR base_reachable_time_ms " (Linux 2.6.12 以降)"
.I base_reachable_time
と同じだが、時間をミリ秒単位で測る。
デフォルトは 30000 ミリ秒である。
.TP
.IR delay_first_probe_time " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
近傍ホストのエントリが古くなったと判断された後に
最初に探索を行うまでの遅延時間。デフォルトは 5 秒。
.TP
.IR gc_interval " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
ガベージ・コレクタを近傍ホストエントリに対して実行させる頻度。
デフォルトは 30 秒。
.TP
.IR gc_stale_time " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
古くなった近傍ホストエントリに対してチェックを行う頻度。
近傍ホストエントリが古くなったとみなされると、そのエントリに
データを送る前には再度解決が行われる。
デフォルトは 60 秒。
.TP
.IR gc_thresh1 " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
ARP キャッシュに保存するエントリ数の最小値。
この数より少ないエントリしかキャッシュになければ、
ガベージ・コレクタは実行されない。
デフォルトは 128。
.TP
.IR gc_thresh2 " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
ARP キャッシュに保存されるエントリ数のソフトな最大値。
キャッシュのエントリがこの数を 5 秒間越えつづけると、
ガベージ・コレクタが実行される。
デフォルトは 512。
.TP
.IR gc_thresh3 " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
ARP キャッシュに保存されるエントリ数のハードな最大値。
キャッシュのエントリがこの数を越えると、
ガベージ・コレクタはただちに実行される。
デフォルトは 1024。
.TP
.IR locktime " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
ARP エントリをキャッシュに保存する時間の最小値 (jiffy 単位)。
可能性のあるマッピングが一つ以上ある (たいていはネットワーク設定のミス)
場合に、 ARP キャッシュのスラッシングが起きることを防ぐ。
デフォルトは 1 秒。
.TP
.IR mcast_solicit " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
エントリを unreachable マークする前に、
アドレスをマルチキャスト/ブロードキャストで解決しようとする
試行回数の最大値。
デフォルトは 3。
.TP
.IR proxy_delay " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
既知の代理 ARP アドレスに対して ARP リクエストを受信した場合に、
応答前に最大
.I proxy_delay
jiffy まで遅延する。これは場合によって生じる
ネットワーク・フラッディング (network flooding) を避けるために用いる。
デフォルトは 0.8 秒。
.TP
.IR proxy_qlen " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
代理 ARP アドレスに対してキューイングできる最大のパケット数。
デフォルトは 64。
.TP
.IR retrans_time " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
リクエストを再度送るまでの遅延時間 (jiffy 単位)。
デフォルトは 1 秒。
このファイルは現在は非推奨であり、代わりに
.I retrans_time_ms
を使うこと。
.TP
.IR retrans_time_ms " (Linux 2.6.12 以降)"
リクエストを再度送るまでの遅延時間 (ミリ秒単位)。
デフォルトは 1000 ミリ秒。
.TP
.IR ucast_solicit " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
ARP デーモンへの問い合わせを行う前に行う unicast 探索の最大試行数
.RI ( app_solicit
を見よ)。デフォルトは 3。
.TP
.IR unres_qlen " (Linux 2.2 以降)"
.\" Precisely: 2.1.79
解決されていないアドレスに対して、
他のネットワーク層からキューイングできる最大パケット数。
デフォルトは 3。
.SH バージョン
Linux 2.0 で、
.I struct arpreq
に
.I arp_dev
メンバーが含まれるように変更があった。また同時に
ioctl 番号も変更された。古い ioctl は
Linux 2.2 で用いることができなくなった。

ネットワークに対する代理 arp エントリ (netmask が 0xffffffff でない)
は、 Linux 2.2 で用いることができなくなった。
これはカーネルによって設定される、別のインターフェースにおける
到達可能なすべてのホストに対する自動代理 arp によって置き換えられた
(そのインターフェースでフォワーディングと代理 arp が有効になっている場合)。

.I neigh/*
の各インタフェースは Linux 2.2 以前には存在しない。
.SH バグ
いくつかのタイマー設定は jiffy で指定されるが、
jiffy はアーキテクチャやカーネルのバージョンに依存する。
.BR time (7)
を参照のこと。
.PP
ユーザー空間からポジティブなフィードバックを送る方法が存在しない。
つまり接続指向 (connection-oriented) のプロトコルをユーザー空間で
実装すると、余計な ARP トラフィックの原因となる。
なぜなら ndisc は定期的に MAC アドレスを再探索するからである。
同様の問題はいくつかのカーネルプロトコル (NFS over UDP など) にも存在する。
.PP
この man ページでは IPv4 特有の機能と
IPv4・IPv6 で共有される機能とがごっちゃになっている。
.SH 関連項目
.BR capabilities (7),
.BR ip (7)
.PP
.BR RFC\ 826 :
ARP に関する説明
.br
.BR RFC\ 2461 :
IPv6 neighbor discovery に関する説明と、
利用されている基礎アルゴリズム
.LP
Linux 2.2 以降の IPv4 ARP は、
可能な場合は IPv6 のアルゴリズムを用いる。
