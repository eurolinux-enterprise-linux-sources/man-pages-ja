'\" t
.\" Don't remove the line above, it tells man that tbl is needed.
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" Based on the original comments from Alexey Kuznetsov, written with
.\" help from Matthew Wilcox.
.\" $Id: rtnetlink.7,v 1.10 2001/04/04 08:02:19 ysato Exp $
.\"
.\" Japanese Version Copyright (c) 1999 NAKANO Takeo all rights reserved.
.\" Translated Mon 6 Dec 1999 by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\"
.\"WORD         queueing dicipline      キューイング(の)ルール
.\"WORD         permanent               永続的な
.\"WORD         neighbor                近傍
.\"
.TH RTNETLINK  7 2008-08-08 "Linux" "Linux Programmer's Manual"
.SH 名前
rtnetlink, NETLINK_ROUTE \- Linux IPv4 ルーティングソケット
.SH 書式
.B #include <asm/types.h>
.br
.B #include <linux/netlink.h>
.br
.B #include <linux/rtnetlink.h>
.br
.B #include <sys/socket.h>
.sp
.BI "rtnetlink_socket = socket(AF_NETLINK, int " socket_type ", NETLINK_ROUTE);"
.SH 説明
.B rtnetlink
はカーネルのルーティングテーブルを読んだり変更したり
するためのものである。これはカーネルが内部のサブシステムと
通信するためにも用いられているが、それはここでは記述しない。
この man ページではユーザー空間のプログラムとの通信に関してのみ述べる。
ネットワーク経路・IP アドレス・リンクパラメータ・
近傍設定 (neighbor setup)・キューイングルール (queueing dicipline)・
トラフィッククラス・パケットのクラス分類などが、すべて
.B NETLINK_ROUTE
ソケットを通して制御できる。
.B rtnetlink
は netlink メッセージをベースにしている。詳細は
.BR netlink (7)
を見ること。
.\" FIXME ? all these macros could be moved to rtnetlink(3)
.SS ルーティング属性
rtnetlink メッセージには、初期ヘッダの後に付加的な属性を
持つものがある。

.in +4n
.nf
struct rtattr {
    unsigned short rta_len;    /* Length of option */
    unsigned short rta_type;   /* Type of option */
    /* Data follows */
};
.fi
.in

これらの属性の操作は、 RTA_* マクロか libnetlink を通してのみ
行うべきである。
.BR rtnetlink (3)
を見よ。
.SS メッセージ
rtnetlink は (標準的な netlink メッセージに加えて)
以下のメッセージタイプから構成される。
.TP
.BR RTM_NEWLINK ", " RTM_DELLINK ", " RTM_GETLINK
指定したネットワークインターフェースの情報を、生成・削除・取得する。
これらのメッセージは
.I ifinfomsg
構造体と、それに続いていくつかの
.I rtattr
構造体を伴う。

.nf
struct ifinfomsg {
    unsigned char  ifi_family; /* AF_UNSPEC */
    unsigned short ifi_type;   /* Device type */
    int            ifi_index;  /* Interface index */
    unsigned int   ifi_flags;  /* Device flags  */
    unsigned int   ifi_change; /* change mask */
};
.fi

.\" FIXME ifi_type
.I ifi_flags
はデバイスのフラグである。
.BR netdevice (7)
を見よ。
.I ifi_index
は他と重ならないインターフェースの index である。
.I ifi_change
は将来の利用のために予約されており、常に
0xFFFFFFFF にセットすべきである。
.TS
tab(:);
c
l l l.
ルーティング属性
rta_type:値の型:説明
_
IFLA_UNSPEC:-:指定されていない。
IFLA_ADDRESS:hardware address:T{
インターフェース L2 アドレス
T}
IFLA_BROADCAST:hardware address:T{
L2 ブロードキャストアドレス
T}
IFLA_IFNAME:asciiz string:デバイス名
IFLA_MTU:unsigned int:デバイスの MTU
IFLA_LINK:int:リンクタイプ
IFLA_QDISC:asciiz string:キューイングのルール
IFLA_STATS:T{
下記参照
T}:インターフェースの統計
.TE
.sp
IFLA_STATS の値の型は \fIstruct net_device_stats\fP である。
.TP
.BR RTM_NEWADDR ", " RTM_DELADDR ", " RTM_GETADDR
インターフェースの IP アドレスの情報を追加・削除・取得する。
Linux 2.2 では、一つのインターフェースに複数の IP アドレスを
保持させることができ、これは 2.0 の別名デバイスの概念を置き換える。
Linux 2.2 では、これらのメッセージは
IPv4 と IPv6 の両方のアドレスをサポートしている。
これらは
.I ifaddrmsg
構造体を伴う。そのあとに
.I rtaddr
ルーティング属性が続くこともある。

.nf
struct ifaddrmsg {
    unsigned char ifa_family;    /* Address type */
    unsigned char ifa_prefixlen; /* Prefixlength of address */
    unsigned char ifa_flags;     /* Address flags */
    unsigned char ifa_scope;     /* Address scope */
    int           ifa_index;     /* Interface index */
};
.fi

.I ifa_family
はアドレスファミリーのタイプである (現在は
.B AF_INET
または
.BR AF_INET6 )。
.I ifa_prefixlen
はアドレスのアドレスマスクの長さである (IPv4 のように、
そのファミリーで定義されている場合)。
.I ifa_scope
はアドレスのスコープである。
.I ifa_index
はアドレスが関連づけられているインターフェースの index である。
.I ifa_flags
はフラグワードで、
二つめのアドレス (古い別名インターフェース) の場合は
.B IFA_F_SECONDARY
に、永続的なアドレスの場合は
.B IFA_F_PERMANENT
に適用される。ユーザーによってセットされるフラグと、
undocumented なフラグがある。
.TS
tab(:);
c
l l l.
属性
rta_type:値の型:説明
_
IFA_UNSPEC:-:指定されていない
IFA_ADDRESS:raw protocol address:インターフェースアドレス
IFA_LOCAL:raw protocol address:ローカルアドレス
IFA_LABEL:asciiz string:インターフェースの名前
IFA_BROADCAST:raw protocol address:ブロードキャストアドレス
IFA_ANYCAST:raw protocol address:anycast アドレス
IFA_CACHEINFO:struct ifa_cacheinfo:アドレス情報
.TE
.\" FIXME struct ifa_cacheinfo
.TP
.BR RTM_NEWROUTE ", " RTM_DELROUTE ", " RTM_GETROUTE
ネットワーク経路の情報を生成・削除・取得する。
これらのメッセージは
.I rtmsg
構造体を伴う。そのあとにいくつかの
.I rtattr
構造体を続けることもできる。
.B RTM_GETROUTE
で
.I rtm_dst_len
と
.I rtm_src_len
に 0 をセットすると、
指定されたルーティングテーブルの全てのエントリを所得する。
.I rtm_table
と
.I rtm_protocol
以外の他のフィールドに 0 を入れると、ワイルドカードを意味する。

.nf
struct rtmsg {
    unsigned char rtm_family;   /* Address family of route */
    unsigned char rtm_dst_len;  /* Length of source */
    unsigned char rtm_src_len;  /* Length of destination */
    unsigned char rtm_tos;      /* TOS filter */

    unsigned char rtm_table;    /* Routing table ID */
    unsigned char rtm_protocol; /* Routing protocol; see below */
    unsigned char rtm_scope;    /* See below */
    unsigned char rtm_type;     /* See below */

    unsigned int  rtm_flags;
};
.fi
.TS
tab(:);
l l.
rtm_type:経路のタイプ
_
RTN_UNSPEC:未知の経路
RTN_UNICAST:ゲートウェイまたはダイレクトな経路
RTN_LOCAL:ローカルインターフェースの経路
RTN_BROADCAST:T{
ローカルなブロードキャスト経路
(ブロードキャストとして送信される)
T}
RTN_ANYCAST:T{
ローカルなブロードキャスト経路
(ユニキャストとして送信される)
T}
RTN_MULTICAST:マルチキャスト経路
RTN_BLACKHOLE:パケットを捨てる経路
RTN_UNREACHABLE:到達できない行き先
RTN_PROHIBIT:パケットを拒否する経路
RTN_THROW:経路探索を別のテーブルで継続
RTN_NAT:ネットワークアドレスの変換ルール
RTN_XRESOLVE:T{
外部レゾルバを参照 (実装されていない)
T}
.TE
.TS
tab(:);
l l.
rtm_protocol:経路の情報源
_
RTPROT_UNSPEC:不明
RTPROT_REDIRECT:T{
ICMP リダイレクトによる (現在は用いられない)
T}
RTPROT_KERNEL:カーネルによる
RTPROT_BOOT:ブート時
RTPROT_STATIC:管理者による
.TE

.B RTPROT_STATIC
よりも大きな値はカーネルによって解釈されない。これは
単なるユーザーへの情報である。これらは経路情報の情報源を
タグ付けしたり、複数のルーティングデーモンからの情報を
区別するために用いることができる。
既に割り当てられているルーティングデーモンの識別子については
.I <linux/rtnetlink.h>
を見よ。

.I rtm_scope
は行き先への距離である。

.TS
tab(:);
l l.
RT_SCOPE_UNIVERSE:グローバルな経路
RT_SCOPE_SITE:T{
ローカルな自律システムにおける内部経路
T}
RT_SCOPE_LINK:このリンク上の経路
RT_SCOPE_HOST:ローカルホスト上の経路
RT_SCOPE_NOWHERE:行き先が存在しない
.TE

ユーザーは
.B RT_SCOPE_UNIVERSE
と
.B RT_SCOPE_SITE
の間の値を用いることができる。

.I rtm_flags
は以下の意味を持つ:
.TS
tab(:);
l l.
RTM_F_NOTIFY:T{
経路が変更されると、 rtnetlink を通してユーザーに通知が行く。
T}
RTM_F_CLONED:経路は他の経路によって複製された。
RTM_F_EQUALIZE:マルチパスイコライザ (まだ実装されていない)
.TE

.I rtm_table
ではルーティングテーブルを指定する。
.TS
tab(:);
l l.
RT_TABLE_UNSPEC:指定されていないルーティングテーブル
RT_TABLE_DEFAULT:デフォルトのテーブル
RT_TABLE_MAIN:メインのテーブル
RT_TABLE_LOCAL:ローカルテーブル
.TE

ユーザーは
.B RT_TABLE_UNSPEC
と
.BR RT_TABLE_DEFAULT .
の間の任意の値を用いることができる。
.TS
tab(:);
c
l l l.
属性
rta_type:値の型:説明
_
RTA_UNSPEC:-:無視される
RTA_DST:protocol address:経路の行き先アドレス
RTA_SRC:protocol address:経路の発信元アドレス
RTA_IIF:int:入力インターフェースの index
RTA_OIF:int:出力インターフェースの index
RTA_GATEWAY:protocol address:経路のゲートウェイ
RTA_PRIORITY:int:経路の優先度
RTA_PREFSRC::
RTA_METRICS:int:経路のメトリック
RTA_MULTIPATH::
RTA_PROTOINFO::
RTA_FLOW::
RTA_CACHEINFO::
.TE

.B (これらの値を埋めること!)
.TP
.BR RTM_NEWNEIGH ", " RTM_DELNEIGH  ", " RTM_GETNEIGH
近傍テーブル (neighbor table) のエントリ
(例えば ARP エントリ) の情報を追加・削除・取得する。
このメッセージは
.I ndmsg
構造体を伴う。

.nf
struct ndmsg {
    unsigned char ndm_family;
    int           ndm_ifindex;  /* Interface index */
    __u16         ndm_state;    /* State */
    __u8          ndm_flags;    /* Flags */
    __u8          ndm_type;
};

struct nda_cacheinfo {
    __u32         ndm_confirmed;
    __u32         ndm_used;
    __u32         ndm_updated;
    __u32         ndm_refcnt;
};
.fi

.I ndm_state
は以下の状態のビットマスクである:
.TS
tab(:);
l l.
NUD_INCOMPLETE:現在レゾルブ中のキャッシュエントリ
NUD_REACHABLE:動作確認済みのキャッシュエントリ
NUD_STALE:期限切れのキャッシュエントリ
NUD_DELAY:タイマ待ちのキャッシュエントリ
NUD_PROBE:再確認中のキャッシュエントリ
NUD_FAILED:不正なキャッシュエントリ
NUD_NOARP:行き先キャッシュのないデバイス
NUD_PERMANENT:静的なエントリ
.TE

有効な
.I ndm_flags
は以下の通り:
.TS
tab(:);
l l.
NTF_PROXY:プロクシ arp エントリ
NTF_ROUTER:IPv6 ルータ
.TE

.\" FIXME
.\" document the members of the struct better
.I rtaddr
構造体は、
.I rta_type
フィールドに応じてそれぞれ以下の意味を持つ:
.TS
tab(:);
l l.
NDA_UNSPEC:未知のタイプ
NDA_DST:近傍キャッシュネットワーク層の行き先アドレス
NDA_LLADDR:近傍キャッシュリンク層のアドレス
NDA_CACHEINFO:キャッシュの統計
.TE

.I rta_type
フィールドが
.B NDA_CACHEINFO
の場合には、
.I struct nda_cacheinfo
ヘッダが続く。
.TP
.BR RTM_NEWRULE ", " RTM_DELRULE ", " RTM_GETRULE
ルーティングルールを追加・削除・取得する。
.I struct rtmsg
を伴う。
.TP
.BR RTM_NEWQDISC ", " RTM_DELQDISC ", " RTM_GETQDISC
キューイングルールを追加・削除・取得する。
このメッセージは
.I struct tcmsg
を伴い、またそのあとに属性がいくつか続くこともある。

.nf
struct tcmsg {
    unsigned char    tcm_family;
    int              tcm_ifindex;   /* interface index */
    __u32            tcm_handle;    /* Qdisc handle */
    __u32            tcm_parent;    /* Parent qdisc */
    __u32            tcm_info;
};
.fi
.TS
tab(:);
c
l l l.
属性
rta_type:値の型:説明
_
TCA_UNSPEC:-:指定されていない
TCA_KIND:asciiz string:キューイングルールの名前
TCA_OPTIONS:byte sequence:Qdisc 特有のオプションが続く
TCA_STATS:struct tc_stats:Qdisc の統計
TCA_XSTATS:qdisc specific:モジュール特有の統計
TCA_RATE:struct tc_estimator:レート制限
.TE

さらに、 qdisc モジュール特有の様々な属性を指定できる。
詳細な情報は適切なインクルードファイルを見よ。
.TP
.BR RTM_NEWTCLASS ", " RTM_DELTCLASS ", " RTM_GETTCLASS
トラフィッククラスを追加・削除・取得する。
これらのメッセージは、上述の
.I struct tcmsg
を伴う。
.TP
.BR RTM_NEWTFILTER ", " RTM_DELTFILTER ", " RTM_GETTFILTER
トラフィックフィルターの情報を追加・削除・取得する。
これらのメッセージは、上述の
.I struct tcmsg
を伴う。
.SH バージョン
.B rtnetlink
は Linux 2.2 の新機能である。
.SH バグ
この man ページは不完全である。
.SH 関連項目
.BR cmsg (3),
.BR rtnetlink (3),
.BR ip (7),
.BR netlink (7)
