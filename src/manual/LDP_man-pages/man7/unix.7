.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\"
.\" Modified, 2003-12-02, Michael Kerrisk, <mtk.manpages@gmail.com>
.\" Modified, 2003-09-23, Adam Langley
.\" Modified, 2004-05-27, Michael Kerrisk, <mtk.manpages@gmail.com>
.\"	Added SOCK_SEQPACKET
.\" 2008-05-27, mtk, Provide a clear description of the three types of
.\"     address that can appear in the sockaddr_un structure: pathname,
.\"     unnamed, and abstract.
.\"
.\" Japanese Version Copyright (c) 1999 Shouichi Saito and
.\"     NAKANO Takeo all rights reserved.
.\" Translated 1999-12-06, NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\"     based on the work by Shouichi Saito <ss236rx@ymg.urban.ne.jp>
.\" Updated 2003-01-07, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-02-21, Akihiro MOTOKI
.\" Updated 2005-12-26, Akihiro MOTOKI
.\" Updated 2008-08-08, Akihiro MOTOKI, LDP v3.05
.\"
.\"WORD		abstract namespace		抽象名前空間
.\"WORD         anonymous socket		名前無しソケット
.\"WORD		credential			信任状
.\"WORD		ancillary message		補助メッセージ
.\"WORD		file descriptor			ファイルディスクリプタ
.\"
.\" 訳注: 訳す際も Unix は capitalize しておくこと。
.\"       LDP_man-pages 1.66→2.01 において unix → Unix の変更があり、
.\"       意図的な表記と思われる。
.\"
.TH UNIX  7 2008-12-01 "Linux" "Linux Programmer's Manual"
.SH 名前
unix, AF_UNIX, AF_LOCAL \- ローカルな
プロセス間通信用のソケット
.SH 書式
.B #include <sys/socket.h>
.br
.B #include <sys/un.h>

.IB unix_socket " = socket(AF_UNIX, type, 0);"
.br
.IB error " = socketpair(AF_UNIX, type, 0, int *" sv ");"
.SH 説明
.B AF_UNIX
.RB ( AF_LOCAL
とも言われる) ソケットファミリーは、同じマシン上でプロセス同士が
効率的に通信するために用いられる。 
伝統的に、Unix ソケットは、名前なしにもできるし、
(ソケット型であると印のついた) ファイルシステムのパス名に
結び付けることもできる。
さらに Linux では、ファイルシステムに依存しない
抽象名前空間 (abstract namespace) もサポートしている。

.\" MOTOKI: 見やすいように .TP 形式に変更
有効なタイプは以下の通りである:
.TP
.B SOCK_STREAM
ストリーム指向のソケット
.TP
.B SOCK_DGRAM
メッセージ境界を保存するデータグラム指向のソケット
(ほとんどの Unix の実装では、Unix ドメイン・データグラム・ソケットは
常に信頼でき、データグラムの並び替えは行わない)
.TP
.B SOCK_SEQPACKET
(Linux 2.6.4 以降で利用できる)
メッセージ境界を保存し、送信された順序でメッセージを届ける接続指向ソケット

Unix ソケットでは、補助データを使って
ファイルディスクリプタやプロセスの信任状 (credential) を
送受信することもできる。
.SS アドレスのフォーマット
Unix ドメインソケットのアドレスは以下の構造体で表現される。
.in +4n
.nf

#define UNIX_PATH_MAX    108

struct sockaddr_un {
    sa_family_t sun_family;               /* AF_UNIX */
    char        sun_path[UNIX_PATH_MAX];  /* pathname */
};
.fi
.in
.PP
.I sun_family
には必ず
.B AF_UNIX
が入っている。

この構造体では 3 種類のアドレスが区別される。
.IP * 3
.IR "pathname (パス名)" :
.BR bind (2)
を使って、Unix ドメインソケットを NULL 終端されたファイルシステム上の
パス名に結び付けることができる。
.BR getsockname (2),
.BR getpeername (2),
.BR accept (2)
がソケットのアドレスを返す際には、
その長さは
.I "sizeof(sa_family_t) + strlen(sun_path) + 1"
であり、
.I sun_path
に NULL 終端されたパス名が格納される。
.IP *
.IR "unnamed (名前なし)" :
.BR bind (2)
を使ってパス名に結び付けることができないストリーム型のソケットは
名前を持たない。同様に、
.BR socketpair (2)
で作成される 2 つのソケットも名前を持たない。
.BR getsockname (2),
.BR getpeername (2),
.BR accept (2)
が名前なしのソケットのアドレスを返す際には、
その長さは
.I "sizeof(sa_family_t)"
であり、
.I sun_path
は検査すべきではない。
.\" 実装ごとにかなりの違いが存在する。
.\" FreeBSD では長さは 16 バイトとなり、HP-UX では長さは 0 バイトとなる。
.IP *
.IR "abstract (抽象)" :
抽象ソケットアドレスは、
.I sun_path[0]
がヌルバイト ('\\0') であることから区別できる。
.I sun_path
の残りの全バイトによりソケットの「名前」が定義される
(名前中のヌルバイトには特別な意味はない)。
この名前はファイルシステムのパス名とは何の関係もない。
この名前空間におけるソケットのアドレスは、
.I sun_path
の残りのバイトで表される。
.BR getsockname (2),
.BR getpeername (2),
.BR accept (2)
が抽象ソケットのアドレスを返す際には、その長さは
.I "sizeof(struct sockaddr_un)"
であり、
.I sun_path
に抽象名前空間の名前が格納される。
ソケットの抽象名前空間は Linux による拡張であり、移植性はない。
.SS ソケットオプション
歴史的な理由により、これらのオプションは
たとえ
.B AF_UNIX
固有のオプションであっても
.B SOL_SOCKET
型で指定する。
ソケットファミリーとして
.B SOL_SOCKET
を指定すると、
.BR setsockopt (2)
でオプションが設定でき、
.BR getsockopt (2)
で取得ができる。
.\" NAKANO added this TP
.TP
.B SO_PASSCRED
送信プロセスの補助メッセージとして信任状を受信できるようにする。
このオプションがセットされていて、まだソケットが接続されていないと、
抽象名前空間に他と重ならない名前が自動的に生成される。
ブール整数値のフラグを取る。
.SS ソケット API
この節では、Linux の Unix ドメイン・ソケットでの、
ドメイン固有の詳細仕様とソケット API でサポートされていない機能に
ついて説明する。

Unix ドメイン・ソケットでは、帯域外データ (out-of-band data) の
送信
.RB ( send (2)
と
.BR recv (2)
の
.B MSG_OOB
フラグ) はサポートされていない。

.BR send (2)
.B MSG_MORE
フラグは Unix ドメイン・ソケットではサポートされていない。

.BR recv (2)
の
.I flags
引き数での
.B MSG_TRUNC
の使用は Unix ドメイン・ソケットではサポートされていない。

.B SO_SNDBUF
ソケットオプションは Unix ドメイン・ソケットで効果を持つが、
.B SO_RCVBUF
は効果がない。
データグラム・ソケットでは、
.B SO_SNDBUF
の値が出力データグラムの上限サイズとなる。
実際の上限値は、
.B SO_SNDBUF
オプションとして設定された値の 2倍
.RB ( socket (7)
参照) からオーバヘッドとして使用される 32 バイトを引いた値となる。
.SS 補助メッセージ
補助データを送受するには、
.BR sendmsg (2)
や
.BR recvmsg (2)
を使用する。
歴史的な理由により、以下に示す補助メッセージの型は
たとえ
.B AF_UNIX
固有のものであっても
.B SOL_SOCKET
型で指定する。
これらを送るには、構造体
.I cmsghdr
の
.I cmsg_level
フィールドに
.B SOL_SOCKET
をセットし、
.I cmsg_type
フィールドにタイプをセットする。
詳細は
.BR cmsg (3)
を見よ。
.TP
.B SCM_RIGHTS
他のプロセスでオープンされたファイルディスクリプタのセットを送受信する。
データ部分にファイルディスクリプタの整数配列が入っている。
渡されたファイルディスクリプタは、あたかも
.BR dup (2)
で生成されたかのように振る舞う。
.TP
.B SCM_CREDENTIALS
Unix 信任状を送受信する。これは認証に用いることができる。
信任状は、
.I struct ucred
の補助メッセージとして渡される。
この構造体は
.I <sys/socket.h>
で以下のように定義されている。

.in +4n
.nf
struct ucred {
    pid_t pid;    /* process ID of the sending process */
    uid_t uid;    /* user ID of the sending process */
    gid_t gid;    /* group ID of the sending process */
};
.fi
.in

glibc 2.8 以降では、この構造体の定義を得るためには機能検査マクロ
.B _GNU_SOURCE
を定義しなければならない。

送信側が指定した信任状は、カーネルがチェックする。
実効ユーザー ID が 0 のプロセスには、
自分自身以外の値を指定する事が許される。
送信側は以下の 3 つを指定しなければならない。
1) 自分自身のプロセス ID
.RB ( CAP_SYS_ADMIN
権限を持っていない場合)、
2) 自分自身のユーザー ID あるいは実効ユーザー ID か保存 set-user-ID
.RB ( CAP_SETUID
権限を持っていない場合)、
3) 自分自身のグループ ID あるいは実行グループ ID か保存 set-group-ID
.RB ( CAP_SETGID
を持っていない場合)。
.I struct ucred
メッセージを受信するためには、ソケットに対し
.B SO_PASSCRED
オプションを有効にしなくてはならない。
.SH エラー
.TP
.B EADDRINUSE
選択したソケットが既に用いられていた。または、
ファイルシステムのソケットオブジェクトが既に存在していた。
.TP
.B ECONNREFUSED
listen 状態にないソケットオブジェクトに対して
.BR connect (2)
が呼ばれた。リモートソケットが存在していなかった、
ファイル名がソケットではなかった、などのときに起こる。
.TP
.B ECONNRESET
リモートソケットが予期しないかたちでクローズされた。
.TP
.B EFAULT
ユーザーメモリアドレスが不正。
.TP
.B EINVAL
渡した引数が不正。よくある原因は、
渡したアドレスの
.I sun_type
フィールドに AF_UNIX を設定しなかった、
行おうとした操作に対してソケットの状態が有効ではなかった、など。
.TP
.B EISCONN
既に接続されているソケットに対して
.BR connect (2)
が呼ばれた。または、指定したターゲットアドレスが
既に接続済みのソケットだった。
.TP
.B ENOMEM
メモリが足りない。
.TP
.B ENOTCONN
ソケット操作にターゲットアドレスが必要だが、
このソケットは接続されていない。
.TP
.B EOPNOTSUPP
ストリーム指向でないソケットに対してストリーム操作が呼び出された。
または帯域外データオプションを用いようとした。
.TP
.B EPERM
送信者が
.I struct ucred
に不正な信任状を渡した。
.TP
.B EPIPE
リモートソケットがストリームソケット上でクローズされた。
可能な場合は
.B SIGPIPE
も同時に送られる。これを避けるには
.B MSG_NOSIGNAL
フラグを
.BR sendmsg (2)
や
.BR recvmsg (2)
に渡す。
.TP
.B EPROTONOSUPPORT
渡されたプロトコルが AF_UNIX でない。
.TP
.B EPROTOTYPE
リモートソケットとローカルソケットのタイプが一致していなかった
.RB ( SOCK_DGRAM
と
.BR SOCK_STREAM )。
.TP
.B ESOCKTNOSUPPORT
未知のソケットタイプ。
.PP
他にも汎用のソケット層でエラーが起こったり、
ファイルシステム上にソケットオブジェクトを作ろうとした場合に
ファイルシステムのエラーが起こることがある。
それぞれの詳細は適切な man ページを参照すること。
.SH バージョン
.B SCM_CREDENTIALS
と抽象名前空間は、Linux 2.2 で導入された。
移植性が必要なプログラムでは使うべきではない。
(BSD 由来のシステムの中にも信任状の送受信をサポートしているものがあるが、
その実装の詳細はシステムによって異なる)
.SH 注意
Linux の実装では、ファイルシステム上から見えるソケットは、
それらが置かれているディレクトリのパーミッションに従う。
ソケットの所有者、グループ、パーミッションは変更できる。
新しいソケットを作るとき、作ろうとするディレクトリに対して
プロセスが書き込みと検索 (実行) 権限を持っていなければ、作成に失敗する。
ソケットオブジェクトに接続するには、 read/write 権限が必要である。
この動作は、多くの BSD 由来のシステムとは異なっている
(BSD では Unix ソケットに対してはパーミッションを無視する)。
移植性の必要なプログラムでは、
セキュリティをこの仕様に依存してはならない。

ファイル名を指定してソケットにバインドすると、
ファイルシステムにソケットが生成される。
これは必要なくなったときに呼びだしたユーザーが削除しなければならない
.RB ( unlink (2)
を用いる)。
Unix で通常使われる「背後で閉じる方式」が適用される。
ソケットはいつでも unlink することができ、最後の参照が
クローズされたときにファイルシステムから削除される。

.B SOCK_STREAM
上でファイルディスクリプタや信任状を渡すためには、同じ
.BR sendmsg (2)
や
.BR recvmsg (2)
コールで補助データ以外のデータを少なくとも
1 バイト送信/受信する必要がある。

Unix ドメインのストリーム・ソケットでは、
帯域外データの概念はサポートされない。
.SH 例
.BR bind (2)
参照。
.SH 関連項目
.BR recvmsg (2),
.BR sendmsg (2),
.BR socket (2),
.BR socketpair (2),
.BR cmsg (3),
.BR capabilities (7),
.BR credentials (7),
.BR socket (7)
