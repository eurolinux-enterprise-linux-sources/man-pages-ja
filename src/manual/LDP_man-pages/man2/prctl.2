.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) 1998 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright (C) 2002 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright Guillem Jover <guillem@hadrons.org>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Thu Nov 11 04:19:42 MET 1999, aeb: added PR_GET_PDEATHSIG
.\" Modified 27 Jun 02, Michael Kerrisk
.\" 	Added PR_SET_DUMPABLE, PR_GET_DUMPABLE,
.\"	PR_SET_KEEPCAPS, PR_GET_KEEPCAPS
.\" Modified 2006-08-30 Guillem Jover <guillem@hadrons.org>
.\"	Updated Linux versions where the options where introduced.
.\"	Added PR_SET_TIMING, PR_GET_TIMING, PR_SET_NAME, PR_GET_NAME,
.\"	PR_SET_UNALIGN, PR_GET_UNALIGN, PR_SET_FPEMU, PR_GET_FPEMU,
.\"	PR_SET_FPEXC, PR_GET_FPEXC
.\" 2008-04-29 Serge Hallyn, Document PR_CAPBSET_READ and PR_CAPBSET_DROP
.\" 2008-06-13 Erik Bosman, <ejbosman@cs.vu.nl>
.\"     Document PR_GET_TSC and PR_SET_TSC.
.\" 2008-06-15 mtk, Document PR_SET_SECCOMP, PR_GET_SECCOMP
.\"
.\" Japanese Version Copyright (c) 1998-1999 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1999-04-03, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated 2002-12-20, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2005-09-06, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-10-07, Akihiro MOTOKI
.\" Updated 2007-01-08, Akihiro MOTOKI, LDP v2.43
.\" Updated 2007-10-12, Akihiro MOTOKI, LDP v2.66
.\" Updated 2008-08-12, Akihiro MOTOKI, LDP v3.05
.\"
.\"WORD:	capability	ケーパビリティ
.\"WORD:	keep capabilities	ケーパビリティ保持
.\"
.TH PRCTL 2 2008-07-16 "Linux" "Linux Programmer's Manual"
.SH 名前
prctl \- プロセスの操作を行なう
.SH 書式
.nf
.B #include <sys/prctl.h>
.sp
.BI "int prctl(int " option ", unsigned long " arg2 ", unsigned long " arg3 ,
.BI "          unsigned long " arg4 ", unsigned long " arg5 );
.fi
.SH 説明
.BR prctl ()
の動作は最初の引き数によって決定される (この値は
\fI<linux/prctl.h>\fP に定義されている)。
残りの引き数は最初の引き数によって変化する。
一番目の引き数として以下のものを指定できる:
.TP
.BR PR_CAPBSET_READ " (Linux 2.6.25 以降)"
で指定されたケーパビリティが呼び出したスレッドのケーパビリティ
バインディングセット (capability bounding set) に含まれている場合、
(関数の返り値として) 1 を返し、そうでない場合 0 を返す
(ケーパビリティ定数は
.I <linux/capability.h>
で定義されている)。
ケーパビリティバウンディングセットは、
.BR execve (2)
を呼び出した際に、ファイルの許可 (permitted) ケーパビリティの中で
そのプロセスが獲得できるケーパビリティを指示するものである。

.I arg2
に指定されたケーパビリティが有効でない場合、
呼び出しはエラー
.B EINVAL
で失敗する。
.TP
.BR PR_CAPBSET_DROP " (Linux 2.6.25 以降)"
呼び出したスレッドがケーパビリティ
.B CAP_SETPCAP
を持っている場合、
呼び出したスレッドのケーパビリティバウンディングセットから
.I arg2
で指定されたケーパビリティを外す。
呼び出したスレッドの子プロセスは変更後のバウンディングセットを
継承する。

呼び出したスレッドが
.B CAP_SETPCAP
を持っていない場合、呼び出しはエラー
.B EPERM
で失敗する。
.I arg2
に指定されたケーパビリティが有効でない場合、
.B EINVAL
で失敗する。
ファイルケーパビリティがカーネルで有効になっていない場合
(この場合にはバウンディングセットがサポートされない)、
.B EINVAL
で失敗する。
.TP
.BR PR_SET_DUMPABLE " (Linux 2.3.20 以降)"
(Linux 2.3.20 以降)
デフォルトの振る舞いではコアダンプを引き起こすようなシグナルを受信したときに、
コアダンプするかどうかを決定するフラグを設定する
(通常このフラグは、デフォルトではセットされているが、
set-user-ID あるいは set-group-ID プログラムが実行されたり、
さまざまなシステムコールによってプロセスの UID や GID が操作されたときに
クリアされる)。
2.6.12 以前のカーネルでは、
.I arg2
は 0 (プロセスはダンプ不可) あるいは 1 (プロセスはダンプ可能) の
どちらかでなければならない。
2.6.13 から 2.6.17 までのカーネルでは、値 2 も認められていた。
この値を指定すると、通常はダンプされないバイナリが root だけが
読み込み可能な形でダンプされた。
セキュリティ上の理由から、この機能は削除された
.\" See http://marc.theaimsgroup.com/?l=linux-kernel&m=115270289030630&w=2
.\" Subject:    Fix prctl privilege escalation (CVE-2006-2451)
.\" From:       Marcel Holtmann <marcel () holtmann ! org>
.\" Date:       2006-07-12 11:12:00
.RB ( proc (5)
の
.I /proc/sys/fs/suid_dumpable
の説明も参照)。
.TP
.BR PR_GET_DUMPABLE " (Linux 2.3.20 以降)"
(Linux 2.3.20 以降)
呼び出し元プロセスにおけるダンプ可能フラグの
現在の状態を (関数の返り値として) 返す。
.\" [要修正] Linux 2.6.13 以降では、ダンプ可能フラグは値 2 をとることが
.\" できるが、2.6.13 では PR_GET_DUMPABLE はダンプ可能フラグが 0 以外の
.\" 値の場合 1 を返すだけである。これは 2.6.14 で修正された。
.TP
.BR PR_SET_ENDIAN " (Linux 2.6.18 以降、PowerPC のみ)"
呼び出し元プロセスのエンディアン設定 (endian-ness) を
\fIarg2\fP で指定された値に設定する。
指定できる値は
.\" それぞれ 0, 1, 2
.BR PR_ENDIAN_BIG ,
.BR PR_ENDIAN_LITTLE ,
.B PR_ENDIAN_PPC_LITTLE
(PowerPC 擬似リトルエンディアン)
のいずれか一つである。
.TP
.BR PR_GET_ENDIAN " (Linux 2.6.18 以降、PowerPC のみ)"
呼び出し元プロセスのエンディアン設定 (endian-ness) を
.I "(int\ *) arg2"
が指す場所に格納して返す。
.TP
.BR PR_SET_FPEMU " (Linux 2.4.18 以降, 2.5.9, ia64 のみ)"
浮動小数点エミュレーション (floating-point emulation) 制御ビットを
\fIarg2\fP で指定された値に設定する。
指定できる値は \fBPR_FPEMU_NOPRINT\fP (浮動小数点命令アクセスを黙って
エミュレートする) か \fBPR_FPEMU_SIGFPE\fP (浮動小数点命令をエミュレートせず、
代わりに
.B SIGFPE
を送る) である。
.TP
.BR PR_GET_FPEMU " (Linux 2.4.18 以降, 2.5.9, ia64 のみ)"
浮動小数点エミュレーション制御ビットの値を
.I "(int\ *) arg2"
が指す場所に格納して返す。
.TP
.BR PR_SET_FPEXC " (Linux 2.4.21 および 2.5.32 以降、PowerPC のみ)"
浮動小数点例外モード (floating-point exception mode) を
\fIarg2\fP で指定された値に設定する。
指定できるのは以下の値である:
\fBPR_FP_EXC_SW_ENABLE\fP (FPEXC で浮動小数点例外を有効にする)、
\fBPR_FP_EXC_DIV\fP (0 除算)、
\fBPR_FP_EXC_OVF\fP (オーバーフロー)、
\fBPR_FP_EXC_UND\fP (アンダーフロー)、
\fBPR_FP_EXC_RES\fP (不正確な結果 (inexact result))、
\fBPR_FP_EXC_INV\fP (不正な命令 (invalid operation))、
\fBPR_FP_EXC_DISABLED\fP (浮動小数点例外を無効にする)、
\fBPR_FP_EXC_NONRECOV\fP (async non-recoverable exception mode)、
\fBPR_FP_EXC_ASYNC\fP (async recoverable exception mode)、
\fBPR_FP_EXC_PRECISE\fP (precise exception mode)。
.TP
.BR PR_GET_FPEXC "(Linux 2.4.21 および 2.5.32 以降、PowerPC のみ)"
浮動小数点例外モードの値を
.I "(int\ *) arg2"
が指す場所に格納して返す。
.TP
.BR PR_SET_KEEPCAPS " (Linux 2.2.18 以降)"
スレッドの「ケーパビリティ保持」フラグを設定する。
このフラグは、スレッドの実 UID、実効 UID、保存 set-user-ID のうち少なくとも
一つが 0 であった状態から、これら全てが 0 以外に変更されたとき、
スレッドの実効/許可のケーパビリティ集合がクリアされるかどうかを決定する
(デフォルトでは、これらのケーパビリティ集合はクリアされる)。
.I arg2
は 0 (ケーパビリティをクリアする) あるいは 1 (ケーパビリティを保持する) の
どちらかでなければならない。
.BR execve (2)
が呼び出されると、この値は 0 にリセットされる。
.TP
.BR PR_GET_KEEPCAPS " (Linux 2.2.18 以降)"
呼び出し元スレッドにおける「ケーパビリティ保持」フラグの
現在の状態を (関数の返り値として) 返す。
.TP
.BR PR_SET_NAME " (Linux 2.6.9 以降)"
呼び出し元プロセスのプロセス名を
.I "(char\ *) arg2"
が指す場所に格納された値を使って設定する。
名前は最大で 16 バイトであり、
.\" TASK_COMM_LEN in include/linux/sched.h
それより少ないバイト数の場合は NULL で終端すべきである。
.TP
.BR PR_GET_NAME " (Linux 2.6.11 以降)"
呼び出し元プロセスのプロセス名を
.I "(char\ *) arg2"
が指す場所に格納して返す。
バッファは最大で 16 バイトを格納できるようにすべきである。
返される文字列は、長さが 16 バイトより短い場合は NULL 終端される。
.TP
.BR PR_SET_PDEATHSIG " (Linux 2.1.57 以降)"
親プロセス死亡シグナル (parent process death signal) を \fIarg2\fP に設定する
(設定できるシグナル値の範囲は 1..maxsig であり、0 は通知の解除である)。
呼び出し元プロセスの親プロセスが死んだ際に、ここで設定した値が
シグナルとして通知される。この値は
.BR fork (2)
の子プロセスでは解除される。
.TP
.BR PR_GET_PDEATHSIG " (Linux 2.3.15 以降)"
親プロセス死亡シグナルの現在の値を
.I "(int\ *) arg2"
が指す場所に格納して返す。
.TP
.BR PR_SET_SECCOMP " (Linux 2.6.23 以降)"
.\" See http://thread.gmane.org/gmane.linux.kernel/542632
.\" [PATCH 0 of 2] seccomp updates
.\" andrea@cpushare.com
呼び出したスレッドの secure computing モードを設定する。
現在の実装では、
.I arg2
は 1 にしなければならない。
secure computing モードを 1 に設定すると、
そのスレッドが呼び出しを許可されるシステムコールは
.BR read (2),
.BR write (2),
.BR _exit (2),
.BR sigreturn (2)
だけになる。
それ以外のシステムコールを呼び出すと、シグナル
.B SIGKILL
が配送される。
パイプやソケットから読み込んだ、信頼できないバイトコードを実行する
必要がある大量の演算を行うアプリケーションにおいて、
secure computing モードは役立つ。
この操作は利用できるのは、カーネルが CONFIG_SECCOMP を有効にして
作成されている場合だけである。
.TP
.BR PR_GET_SECCOMP " (Linux 2.6.23 以降)"
呼び出したスレッドの secure computing モードを返す。
現在の実装 (モードは 1 固定) はあまり役に立たないが、
将来他のモードが実装されると役立つようになるかもしれない。
呼び出したスレッドが secure computing モードでなかった場合、
この操作は 0 を返す。
呼び出したスレッドが secure computing モードの場合、
.BR prctl ()
を呼び出すとシグナル
.B SIGKILL
がそのプロセスに送信される。
この操作が利用できるのは、カーネルが CONFIG_SECCOMP を有効にして
作成されている場合だけである。
.TP
.BR PR_SET_SECUREBITS " (Linux 2.6.26 以降)"
呼び出したスレッドの "securebits" フラグを
.I arg2
で渡された値に設定する。
.BR capabilities (7)
参照。
.TP
.BR PR_GET_SECUREBITS " (Linux 2.6.26 以降)"
呼び出したスレッドの "securebits" フラグを
(関数の返り値として) 返す。
.BR capabilities (7)
参照。
.TP
.BR PR_SET_TIMING " (Linux 2.6.0-test4 以降)"
(通常の、伝統的に使われてきた) 統計的なプロセスタイミングを使用するか、
正確なタイムスタンプに基づくプロセスタイミングを使用するかを設定する。
\fIarg2\fP に指定できる値は
.B PR_TIMING_STATISTICAL
.\" 0
か
.B PR_TIMING_TIMESTAMP
.\" 1
である。
.B PR_TIMING_TIMESTAMP
は現在のところ実装されていない
(このモードに設定しようとするとエラー
.B EINVAL
が起こることだろう)。
.\" 2.6.26-rc8 では PR_TIMING_TIMESTAMP は何もしない。
.\" パッチの履歴を見たが、過去にも何かをしたこともない。
.TP
.BR PR_GET_TIMING " (Linux 2.6.0-test4 以降)"
現在使用中のプロセスタイミングを決める方法を返す。
.TP
.BR PR_SET_TSC " (Linux 2.6.26 以降, x86 のみ)"
そのプロセスがタイムスタンプ・カウンタを読み出せるかを決定する
フラグの状態を設定する。
読み出しを許可する場合は
.I arg2
に
.B PR_TSC_ENABLE
を、そのプロセスがタイムスタンプ・カウンタを読み出そうとした際に
.B SIGSEGV
を発生させる場合には
.B PR_TSC_SIGSEGV
を渡す。
.TP
.BR PR_GET_TSC " (Linux 2.6.26 以降, x86 のみ)"
そのプロセスがタイムスタンプ・カウンタを読み出せるかを決定する
フラグの状態を
.I "(int\ *) arg2"
が指す場所に格納して返す。
.TP
.B PR_SET_UNALIGN
(ia64 では Linux 2.3.48 以降;
parisc では Linux 2.6.15 以降;
PowerPC では Linux 2.6.18 以降;
Alpha では　Linux 2.6.22 以降;
これらのアーキテクチャのみ)
unaligned アクセス制御ビットを \fIarg2\fP で指定された値に設定する。
指定できる値は \fBPR_UNALIGN_NOPRINT\fP (unaligned なユーザアクセスを黙って
修正する) か \fBPR_UNALIGN_SIGBUS\fP (unaligned なユーザアクセスがあった場合
.B SIGBUS
を生成する) である。
.TP
.B PR_GET_UNALIGN
(バージョンとアーキテクチャの情報は
.B PR_SET_UNALIGN
参照)
unaligned アクセス制御ビットの値を
.I "(int\ *) arg2"
が指す場所に格納して返す。
.SH 返り値
成功すると、
.BR PR_GET_DUMPABLE ,
.BR PR_GET_KEEPCAPS ,
.BR PR_CAPBSET_READ ,
.BR PR_GET_TIMING ,
.BR PR_GET_SECUREBITS ,
.BR PR_GET_SECCOMP
は上述の負でない値を返す
.RB ( PR_GET_SECCOMP
は返らない場合もある)。
.I option
が他の値の場合は成功時に 0 を返す。
エラーの場合、\-1 を返し、
.I errno
に適切な値を設定する。
.SH エラー
.TP
.B EFAULT
.I arg2
が不正なアドレスである。
.TP
.B EINVAL
.I option
の値が理解できない。
.TP
.B EINVAL
.I arg2
が指定された
.I option
で有効な値ではない。
.TP
.B EINVAL
.I option
が
.BR PR_SET_SECCOMP
か
.BR PR_GET_SECCOMP
だが、カーネルが
.B CONFIG_SECCOMP
を有効にして作成されていなかった。
.TP
.B EPERM
.I option
が
.B PR_SET_SECUREBITS
で、呼び出し元がケーパビリティ
.B CAP_SETPCAP
を持っていない。
または、"locked" フラグを解除しようとした。
または、locked フラグがセットされているフラグをセットしようとした
.RB ( capabilities (7)
参照)。
.TP
.B EPERM
.I option
が
.B PR_SET_KEEPCAPS
で、呼び出し元のフラグ
.B SECURE_KEEP_CAPS_LOCKED
がセットされている
.RB ( capabilities (7)
参照)。
.TP
.B EPERM
.I option
が
.B PR_CAPBSET_DROP
で、呼び出し元がケーパビリティ
.B CAP_SETPCAP
を持っていない。
.\" The following can't actually happen, because prctl() in
.\" seccomp mode will cause SIGKILL.
.\" .TP
.\" .B EPERM
.\" .I option
.\" is
.\" .BR PR_SET_SECCOMP ,
.\" and secure computing mode is already 1.
.SH バージョン
.BR prctl ()
システムコールは Linux 2.1.57 で導入された。
.\" ライブラリ・インタフェースは glibc 2.0.6 で追加された。
.SH 準拠
このコールは Linux 特有である。
IRIX には
.BR prctl ()
システム・コールがあるが (MIPS アーキテクチャにおいて
irix_prctl として Linux 2.1.44 で同様に導入された)、
そのプロトタイプは
.sp
.BI "ptrdiff_t prctl(int " option ", int " arg2 ", int " arg3 );
.sp
である。ユーザー当りのプロセス最大数を取得するオプション、
プロセスの使用できる最大プロッサー数を取得するオプション、
現在特定のプロセスが停止(block)させられているかどうか調べるオプション、
スタックサイズの最大値の取得や設定を行なうオプションなどがある。
.SH 関連項目
.BR signal (2),
.BR core (5)
