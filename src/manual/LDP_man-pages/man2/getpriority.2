.\" Copyright (c) 1980, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)getpriority.2	6.9 (Berkeley) 3/10/91
.\"
.\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-07-01 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 1996-11-06 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-10-21 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"    Corrected statement under EPERM to clarify privileges required
.\" Modified 2002-06-21 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"    Clarified meaning of 0 value for 'who' argument
.\" Modified 2004-05-27 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" FIXME Oct 2008: Denys Vlasenko is working on a PRIO_THREAD feature that
.\" is likely to get included in mainline; this will need to be documented.
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1997-02-22, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified 2001-08-17, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified 2001-10-18, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2001-12-13, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2002-10-16, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2005-02-24, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-10-07, Akihiro MOTOKI
.\" Updated 2008-08-04, Akihiro MOTOKI, LDP v3.05
.\"
.\"WORD:	scheduling		スケジューリング
.\"WORD:	piority			優先度
.\"WORD:	call			コール
.\"WORD:	user-ID			UID
.\"WORD:	process			プロセス
.\"WORD:	user			ユーザー
.\"WORD:	super user		スーパー・ユーザー
.\"WORD:	effective user-ID	実効UID
.\"WORD:	real user-ID		実UID
.\"
.TH GETPRIORITY 2 2008-05-29 "Linux" "Linux Programmer's Manual"
.SH 名前
getpriority, setpriority \- プログラムのスケジューリングの優先度を取得/設定する
.SH 書式
.B #include <sys/time.h>
.br
.B #include <sys/resource.h>
.sp
.BI "int getpriority(int " which ", int " who );
.br
.BI "int setpriority(int " which ", int " who ", int " prio );
.SH 説明
システムコール
.BR getpriority ()
や
.BR setpriority ()
は、
.I which
と
.I who
で指定されたプロセス、プロセス・グループ、ユーザーの
スケジューリング優先度 (scheduling priority) の
取得や設定をそれぞれ行う。

.I which
の値は
.BR PRIO_PROCESS ,
.BR PRIO_PGRP ,
.BR PRIO_USER ,
のどれか一つで、
.I who
は
.I which
に応じて解釈される
.RB ( PRIO_PROCESS
だとプロセス識別子、
.B PRIO_PGRP
だとプロセス・グループ識別子、
.B PRIO_USER
だと UID (ユーザID) と解釈される)。
.I who
がゼロならば、(それぞれ)呼び出したプロセス、
呼び出したプロセスのプロセス・グループ、
呼び出したプロセスの実UID を意味する。
.I prio
は \-20 から 19 の範囲の値で (但し以下の注意の項を参照のこと)、
デフォルトの優先度は 0 である;
小さな数字ほど、有利なスケジューリングとなる。

.BR getpriority ()
コールは指定したプロセスの中の最も高い優先度 (数値的には最小の値) を返す。
.BR setpriority ()
コールは指定したプロセス全ての優先度を指定した値に設定する。
優先度を今より小さい値に設定できるのはスーパー・ユーザーだけである。
.SH 返り値
.BR getpriority ()
は成功した場合にも \-1 の値を返す可能性があるので、
呼び出しの前に外部変数の
.I errno
をクリアし、呼び出しの後に返り値の \-1 が正当な値か
エラーかを判別する必要がある。
.BR setpriority ()
コールはエラーがなければ 0 を返し、エラーがあれば \-1 を返す。

.SH エラー
.TP
.B EINVAL
.I which
が
.BR PRIO_PROCESS ,
.BR PRIO_PGRP ,
.B PRIO_USER
のいずれでもない。
.TP
.B ESRCH
.I which
と
.I who
で指定されたプロセスが存在しない。
.PP
上記のものに加えて
.BR setpriority ()
では以下のエラーがある:
.TP
.B EACCES
呼び出し元がプロセスの優先度を下げようとしたが、必要な特権を
持っていなかった (Linux の場合、
.B CAP_SYS_NICE
ケーパビリティがなかった)。
Linux 2.6.12 以降では、呼び出し元が、あるプロセスの優先度を、
変更対象のプロセスのリソース
.B RLIMIT_NICE
のソフト・リミットの範囲外に設定しようとした場合にのみ、
このエラーが発生する。詳細は
.BR getrlimit (2)
を参照。
.TP
.B EPERM
プロセスは見つかったが、そのプロセスの実効 (effective) UID が
呼び出し元の実効UID にも実 (real) UID にも一致せず、
呼び出し元が特権も持っていなかった (Linux の場合、
.B CAP_SYS_NICE
ケーパビリティがなかった)。
以下の「注意」も参照のこと。
.SH 準拠
SVr4, 4.4BSD (これらの関数は 4.2BSD で最初に登場した),
POSIX.1-2001.
.SH 注意
.BR fork (2)
で作成された子プロセスは、
親プロセスの nice 値を継承する。
.BR execve (2)
の前後で nice 値は保存される。

相対的な nice 値の違いがプロセス間のスケジューリングにどの程度影響を与えるか
は、Unix システム間で異なり、Linux ではカーネルバージョンにより異なる。
Linux は、カーネル 2.6.23 以降で、nice 値の相対的な違いが、非常に強い影響を
与えるアルゴリズムを採用した。このアルゴリズムでは、
他に優先度の高いものがシステムに存在する時には、
非常に低い nice 値 (+19) ではプロセスに本当にほとんど CPU が割り当てられない。
また、高い nice 値 (\-20) では CPU を必要とするアプリケーション (例えば
オーディオ・アプリケーション) に CPU のほとんどが割り当てられる。

.B EPERM
が発生する条件の詳細はシステムに依存する。
上記の説明は POSIX.1-2001 のものであり、全ての System V 風システムは
これに従っているようである。
2.6.12 より前の Linux カーネルでは、呼び出し元の実 UID または
実効 UID がプロセス \fIwho\fP の (実効 UID でなく)
実 UID に一致する必要がある。
Linux 2.6.12 以降では、呼び出し元の実行 UID がプロセス \fIwho\fP
の実 UID か実効 UID のいずれかと一致する必要がある。
全ての BSD 風システム (SunOS 4.1.3, Ultrix 4.2,
4.3BSD, FreeBSD 4.3, OpenBSD-2.5等) は、
Linux 2.6.12 以降と同じ動作をする。
.LP
実際の優先度の値の範囲はカーネルのバージョンによって異なる。
1.3.36 より前の Linux では、優先度の範囲は負の無限大 〜 15 である。
1.3.43 以降の Linux では、優先度の範囲は \-20 〜 19 である。
カーネル内部では、nice 値は実際には 40 〜 1 の範囲を使って
表現されており (負の値はエラーコードとなるため)、こちらの値が
システムコール
.BR setpriority ()
と
.BR getpriority ()
で使用されている。
glibc のこれらのシステムコールのラッパー関数において、nice 値の
ユーザ領域 (user-land) とカーネル表現の間の変換が行われる。
変換式は以下の通り:
.I "unice\ =\ 20\ \-\ knice"
.LP
いくつかのシステムでは、nice 値の範囲は \20 〜 20 である。
.LP
現在では
.I <sys/time.h>
をインクルードする必要はないが、インクルードすれば移植性を高めることができる
(実際には
.I <sys/resource.h>
で
.I rusage
構造体が定義されているが、そのフィールドで使用されている
.I struct timeval
型は
.I <sys/time.h>
で定義されている)。
.SH 関連項目
.BR nice (1),
.BR fork (2),
.BR capabilities (7),
.BR renice (8)
.sp
(Linux 2.6.23 以降の) カーネルのソースツリー内の
.I Documentation/scheduler/sched-nice-design.txt
