.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"                               1993 Michael Haardt, Ian Jackson.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Wed Jul 21 23:02:38 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified 2001-11-17, aeb
.\"
.\" Japanese Version Copyright (c) 1997 KUNIMOTO Yasuhiro, all rights reserved.
.\" Translated Jun 27, 1997 by KUNIMOTO Yasuhiro (hiro@kthree.co.jp)
.\"
.\" Modified  Jun 28, 1997 by Yoshiki Sugiura (yox@in.aix.or.jp)
.\" Modified  Jul  6, 1997 by Yoshiki Sugiura (yox@in.aix.or.jp)
.\" Updated & Modified Sun Dec  9 20:02:10 JST 2001
.\"         by Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated Sat Sep  3 04:26:00 JST 2005
.\"         by Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.\"WORD	    descriptors ディスクリプタ
.\"
.TH _EXIT 2 2008-11-27 "Linux" "Linux Programmer's Manual"
.SH 名前
_exit, _Exit \- 呼び出し元のプロセスを終了させる
.SH 書式
.B #include <unistd.h>
.sp
.BI "void _exit(int " status );
.sp
.B #include <stdlib.h>
.sp
.BI "void _Exit(int " status );
.sp
.in -4n
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.BR _Exit ():
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE; または
.I cc\ -std=c99
.SH 説明
.BR _exit ()
は、それを呼んだプロセスを「直ちに」終了させる。
その際、このプロセスが所有しているディスクリプタ (descriptor) で、
オープンされているものは全てクローズされる。
また、このプロセスが所有する子プロセスは全て、プロセス番号 1、
つまり
.I init
プロセスによって継承され、このプロセスの親プロセスに対して
.B SIGCHLD
シグナルが送出される。
.LP
.I status
の値は、このプロセスの終了状態としてその親プロセスに対して返され、
.BR wait (2)
系関数を利用することによって取得することができる。
.LP
関数
.BR _Exit ()
は
.BR _exit ()
と等価である。
.SH 返り値
これらの関数は値を返さない。
.SH 準拠
SVr4, POSIX.1-2001, 4.3BSD.
関数
.BR _Exit ()
は C99 で導入された。
.SH 注意
exit の役割・終了状態の受渡し・
ゾンビプロセス・シグナル送出などについての議論は、
.BR exit (3)
を参照すること。
.LP
関数
.BR _exit ()
は
.BR exit (3)
に似ているが、ANSI C の
.BR atexit (3)
や
.BR on_exit (3)
によって登録されたいかなる関数も呼び出さない。
標準 I/O バッファのフラッシュや、
.BR tmpfile (3)
で作成されたテンポラリファイルの削除を行うかどうかは、実装に依存する。
一方で、
.BR _exit ()
はオープンされているファイルディスクリプタをクローズしないため、
未決定になっている出力がフラッシュされるのを待つのに不確定な遅れが発生する。
この遅れを発生させたくなければ、
.BR _exit ()
の前に
.BR tcflush (3)
のような関数を呼び出せばよい。
.BR _exit ()
が呼び出されたときに、
未決定になっている全ての I/O がキャンセルされるのか、
またどの I/O がキャンセルされるのかは実装に依存する。

バージョン 2.3 より前の glibc では、
.BR _exit ()
のラッパー関数は同じ名前のカーネル・システムコールを起動していた。
glibc 2.3 以降では、プロセス内の全てのスレッドを終了するために、
ラッパー関数は
.BR exit_group (2)
を起動する。
.SH 関連項目
.BR execve (2),
.BR exit_group (2),
.BR fork (2),
.BR kill (2),
.BR wait (2),
.BR wait4 (2),
.BR waitpid (2),
.BR atexit (3),
.BR exit (3),
.BR on_exit (3),
.BR termios (3)
