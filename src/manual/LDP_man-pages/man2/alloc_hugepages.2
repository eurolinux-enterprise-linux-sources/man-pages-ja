.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright 2003 Andries E. Brouwer (aeb@cwi.nl)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\"
.\" Japanese Version Copyright (c) 2004 Yuichi SATO
.\"         all rights reserved.
.\" Translated 2004-06-06, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated 2007-06-11, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.54
.\"
.\"WORD:	huge page	ヒュージページ
.\"
.TH ALLOC_HUGEPAGES 2 2007-05-31 "Linux" "Linux Programmer's Manual"
.SH 名前
alloc_hugepages, free_hugepages \- 大きなサイズのページの割り当てと解放を行う
.SH 書式
.nf
.BI "void *alloc_hugepages(int " key ", void *" addr ", size_t " len ,
.BI "                      int " prot ", int " flag );
.\" asmlinkage unsigned long sys_alloc_hugepages(int key, unsigned long addr,
.\" unsigned long len, int prot, int flag);
.sp
.BI "int free_hugepages(void *" addr );
.\" asmlinkage int sys_free_hugepages(unsigned long addr);
.fi
.SH 説明
システムコール
.BR alloc_hugepages ()
と
.BR free_hugepages ()
は Linux 2.5.36 で導入され、2.5.54 で再び削除された。
これらのシステムコールは i386 と ia64 のみで
(かつ
.B CONFIG_HUGETLB_PAGE
を指定してビルドされた場合に) 存在する。
Linux 2.4.20 では syscall 番号が存在するが、
呼び出すとエラー
.B ENOSYS
で失敗する。
.LP
i386 では、メモリ管理ハードウェアは通常のページ (4 KiB) と
大きなサイズのページ (以下、ヒュージページ; 2MiB または 4 MiB) を
扱うことができる。
同様に、ia64 もいくつかのサイズのヒュージページを扱うことができる。
これらのシステムコールは、ヒュージページをプロセスのメモリにマップしたり、
再び解放したりする。
ヒュージページはメモリ内にロックされ、スワップされない。
.LP
.I key
引き数は識別子である。
0 の場合、ページは非公開になり、子プロセスに継承されない。
正の場合、ページは同じ
.I key
を使う他のアプリケーションと共有され、子プロセスに継承される。
.LP
.BR free_hugepages ()
の
.I addr
引き数は、どのページを解放するかを指定する:
.I addr
は
.BR alloc_hugepages ()
の呼び出しの返り値である
(全てのユーザがメモリを解放したときに、
そのメモリは初めて実際に解放される)。
.BR alloc_hugepages ()
の
.I addr
引き数はヒントであり、カーネルはそれに従うかもしれないし、
従わないかもしれない。
アドレスは正しく配置されなければならない。
.LP
.I len
引き数は要求されたセグメントの長さである。
これはヒュージページのサイズの倍数にしなければならない。
.LP
.I prot
引き数はセグメントのメモリ保護を指定する。
これは
.BR PROT_READ ,
.BR PROT_WRITE ,
.B PROT_EXEC
のいずれかである。
.LP
.I key
が正でない限り、
.I flag
引き数は無視される。
.I key
が正で、かつ
.I flag
が
.B IPC_CREAT
であり、かつ指定された
.I key
で (セグメントが) 何も存在しない場合、
新しいヒュージページセグメントが作成される。
.I flag
が設定されておらず、かつ指定された
.I key
のセグメントが存在しない場合、
.B ENOENT
が返される。
.SH 返り値
成功した場合、
.BR alloc_hugepages ()
は割り当てられた仮想アドレスを返し、
.BR free_hugepages ()
は 0 を返す。
失敗した場合、\-1 を返し、
.I errno
が適切に設定される。
.SH エラー
.TP
.B ENOSYS
このシステムコールはカーネルでサポートされていない。
.SH ファイル
.TP
.I /proc/sys/vm/nr_hugepages
設定された hugetlb ページの数。
このファイルは読み書きできる。
.TP
.I /proc/meminfo
設定された hugetlb ページの数と、
3 つの変数 HugePages_Total, HugePages_Free, Hugepagesize の
サイズについての情報を提供する。
.SH 準拠
このシステムコールは Intel プロセッサ上の Linux に固有のものであり、
移植性が必要なプログラムで使うべきでない。
.SH 注意
これらのシステムコールはなくなった。
これらは Linux 2.5.36 から 2.5.54 にのみ存在する。
代わりに今は hugetlbfs ファイルシステムを使うことができる。
(CPU がサポートしている場合) ヒュージページを持つメモリは、
.BR mmap (2)
を使ってこの仮想ファイルシステムでファイルをマップすることで取得できる。
.LP
ヒュージページの最大数は、
.B hugepages=
起動パラメータを使って指定できる。
.\" ("Processor type and features" 以下の) CONFIG_HUGETLB_PAGE 
.\" ("Filesystems" 以下の).CONFIG_HUGETLBFS が必要である。
.\" mount -t hugetlbfs hugetlbfs /huge
.\" SHM_HUGETLB
