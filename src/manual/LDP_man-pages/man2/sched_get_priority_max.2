.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) Tom Bjorkholm & Markus Kuhn, 1996
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" 1996-04-01 Tom Bjorkholm <tomb@mydata.se>
.\"            First version written
.\" 1996-04-10 Markus Kuhn <mskuhn@cip.informatik.uni-erlangen.de>
.\"            revision
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1997-02-23, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated 2006-04-14, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.29
.\"
.\"WORD:	static			静的
.\"WORD:	priority		プライオリティ
.\"WORD:	scheduling		スケジューリング
.\"WORD:	algorithm		アルゴリズム
.\"WORD:	process			プロセス
.\"WORD:	portable		移植性のある
.\"WORD:	policy			方針
.\"
.TH SCHED_GET_PRIORITY_MAX 2 2006-03-23 "Linux" "Linux Programmer's Manual"
.SH 名前
sched_get_priority_max, sched_get_priority_min  \- 静的プライオリティの範囲を取得する
.SH 書式
.B #include <sched.h>
.sp
.BI "int sched_get_priority_max(int " policy );
.sp
.BI "int sched_get_priority_min(int " policy );
.SH 説明
.BR sched_get_priority_max ()
は\fIpolicy\fP によって指定されたスケジューリングのアルゴリズムで
使用されるプライオリティの最大値を返す。
.BR sched_get_priority_min ()
は\fIpolicy\fP によって指定されたスケジューリングのアルゴリズムで
使用されるプライオリティの最小値を返す。
サポートされる \fIpolicy\fP の値は
.BR SCHED_FIFO 、
.BR SCHED_RR 、
.BR SCHED_OTHER 、
.B SCHED_BATCH
である。これらのスケジューリング方針に関する詳細は
.BR sched_setscheduler (2)
に書かれている。

数値的に大きなプライオリティ値を持つプロセスは小さな
プライオリティ値を持つプロセスより前にスケジュールされる。
このため
.BR sched_get_priority_max ()
が返す値は
.BR sched_get_priority_min ()
が返す値よりも大きい。

Linux では \fBSCHED_FIFO\fP と \fBSCHED_RR\fP では 1 から 99 の範囲の
静的プライオリティーを持ち、\fBSCHED_OTHER\fP と \fBSCHED_BATCH\fP では
プライオリティとして 0 を持つ。
それぞれの方針のスケジューリング・プライオリティの範囲は
変更することができない。

スケジューリング・プライオリティの範囲は他の POSIX システムと
異なっているかもしれない。それで、移植性(portable)のある
アプリケーションでは仮想的な範囲を用い
.BR sched_get_priority_max ()
と
.BR sched_get_priority_min ()
で与えられた間隔にマップして使用することはいい考えである。
POSIX.1-2001 では \fBSCHED_FIFO\fP と \fBSCHED_RR\fP における
最大値と最小値の間隔を少なくとも 32 にすることを要求している。

POSIX システムでは
.BR sched_get_priority_max ()
と
.BR sched_get_priority_min ()
は \fI<unistd.h>\fP に
.B _POSIX_PRIORITY_SCHEDULING
が定義されている場合にのみ使用可能である。
.SH 返り値
成功した場合は
.BR sched_get_priority_max ()
と
.BR sched_get_priority_min ()
は指定されたスケジューリング方針のプライオリティの最大値/最小値を返す。
エラーの場合は \-1 が返され、
.I errno
が適切に設定される。
.SH エラー
.TP
.B EINVAL
引き数 \fIpolicy\fP が定義されているスケジューリング方針と一致しない。
.SH 準拠
POSIX.1-2001.
.SH 関連項目
.BR sched_getaffinity (2),
.BR sched_getparam (2)
.BR sched_getscheduler (2),
.BR sched_setaffinity (2),
.BR sched_setparam (2),
.BR sched_setscheduler (2),
.PP
.I Programming for the real world \- POSIX.4
by Bill O. Gallmeister, O'Reilly & Associates, Inc., ISBN 1-56592-074-0
