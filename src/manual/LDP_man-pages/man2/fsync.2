.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu) and
.\" and Copyright 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified 21 Aug 1994 by Michael Chastain <mec@shell.portal.com>:
.\"   Removed note about old libc (pre-4.5.26) translating to 'sync'.
.\" Modified 15 Apr 1995 by Michael Chastain <mec@shell.portal.com>:
.\"   Added `see also' section.
.\" Modified 13 Apr 1996 by Markus Kuhn <mskuhn@cip.informatik.uni-erlangen.de>
.\"   Added remarks about fdatasync.
.\" Modified Fri Jan 31 16:27:42 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 31 Jan 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 18 Apr 2001 by Andi Kleen
.\"   Fix description to describe what it really does; add a few caveats.
.\" 2006-04-28, mtk, substantial rewrite of various parts.
.\"
.\" Japanese Version Copyright (c) 1997 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1997-02-22, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Modified 2001-05-19, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated 2005-09-06, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2006-07-30, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2007-10-13, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.65
.\"
.\"WORD:	core			メモリ
.\"WORD:	disk			ディスク
.\"WORD:	synchronize		同期させる
..\"
.TH FSYNC 2 2008-11-07 "Linux" "Linux Programmer's Manual"
.SH 名前
fsync \- メモリ上にあるファイルの内容をストレージデバイス上のものと同期させる
.SH 書式
.B #include <unistd.h>
.sp
.BI "int fsync(int " fd );
.sp
.BI "int fdatasync(int " fd );
.sp
.in -4n
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.BR fsync ():
_BSD_SOURCE || _XOPEN_SOURCE
.br
         || /* glibc 2.8 以降では: */ _POSIX_C_SOURCE\ >=\ 200112L
.\" _POSIX_C_SOURCE\ >=\ 200112L は glibc 2.8 以降のみ
.br
.BR fdatasync ():
_POSIX_C_SOURCE\ >=\ 199309L || _XOPEN_SOURCE\ >=\ 500
.SH 説明
.BR fsync ()
は、ファイル記述子
.I fd
で参照されるファイルの内部で持っているデータ
(つまりバッファキャッシュページ) のうち修正されたデータを、
そのファイルが属するディスクデバイス (またはその他の永続ストレージデバイス)
に転送 (「フラッシュ」) する。
この呼び出しは転送が終わったとデバイスが報告するまでブロックする。
またファイルに結びついたメタデータ情報
.RB ( stat (2)
参照) もフラッシュする。

.BR fsync ()
の呼び出しは、ファイルが存在しているディレクトリのエントリがディスクへ
書き込まれたことを保証するわけではない。
保証するためには明示的にそのディレクトリのファイル記述子に対しても
.BR fsync ()
する必要がある。

.BR fdatasync ()
は
.BR fsync ()
と同様であるが、メタデータの扱いが異なる。
.BR fdatasync ()
は、それ以降のデータ読み込みを正しく扱うためにそのメタデータが必要に
ならない限り、変更されたメタデータをフラッシュしない。
例えば、
st_atime や st_mtime
(それぞれ最終アクセス時刻、最終修正時刻;
.BR stat (2)
参照) の変更はフラッシュを必要としない。
なぜならこれらはそれ以降のデータ読み込みを正しく扱うために
必要ではないからである。
一方、ファイルサイズ
.RB ( ftruncate (2)
では
.IR st_size )
の変更はメタデータのフラッシュが必要である。
.BR fdatasync ()
の狙いは、全てのメタデータをディスクと同期する必要のない
アプリケーションに対して、ディスクアクセスを減らすことである。
.SH 返り値
成功した場合、これらのシステムコールはゼロを返す。
エラーの場合、\-1 が返され、
.I errno
が適切に設定される。
.SH エラー
.TP
.B EBADF
.I fd
が書き込みのためにオープンされたファイル記述子でない。
.TP
.B EIO
同期操作の間にエラーが発生した。
.TP
.BR EROFS ", " EINVAL
.I fd
が同期操作をサポートしてない特殊なファイルを参照している。
.SH 準拠
4.3BSD, POSIX.1-2001.
.SH 可用性
.BR fdatasync ()
が利用可能な POSIX システムでは、
.B _POSIX_SYNCHRONIZED_IO
が
.I <unistd.h>
で 0 より大きな値に定義される
.RB ( sysconf (3)
参照)。
.\" POSIX.1-2001: It shall be defined to -1 or 0 or 200112L.
.\" -1: unavailable, 0: ask using sysconf().
.\" glibc defines them to 1.
.SH 注意
データベースやログファイルにアクセスするアプリケーションは、
非常に小さなデータの断片の書き込みを行い、その後すぐに
.BR fsync ()
を呼び出して、書き込んだデータがハードディスクに物理的に
確実に格納されるようにすることが多い。
残念ながら、
.BR fsync ()
は常に 2つの書き込み操作を開始する。
一つは新しく書き込まれたデータに対するものであり、
もう一つは inode に格納される修正時刻 (modification time) を
更新するためのものである。
修正時刻の更新が不可分な操作 (トランザクション) の一部ではない場合、
.BR fdatasync ()
を使うことで、不必要な inode のディスク書き込み操作を避けることができる。

データが配置されているハードディスクの書き込みキャッシュが有効に
なっている場合、
.BR fsync ()
/
.BR fdatasync ()
から戻ってきたとしても、そのデータは実際には永続的な記憶媒体に
格納されていないかもしれない。
.\" IDE ディスクのキャッシュを無効にする方法については
.\" .BR hdparm (8)
.\" を参照のこと。
.LP
ext2 ファイル・システムが
.I sync
オプションつきでマウントされている場合、
.BR fsync ()
でディレクトリ・エントリも暗黙のうちに同期する。
.LP
2.4 より前のカーネルでは巨大なファイルに
.BR fsync ()
を使用することは効率が悪い場合がある。
別の方法として
.BR open (2)
の際に
.B O_SYNC
フラグを使用するのが良いかもしれない。

Linux 2.2 以前では、
.BR fdatasync ()
は
.BR fsync ()
と等価であり、性能面でのメリットはない。
.SH 関連項目
.BR bdflush (2),
.BR open (2),
.BR sync (2),
.BR sync_file_range (2),
.BR hdparm (8),
.BR mount (8),
.BR sync (8),
.BR update (8)
