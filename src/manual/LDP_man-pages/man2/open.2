.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"                               1993 Michael Haardt, Ian Jackson.
.\"                               2008 Greg Banks
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified 1993-07-21 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1994-08-21 by Michael Haardt
.\" Modified 1996-04-13 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 1996-05-13 by Thomas Koenig
.\" Modified 1996-12-20 by Michael Haardt
.\" Modified 1999-02-19 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 1998-11-28 by Joseph S. Myers <jsm28@hermes.cam.ac.uk>
.\" Modified 1999-06-03 by Michael Haardt
.\" Modified 2002-05-07 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2004-12-08, mtk, reordered flags list alphabetically
.\" 2004-12-08, Martin Pool <mbp@sourcefrog.net> (& mtk), added O_NOATIME
.\" 2007-09-18, mtk, Added description of O_CLOEXEC + other minor edits
.\" 2008-01-03, mtk, with input from Trond Myklebust
.\"     <trond.myklebust@fys.uio.no> and Timo Sirainen <tss@iki.fi>
.\"     Rewrite description of O_EXCL.
.\" 2008-01-11, Greg Banks <gnb@melbourne.sgi.com>: add more detail
.\"     on O_DIRECT.
.\" 2008-02-26, Michael Haardt: Reorganized text for O_CREAT and mode
.\"
.\" FIXME . Apr 08: The next POSIX revision has O_EXEC, O_SEARCH, and
.\" O_TTYINIT.  Eventually these may need to be documented.  --mtk
.\"
.\" Japanese Version Copyright (c) 1997-1999 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1999-08-14, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated 2001-05-25, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified 2002-01-02, Yuichi SATO
.\" Updated & Modified 2002-07-07, Yuichi SATO
.\" Updated & Modified 2002-09-19, Yuichi SATO
.\" Updated & Modified 2003-07-30, Yuichi SATO
.\" Updated & Modified 2003-11-27, Yuichi SATO
.\" Updated & Modified 2005-01-01, Yuichi SATO
.\" Updated & Modified 2005-09-14, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated & Modified 2005-10-14, Akihiro MOTOKI
.\" Updated & Modified 2006-01-18, Akihiro MOTOKI
.\" Updated & Modified 2006-04-15, Akihiro MOTOKI, LDP v2.29
.\" Updated 2007-01-07, Akihiro MOTOKI, LDP v2.43
.\" Updated 2007-05-01, Akihiro MOTOKI, LDP v2.46
.\" Updated 2007-10-12, Akihiro MOTOKI, LDP v2.66
.\" Updated 2008-02-12, Akihiro MOTOKI, LDP v2.77
.\" Updated 2008-04-04, Akihiro MOTOKI, LDP v2.79
.\" Updated 2008-08-08, Akihiro MOTOKI, LDP v3.05
.\"
.\"WORD:	descriptor		ディスクリプタ
.\"WORD:	file description	ファイル記述
.\"WORD:	open			オープン
.\"WORD:	create			作成
.\"WORD:	file offset		ファイル・オフセット
.\"WORD:	controling terminal	制御端末
.\"WORD:	non-blocking I/O	非停止 I/O
.\"WORD:	synchronous I/O		同期 I/O
.\"WORD:	permission		許可
.\"WORD:	user			ユーザー
.\"WORD:	owner			所有者
.\"WORD:	group			グループ
.\"WORD:	other			他人
.\"WORD:	kernel			カーネル
.\"WORD:	symbolic link		シンボリック・リンク
.\"WORD:	dangling symbolic link	壊れたシンボリック・リンク
.\"WORD:	file creation flag	ファイル作成フラグ
.\"WORD:	file status flag	ファイル状態フラグ
.\"
.TH OPEN 2 2008-12-03 "Linux" "Linux Programmer's Manual"
.SH 名前
open, creat \- ファイルやデバイスのオープン、作成を行う
.SH 書式
.nf
.B #include <sys/types.h>
.B #include <sys/stat.h>
.B #include <fcntl.h>
.sp
.BI "int open(const char *" pathname ", int " flags );
.BI "int open(const char *" pathname ", int " flags ", mode_t " mode );

.BI "int creat(const char *" pathname ", mode_t " mode );
.fi
.SH 説明
ファイルの
.I pathname
を与えると、
.BR open ()
はファイル・ディスクリプタを返す。
ファイル・ディスクリプタは、この後に続くシステムコール
.RB ( read "(2), " write "(2), " lseek "(2), " fcntl "(2) など)"
で使用される小さな非負の整数である。
このシステムコールが成功した場合に返されるファイル・ディスクリプタは
そのプロセスがその時点でオープンしていないファイル・ディスクリプタの
うち最小の数字のものとなる。
.PP
デフォルトでは、新しいファイル・ディスクリプタは
.BR execve (2)
を実行した後もオープンされたままとなる (つまり、
.BR fcntl (2)
に説明がある
.B FD_CLOEXEC
ファイル・ディスクリプタ・フラグは最初は無効である;
後述の Linux 固有のフラグ
.B O_CLOEXEC
を使うとこのデフォルトを変更することができる)。
ファイル・オフセット (file offset) はファイルの先頭に設定される
.RB ( lseek (2)
参照)。
.PP
.BR open ()
を呼び出すと、「オープンファイル記述」
.I "(open file description)"
が作成される。ファイル記述とは、システム全体の
オープン中のファイルのテーブルのエントリである。
このエントリは、ファイル・オフセットとファイル状態フラグ
.RB ( fcntl (2)
.B F_SETFL
操作により変更可能) が保持する。
ファイル・ディスクリプタはこれらのエントリの一つへの参照である。
この後で
.I pathname
が削除されたり、他のファイルを参照するように変更されたりしても、
この参照は影響を受けない。
新しいオープンファイル記述は最初は他のどのプロセスとも
共有されていないが、
.BR fork (2)
で共有が起こる場合がある。
.PP
引き数
.I flags
には、アクセスモード
.BR O_RDONLY ", " O_WRONLY ", " O_RDWR
のどれかひとつが入っていなければならない。
これらはそれぞれ読み込み専用、書き込み専用、読み書き用に
ファイルをオープンすることを要求するものである。

さらに、
.I flags
には、ファイル作成フラグ (file creation flag) とファイル状態フラグ
(file status flag) を 0 個以上「ビット単位の OR (bitwise-or)」で
指定することができる。
.I ファイル作成フラグ
は
.BR O_CREAT ", " O_EXCL ", " O_NOCTTY ", " O_TRUNC
である。
.I ファイル状態フラグ
は以下のリストのうち上記以外の残りのものである。
.\" FIXME . Actually is it true that the "file status flags" are all of the
.\" remaining flags listed below?  SUSv4 divides the flags into:
.\" * Access mode
.\" * File creation
.\" * File status
.\" * Other (O_CLOEXEC, O_DIRECTORY, O_NOFOLLOW)
.\" though it's not clear what the difference between "other" and
.\" "File creation" flags is.  (I've raised an Aardvark to see if this
.\" can be clarified in SUSv4; 10 Oct 2008.)
二種類のフラグの違いは、ファイル状態フラグの方は
.BR fcntl (2)
を使ってその内容を取得したり (場合によっては) 変更したりできる点にある。
ファイル作成フラグとファイル状態フラグの全リストを以下に示す:
.TP
.B O_APPEND
ファイルを追加 (append) モードでオープンする。
毎回の
.BR write (2)
の前に
.BR lseek (2)
を行ったかのように、ファイル・ポインターをファイルの最後に移動する。
.\" For more background, see
.\" http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=453946
.\" http://nfs.sourceforge.net/
NFS ファイル・システムで、
.B O_APPEND
を使用すると、複数のプロセスがひとつのファイルに同時にデータを追加した場合、
ファイルが壊れてしまうことがある。
これは NFS が追加モードをサポートしていないため、
クライアントのカーネル (kernel) がそれをシミュレートしなければならないのだが、
競合状態を避けることはできないからである。
.TP
.B O_ASYNC
シグナル駆動 I/O (signal-driven I/O) を有効にする:
このファイル・ディスクリプタへの
入力または出力が可能になった場合に、シグナルを生成する
(デフォルトは
.B SIGIO
であるが、
.BR fcntl (2)
によって変更可能である)。
この機能が使用可能なのは端末、疑似端末、ソケットのみであり、
(Linux 2.6 以降では) パイプと FIFO に対しても使用できる。
さらに詳しい説明は
.BR fcntl (2)
を参照すること。
.TP
.BR O_CLOEXEC " (Linux 2.6.23 以降)"
新しいファイル・ディスクリプタに対して close-on-exec フラグを有効にする。
このフラグを指定することで、プログラムは
.B FD_CLOEXEC
フラグをセットするための
.BR fcntl (2)
.B F_SETFD
操作を別途呼び出す必要がなくなる。
また、ある種のマルチスレッドのプログラムはこのフラグの使用は
不可欠である。なぜなら、個別に
.B FD_CLOEXEC
フラグを設定する
.BR fcntl (2)
.B F_SETFD
操作を呼び出したとしても、あるスレッドがファイルディスクリプタを
オープンするのと同時に別のスレッドが
.BR fork (2)
と
.BR execve (2)
を実行するという競合条件を避けるのには十分ではないからである。
.\" This flag fixes only one form of the race condition;
.\" The race can also occur with, for example, descriptors
.\" returned by accept(), pipe(), etc.
.TP
.B O_CREAT
ファイルが存在しなかった場合は作成 (create) する。
ファイルの所有者 (ユーザー ID) は、プロセスの実効ユーザー ID に設定される。
グループ所有権 (グループ ID) は、プロセスの実効グループ ID
または親ディレクトリのグループ ID に設定される
(これは、ファイルシステムタイプ、マウントオプション、
親ディレクトリのモードに依存する。
.BR mount (8)
で説明されているマウントオプション
.I bsdgroups
と
.I sysvgroups
を参照)。
.\" 2.6.25 時点では、bsdgroups は ext2, ext3, ext4, XFS でサポート
.\" されている (2.6.14 以降)。
.RS
.PP
.I mode
は新しいファイルを作成する場合に使用するアクセス許可 (permission) を指定する。
.I flags
に
.B O_CREAT
が指定されている場合、
.I mode
を指定しなければならない。
.B O_CREAT
が指定されていない場合、
.I mode
は無視される。
有効なアクセス許可は、普段と同じようにプロセスの
.I umask
によって修正され、作成されたファイルの許可は
.I "(mode\ &\ ~umask)"
となる。
このモードは、新しく作成されたファイルに対するそれ以降のアクセス
にのみ適用される点に注意すること。
読み取り専用のファイルを作成する
.BR open ()
コールであっても、
読み書き可能なファイル・ディスクリプタを返すことがありうる。
.PP
.I mode
のために以下のシンボル定数が提供されている :
.TP 9
.B S_IRWXU
00700 ユーザー (ファイルの所有者) に読み込み、書き込み、
実行の許可がある。
.TP
.B S_IRUSR
00400 ユーザーに読み込みの許可がある。
.TP
.B S_IWUSR
00200 ユーザーに書き込みの許可がある。
.TP
.B S_IXUSR
00100 ユーザーに実行の許可がある。
.TP
.B S_IRWXG
00070 グループに読み込み、書き込み、実行の許可がある。
.TP
.B S_IRGRP
00040 グループに読み込みの許可がある。
.TP
.B S_IWGRP
00020 グループに書き込みの許可がある。
.TP
.B S_IXGRP
00010 グループに実行の許可がある。
.TP
.B S_IRWXO
00007 他人 (others) に読み込み、書き込み、実行の許可がある。
.TP
.B S_IROTH
00004 他人に読み込みの許可がある。
.TP
.B S_IWOTH
00002 他人に書き込みの許可がある。
.TP
.B S_IXOTH
00001 他人に実行の許可がある。
.RE
.TP
.BR O_DIRECT " (Linux 2.4.10 以降)"
このファイルに対する I/O のキャッシュの効果を最小化しようとする。
このフラグを使うと、一般的に性能が低下する。
しかしアプリケーションが独自にキャッシングを行っているような
特別な場合には役に立つ。
ファイルの I/O はユーザー空間バッファに対して直接行われる。
I/O は同期で行われる。
すなわち
.BR read (2)
および
.BR write (2)
が完了した時点で、データの転送が完了したことが保証される。
「注意」の節 (下記) の議論も参照。
.sp
ブロックデバイスに対する似通った意味のインターフェースが
.BR raw (8)
で説明されている (但し、このインタフェースは非推奨である)。
.TP
.B O_DIRECTORY
\fIpathname\fP がディレクトリでなければオープンは失敗する。
.\" 以下の記事とそのリプライを参照のこと。
.\" http://marc.theaimsgroup.com/?t=112748702800001&r=1&w=2
.\" [PATCH] open: O_DIRECTORY and O_CREAT together should fail
.\" O_DIRECTORY | O_CREAT を指定すると O_DIRECTORY が無視されてしまう。
このフラグは Linux 特有であり、
.BR opendir (3)
が FIFO やテープデバイスに対してコールされた場合の
サービス不能 (denial-of-service) 攻撃を避けるために
カーネル 2.1.126 で追加された。
しかしこれは
.BR opendir (3)
の実装以外では使用するべきではない。
.TP
.B O_EXCL
この呼び出しでファイルが作成されることを保証する。
このフラグが
.B O_CREAT
と一緒に指定され、
.I pathname
のファイルが既に存在した場合、
.BR open ()
は失敗する。
.B O_CREAT
が指定されなかった場合の
.B O_EXCL
の動作は未定義である。

これら二つのフラグが指定された際、シンボリックリンクは辿られない。
.\" POSIX.1-2001 では明示的にこの動作を要求している。
.I pathname
がシンボリックリンクの場合、
シンボリックリンクがどこを指しているかに関わらず
.BR open ()
は失敗する。

.B O_EXCL
は、Linux 2.6 以降で NFSv3 以降を使っている NFS でのみサポートされている。
NFS の
.B O_EXCL
サポートが提供されていない環境では、このフラグに頼って
ロック処理を実行するプログラムは競合状態 (race condition) に出会う
可能性がある。
ロックファイルを使用して不可分 (atomic) なファイルロックを実現し、
NFS が
.B O_EXCL
をサポートしているかに依存しないようにしたい場合、
移植性のある方法は、同じファイルシステム上に他と名前の重ならない
ファイル (例えばホスト名と PID を組み合わせた名前) を作成し、
.BR link (2)
を使用してそのロックファイルへのリンクを作成することである。
.BR link (2)
コールの返り値が 0 ならばロックに成功している。
あるいは、そのファイルに
.BR stat (2)
を使用してリンク数 (link count) が 2 になっているかをチェックする。
そうなっていれば、同じくロックに成功しているということである。
.TP
.B O_LARGEFILE
(LFS)
.I off_t
ではサイズを表せない (だだし
.I off64_t
ではサイズを表せる) ファイルをオープン可能にする。
この定義を有効にするためには、
.B _LARGEFILE64_SOURCE
マクロを定義しなければならない。
32ビットシステムにおいて大きなファイルにアクセスする方法を得たい場合、
.RB ( O_LARGEFILE
を使うよりも)
.B _FILE_OFFSET_BITS
機能検査マクロをセットする方が望ましい方法である
.RB ( feature_test_macros (7)
を参照)。
.TP
.BR O_NOATIME " (Linux 2.6.8 以降)"
ファイルに対して
.BR read (2)
が実行されたときに、最終アクセス時刻 (inode の st_atime) を更新しない。
このフラグはインデックス作成やバックアッププログラムで使うことを意図している。
これを使うとディスクに対する操作を大幅に減らすことができる。
このフラグは全てのファイルシステムに対して有効であるわけではない。
その一例が NFS であり、サーバがアクセス時刻を管理している。
.\" The O_NOATIME flag also affects the treatment of st_atime
.\" by mmap() and readdir(2), MTK, Dec 04.
.TP
.B O_NOCTTY
.I pathname
が端末 (terminal) デバイス
\(em
.BR tty (4)
参照
\(em
を指している場合に、たとえそのプロセスが制御端末を持っていなくても、
オープンしたファイルは制御端末にはならない。
.TP
.B O_NOFOLLOW
\fIpathname\fP がシンボリック・リンクだった場合、オープンは失敗する。
これは FreeBSD の拡張で、Linux には 2.1.126 より追加された。
pathname の前のコンポーネント (earlier component;
訳註: 最後のディレクトリセパレータより前の部分) が
シンボリック・リンクである場合には、それが指す先が参照される。
.\" glibc 2.0.100 以降のヘッダーにはこのフラグの定義がある。
.\" \fI2.1.126 以前のカーネルで使用した場合には無視される。\fP
.TP
.BR O_NONBLOCK " または " O_NDELAY
可能ならば、ファイルは非停止 (non-blocking) モードでオープンされる。
.BR open ()
も、返したファイル・ディスクリプタに対する以後のすべての操作も
呼び出したプロセスを待たせることはない。
FIFO (ネームド・パイプ) を扱う場合には
.BR fifo (7)
も参照すること。
強制ファイルロック (mandatory file lock) やファイルリース (file lease)
と組み合わせた場合の、
.B O_NONBLOCK
の効果についての議論は、
.BR fcntl (2)
を参照すること。
.TP
.B O_SYNC
ファイルは同期 (synchronous) I/O モードでオープンされる。
.BR open ()
が返したファイル・ディスクリプタに対して
.BR write (2)
を行うと、必ず呼び出したプロセスをブロックし、
該当ハードウェアに物理的に書き込まれるまで返らない。
.I 以下の「注意」の章も参照。
.TP
.B O_TRUNC
ファイルが既に存在し、通常ファイルであり、
書き込み可モードでオープンされている
(つまり、
.BR O_RDWR "または" O_WRONLY
の) 場合、長さ 0 に切り詰め (truncate) られる。
ファイルが FIFO または端末デバイスファイルの場合、
.B O_TRUNC
フラグは無視される。
それ以外の場合、
.B O_TRUNC
の効果は未定義である。
.PP
これらの選択フラグのいくつかはファイルをオープンした後でも
.BR fcntl (2)
を使用して変更することができる。

.BR creat ()
は
.I flags
に
.B O_CREAT|O_WRONLY|O_TRUNC
を指定して
.BR open ()
を行うのと等価である。
.SH 返り値
.BR open ()
と
.BR creat ()
は新しいファイル・ディスクリプタを返す。
エラーが発生した場合は \-1 を返す
(その場合は
.I errno
が適切に設定される)。
.SH エラー
.TP
.B EACCES
ファイルに対する要求されたアクセスが許されていないか、
.I pathname
のディレクトリ部分の何れかのディレクトリに検索許可がなかった。
またはファイルが存在せず、親ディレクトリへの書き込み許可がなかった。
.RB ( path_resolution (7)
も参照すること。)
.TP
.B EEXIST
.I pathname
は既に存在し、
.BR O_CREAT " と " O_EXCL
が使用された。
.TP
.B EFAULT
.I pathname
の指す領域がアクセス可能なアドレス空間にない。
.TP
.B EFBIG
.B EOVERFLOW
参照。
.TP
.B EINTR
遅いデバイス
(例えば FIFO、
.BR fifo (7)
参照) のオープンが完了するのを待って停止している間に
システムコールがシグナルハンドラにより割り込まれた。
.BR signal (7)
参照。
.TP
.B EISDIR
.I pathname
はディレクトリを参照しており、書き込み要求が含まれていた
(つまり
.B O_WRONLY
または
.B O_RDWR
が設定されている)。
.TP
.B ELOOP
.I pathname
を解決する際に遭遇したシンボリック・リンクが多過ぎる。
または \fBO_NOFOLLOW\fP が指定されており、
.I pathname
がシンボリックリンクだった。
.TP
.B EMFILE
プロセスがオープンしているファイル数がすでに最大数に達している。
.TP
.B ENAMETOOLONG
.I pathname
が長過ぎる。
.TP
.B ENFILE
オープンできるファイルの合計数がシステム制限に達している。
.TP
.B ENODEV
.I pathname
がデバイス・スペシャル・ファイルを参照しており、対応するデバイスが存在しない。
(これは Linux カーネルのバグであり、この場合には
.B ENXIO
が返されるべきである)
.TP
.B ENOENT
.B O_CREAT
が設定されておらず、かつ指定されたファイルが存在しない。
または、
.I pathname
のディレクトリ部分が存在しないか壊れた (dangling) シンボリック・リンクである。
.TP
.B ENOMEM
カーネルに利用できるメモリが不足している
.TP
.B ENOSPC
.I pathname
を作成する必要があるが、
.I pathname
を含んでいるデバイスに新しいファイルのための空き容量がない。
.TP
.B ENOTDIR
.I pathname
に含まれるディレクトリ部分のどれかが実際にはディレクトリでない。
または \fBO_DIRECTORY\fP が指定されており、
.I pathname
がディレクトリでない。
.TP
.B ENXIO
.BR O_NONBLOCK " | " O_WRONLY
が設定されており、指定したファイルが FIFO で
そのファイルを読み込みのためにオープンしているプロセスが存在しない。
または、ファイルがデバイス・スペシャル・ファイルで
対応するデバイスが存在しない。
.TP
.B EOVERFLOW
.I pathname
が参照しているのが、大き過ぎてオープンできない通常のファイルである。
通常、このエラーが発生するは、32 ビットプラットフォーム上で
.I -D_FILE_OFFSET_BITS=64
を指定せずにコンパイルされたアプリケーションが、ファイルサイズが
.I (2<31)-1
ビットを超えるファイルを開こうとした場合である。
上記の
.B O_LARGEFILE
も参照。
これは POSIX.1-2001 で規定されているエラーである。
2.6.24 より前のカーネルでは、Linux はこの場合にエラー
.B EFBIG
を返していた。
.\" See http://bugzilla.kernel.org/show_bug.cgi?id=7253
.\" "Open of a large file on 32-bit fails with EFBIG, should be EOVERFLOW"
.\" Reported 2006-10-03
.TP
.B EPERM
.B O_NOATIME
フラグが指定されたが、呼び出し元の実効ユーザー ID が
.\" 厳密に言えば、呼び出し元のファイルシステム UID...(MTK)
ファイルの所有者と一致せず、かつ呼び出し元に特権
.RB ( CAP_FOWNER )
がない。
.TP
.B EROFS
.I pathname
が読み込み専用のファイルシステム上のファイルを参照しており、
書き込みアクセスが要求された。
.TP
.B ETXTBSY
.I pathname
が現在実行中の実行イメージを参照しており、書き込みが要求された。
.TP
.B EWOULDBLOCK
.B O_NONBLOCK
フラグが指定されたが、そのファイルには矛盾するリースが設定されていた
.RB ( fcntl (2)
参照)。
.SH 準拠
SVr4, 4.3BSD, POSIX.1-2001.
フラグ
.BR O_DIRECTORY ,
.BR O_NOATIME ,
.B O_NOFOLLOW
は Linux 特有のものであり、
これらのフラグの定義を得るためには、
.B _GNU_SOURCE
を定義する必要があるかもしれない。

.BR O_CLOEXEC
フラグは POSIX.1-2001 では規定されていないが、
POSIX.1-2008 で規定されている。

.B O_DIRECT
は POSIX では規定されていない。
.B O_DIRECT
の定義を得るには
.B _GNU_SOURCE
を定義しなければならない。
.SH 注意
Linux では、
.B O_NONBLOCK
フラグは、
open を実行したいが read または write を実行する意図は
必ずしもないことを意味する。
これは
.BR ioctl (2)
のためのファイルディスクリプタを取得するために、
デバイスをオープンするときによく用いられる。

「アクセスモード」の値
.BR O_RDONLY ", " O_WRONLY ", " O_RDWR
は、
.I flags
に指定できる他の値と違い、個々のビットを指定するものではなく、
これらの値は
.I flags
の下位 2 ビットを定義する。
.BR O_RDONLY ", " O_WRONLY ", " O_RDWR
はそれぞれ 0, 1, 2 に定義されている。
言い換えると、
.B "O_RDONLY | O_WRONLY"
の組み合わせは論理的に間違いであり、確かに
.B O_RDWR
と同じ意味ではない。
Linux では、特別な、非標準なアクセスモードとして 3 (バイナリでは 11) が
予約されており
.I flags
に指定できる。
このアクセスモードを指定すると、ファイルの読み出し/書き込み許可をチェックし、
読み出しにも書き込みにも使用できないディスクリプタを返す。
この非標準のアクセスモードはいくつかの Linux ドライバで使用されており、
デバイス固有の
.BR ioctl (2)
操作にのみ使用されるディスクリプタを返すために使われている。
.\" See for example util-linux's disk-utils/setfdprm.c
.\" For some background on access mode 3, see
.\" http://thread.gmane.org/gmane.linux.kernel/653123
.\" "[RFC] correct flags to f_mode conversion in __dentry_open"
.\" LKML, 12 Mar 2008
.LP
.B O_RDONLY | O_TRUNC
の影響は未定義であり、その動作は実装によって異なる。
多くのシステムではファイルは実際に切り詰められる。
.\" Linux 2.0, 2.5: truncate
.\" Solaris 5.7, 5.8: truncate
.\" Irix 6.5: truncate
.\" Tru64 5.1B: truncate
.\" HP-UX 11.22: truncate
.\" FreeBSD 4.7: truncate
.PP
NFS を実現しているプロトコルには多くの不備があり、特に
.BR O_SYNC " と " O_NDELAY
に影響する。

POSIX では、フラグ \fBO_SYNC\fP, \fBO_DSYNC\fP, \fBO_RSYNC\fP に対応する
3 種類の同期 I/O を提供している。
Linux では、今のところ (カーネル 2.1.130) これらは同じものである。

.BR open ()
はスペシャル・ファイルをオープンすることができるが、
.BR creat ()
でスペシャル・ファイルを作成できない点に注意すること。
代わりに
.BR mknod (2)
を使用する。
.LP
UID マッピングを使用している NFS ファイル・システムでは、
.BR open ()
がファイル・ディスクリプタを返した場合でも
.BR read (2)
が \fBEACCES\fP で拒否される場合がある。
これはクライアントがアクセス許可のチェックを行って
.BR open ()
を実行するが、読み込みや書き込みの際には
サーバーで UID マッピングが行われるためである。

ファイルが新しく作成されると、
ファイルの
.IR st_atime ,
.IR st_ctime ,
.I st_mtime
フィールド
(それぞれ最終アクセス時刻、最終状態変更時刻、最終修正時刻である。
.BR stat (2)
参照) が現在時刻に設定される。
さらに親ディレクトリの
.I st_ctime
と
.I st_mtime
も現在時刻に設定される。
それ以外の場合で、O_TRUNC フラグでファイルが修正されたときは、
ファイルの
.I st_ctime
と
.I st_mtime
フィールドが現在時刻に設定される。
.SS O_DIRECT
.LP
.B O_DIRECT
フラグを使用する場合、ユーザ空間バッファの長さやアドレス、
I/O のファイルオフセットに関してアラインメントの制限が課されることがある。
Linux では、アラインメントの制限はファイルシステムやカーネルのバージョンに
よって異なり、全く制限が存在しない場合もある。
しかしながら、現在のところ、指定されたファイルやファイルシステムに対して
こうした制限があるかを見つけるための、アプリケーション向けのインタフェースで
ファイルシステム非依存のものは存在しない。
いくつかのファイルシステムでは、制限を確認するための独自のインタフェースが
提供されている。例えば、
.BR xfsctl (3)
の
.B XFS_IOC_DIOINFO
命令である。
.LP
Linux 2.4 では、転送サイズ、
ユーザーバッファのアラインメント、ファイルオフセットは、
ファイルシステムの論理ブロックサイズの倍数でなければならない。
Linux 2.6 では、512 バイトごとの境界に配置されていれば充分である。
.LP
.B O_DIRECT
フラグは  SGI IRIX で導入された。SGI IRIX にも Linux 2.4 と同様の
(ユーザーバッファの) アラインメントの制限がある。
また、IRIX には適切な配置とサイズを取得するための
.BR fcntl (2)
コールがある。
FreeBSD 4.x も同じ名前のフラグを導入したが、アラインメントの制限はない。
.LP
.B O_DIRECT
が Linux でサポートされたのは、カーネルバージョン 2.4.10 である。
古い Linux カーネルは、このフラグを単に無視する。
.B O_DIRECT
フラグをサポートしていないファイルシステムもあり、その場合は、
.B O_DIRECT
を使用すると
.BR open ()
は
.B EINVAL
で失敗する。
.LP
アプリケーションは、同じファイル、
特に同じファイルの重複するバイト領域に対して、
.B O_DIRECT
と通常の I/O を混ぜて使うのは避けるべきである。
ファイルシステムがこのような状況において一貫性の問題を正しく
扱うことができる場合であっても、全体の I/O スループットは
どちらか一方を使用するときと比べて低速になるであろう。
同様に、アプリケーションは、同じファイルに対して
.BR mmap (2)
と直接 I/O
.RB ( O_DIRECT )
を混ぜて使うのも避けるべきである。
.LP
NFS で
.B O_DIRECT
を使った場合の動作はローカルのファイルシステムの場合と違う。
古いカーネルや、ある種の設定でコンパイルされたカーネルは、
.B O_DIRECT
と NFS の組み合わせをサポートしていないかもしれない。
NFS プロトコル自体はサーバにフラグを渡す機能は持っていないので、
.B O_DIRECT
I/O はクライアント上のページキャッシュをバイパスするだけになり、
サーバは I/O をキャッシュしているかもしれない。
クライアントは、
.B O_DIRECT
の同期機構を保持するため、サーバに対して I/O を同期して行うように依頼する。
サーバによっては、こうした状況下、特に I/O サイズが小さい場合に
性能が大きく劣化する。
また、サーバによっては、I/O が安定したストレージにまで行われたと、
クライアントに対して嘘をつくものもある。
これは、サーバの電源故障が起こった際にデータの完全性が保たれない
危険は少しあるが、性能面での不利な条件を回避するために行われている。
Linux の NFS クライアントでは
.B O_DIRECT
I/O 
でのアラインメントの制限はない。
.PP
まとめると、
.B O_DIRECT
は、注意して使うべきであるが、強力なツールとなる可能性を持っている。
アプリケーションは
.B O_DIRECT
をデフォルトでは無効になっている性能向上のためのオプションと
考えておくのがよいであろう。
.PP
.RS
「O_DIRECT でいつも困るのは、インタフェース全部が本当にお馬鹿な点だ。
たぶん危ないマインドコントロール剤で
頭がおかしくなったサルが設計したんじゃないかな」 \(em Linus
.RE
.SH バグ
現在のところ、
.BR open ()
の呼び出し時に
.B O_ASYNC
を指定してシグナル駆動 I/O を有効にすることはできない。
このフラグを有効にするには
.BR fcntl (2)
を使用すること。
.\" FIXME . Check bugzilla report on open(O_ASYNC)
.\" See http://bugzilla.kernel.org/show_bug.cgi?id=5993
.SH 関連項目
.BR chmod (2),
.BR chown (2),
.BR close (2),
.BR dup (2),
.BR fcntl (2),
.BR link (2),
.BR lseek (2),
.BR mknod (2),
.BR mmap (2),
.BR mount (2),
.BR openat (2),
.BR read (2),
.BR socket (2),
.BR stat (2),
.BR umask (2),
.BR unlink (2),
.BR write (2),
.BR fopen (3),
.BR feature_test_macros (7),
.BR fifo (7),
.BR path_resolution (7),
.BR symlink (7)
