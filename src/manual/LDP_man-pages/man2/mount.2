.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) 1993 Rickard E. Faith <faith@cs.unc.edu>
.\" and Copyright (C) 1994 Andries E. Brouwer <aeb@cwi.nl>
.\" and Copyright (C) 2002, 2005 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified 1996-11-04 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-10-13 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added note on historical behavior of MS_NOSUID
.\" Modified 2002-05-16 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Extensive changes and additions
.\" Modified 2002-05-27 by aeb
.\" Modified 2002-06-11 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Enhanced descriptions of MS_MOVE, MS_BIND, and MS_REMOUNT
.\" Modified 2004-06-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2005-05-18, mtk, Added MNT_EXPIRE, plus a few other tidy-ups.
.\" 2008-10-06, mtk: move umount*() material into separate umount.2 page.
.\" 2008-10-06, mtk: Add discussion of namespaces.
.\"
.\" Japanese Version Copyright (c) 1997 SUTO, Mitsuaki
.\"         all rights reserved.
.\" Translated 1997-06-26,SUTO, Mitsuaki <suto@av.crl.sony.co.jp>
.\" Updated 2001-05-20, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2001-06-25, Kentaro Shirakata
.\" Updated 2001-10-15, Kentaro Shirakata
.\" Updated 2002-01-01, Kentaro Shirakata
.\" Updated 2002-11-24, Kentaro Shirakata
.\" Updated 2003-01-27, Kentaro Shirakata
.\" Updated 2005-02-28, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-09-06, Akihiro MOTOKI
.\" Updated 2006-07-23, Akihiro MOTOKI, LDP v2.36
.\" Updated 2007-01-07, Akihiro MOTOKI, LDP v2.43
.\" Updated 2007-05-01, Akihiro MOTOKI, LDP v2.46
.\" Updated 2008-08-08, Akihiro MOTOKI, LDP v3.05
.\" Updated 2008-11-10, Akihiro MOTOKI, LDP v3.11
.\"
.\"WORD:	lazy umount		遅延アンマウント
.\"WORD:	Linux-specific		Linux 特有
.\"
.\" motoki 2005-02-28:
.\" - subtree をどう訳すか。部分木、部分ツリー、サブツリー。。。何かないか。
.\"
.TH MOUNT 2 2008-11-20 "Linux" "Linux Programmer's Manual"
.SH 名前
mount \- ファイルシステムをマウント/アンマウントする
.SH 書式
.nf
.B "#include <sys/mount.h>"
.sp
.BI "int mount(const char *" source ", const char *" target ,
.BI "          const char *" filesystemtype ", unsigned long " mountflags ,
.BI "          const void *" data );
.fi
.SH 説明
.BR mount ()
は
.I source
で指定されたファイルシステム (デバイス名であることが多いが、
ディレクトリ名やダミーの場合もある) を
.I target
で指定されたディレクトリに結びつける。

ファイルシステムのマウントを行うには、
適切な権限 (Linux では
.B CAP_SYS_ADMIN
ケーパビリティ) が必要である。

Linux 2.4 以降、ひとつのファイルシステムを複数のマウントポイントに
結びつけることができ、同じマウントポイントに複数のマウントをスタック
させることもできる。
.\" Multiple mounts on same mount point: since 2.3.99pre7.

引き数
.I filesystemtype
としてカーネルが対応している値は、
.I /proc/filesystems
で参照できる (例えば "minix", "ext2", "ext3", "jfs", "xfs", "reiserfs",
"msdos", "proc", "nfs", "iso9660" 等)。
適切なモジュールが読み込まれると、さらに別の値が利用可能になるかもしれない。

引き数
.I mountflags
は、先頭 16 ビットはマジックナンバー 0xC0ED (\fBMS_MGC_VAL\fP) で、
残りの 16 ビットがマウントフラグである。
マジックナンバーは、カーネルバージョン 2.4 より前では必須であったが、
現在は必要なく、指定されても無視される。
マウントフラグは libc4 と libc5 では \fI<linux/fs.h>\fP 、
glibc2 では \fI<sys/mount.h>\fP で定義されており、以下の通りである:
.\" FIXME 2.6.15 added flags for "shared sub-tree" functionality:
.\" MS_UNBINDABLE, MS_PRIVATE, MS_SHARED, MS_SLAVE
.\" These need to be documented on this page.
.\" See:
.\" Documentation/filesystems/sharedsubtree.txt
.\"
.\" http://lwn.net/Articles/159077/
.\"
.\" http://myweb.sudhaa.com:2022/~ram/sharedsubtree/paper/sharedsubtree.1.pdf
.\" Shared-Subtree Concept, Implementation, and Applications in Linux
.\" Al Viro viro@ftp.linux.org.uk
.\" Ram Pai linuxram@us.ibm.com
.\"
.\" http://foss.in/2005/slides/sharedsubtree1.pdf
.\" Shared Subtree Concept and Implementation in the Linux Kernel
.\" Ram Pai
.\"
.TP
.BR MS_BIND " (Linux 2.4 以降)"
.\" 正確には 2.4.0-test9 以降
バインドマウントを行う。これはファイルやディレクトリの部分木を
ファイルシステム内部の別の場所で見えるようにするものである。
バインドマウントを使うと、ファイルシステムをまたいで
.BR chroot (2)
jail を構成することが可能になる。
引き数
.I filesystemtype
と
.I data
は無視される。
Linux 2.6.26 より前では
.I mountflags
も無視されていた
.\" with the exception of the "hidden" MS_REC mountflags bit
(バインドマウントでは、マウントポイントとなるファイルシステムと
同じマウントオプションが使用される)。
Linux 2.6.26 以降では、バインドマウントを行う際に
.B MS_RDONLY
フラグは無視されない。
.TP
.BR MS_DIRSYNC " (Linux 2.5.19 以降)"
このファイルシステムへのディレクトリ変更を同期的に行う。
(この特性は個々のディレクトリ、または
.BR chattr (1)
を使った部分木毎に設定できる。)
.TP
.B MS_MANDLOCK
このファイルシステムのファイルに対して強制ロックを認める。
(強制ロックを有効にするには、
.BR fcntl (2)
で述べられている方法でファイル単位で許可をしなければならない)
.\" FIXME Say more about MS_MOVE
.TP
.B MS_MOVE
部分木を移動する。
.I source
にはすでに存在するマウントポイントを指定し、
.I target
には新しい場所を指定する。
移動はアトミックである。
操作の実行中、部分ツリーがアンマウントされることはない。
.IR filesystemtype ", " mountflags ", " data
引き数は無視される。
.TP
.B MS_NOATIME
このファイルシステムの (全ての種類の) ファイルのアクセス時刻を更新しない。
.TP
.B MS_NODEV
このファイルシステムのデバイス (スペシャルファイル) へのアクセスを許可しない。
.TP
.B MS_NODIRATIME
このファイルシステムのディレクトリのアクセス時刻を更新しない。
このフラグは
.B MS_NOATIME
で提供される機能のサブセットを提供する。つまり、
.B MS_NOATIME
では
.B MS_NODIRATIME
が暗黙のうち設定される。
.TP
.B MS_NOEXEC
このファイルシステムにあるプログラムの実行を許可しない。
.\" (Possibly useful for a file system that contains non-Linux executables.
.\" Often used as a security feature, e.g., to make sure that restricted
.\" users cannot execute files uploaded using ftp or so.)
.TP
.B MS_NOSUID
このファイルシステムのプログラムを実行するときに、
set-user-ID ビットと set-group-ID ビットを無視する。
.\" (This is a security feature to prevent users executing set-UID and
.\" set-GID programs from removable disk devices.)
.TP
.B MS_RDONLY
ファイルシステムを読み込み専用でマウントする。
.\"
.\" FIXME Document MS_REC, available since 2.4.11.
.\" This flag has meaning in conjunction with MS_BIND and
.\" also with the shared sub-tree flags.
.TP
.BR MS_RELATIME " (Linux 2.6.20 以降)"
このファイルシステム上のファイルがアクセスされた際、
そのファイルの最終アクセス時刻 (atime) の現在値が
最終修正時刻 (mtime) や最終状態変更時刻 (ctime) と
等しいか小さい場合にのみ、atime を更新する。
このオプションは、
.BR mutt (1)
のように、最後の内容修正以降にファイルがいつ読み出されたかを知る
必要があるプログラムで有用である。
.TP
.B MS_REMOUNT
すでに存在するマウントを再マウントする。
これにより、すでに存在するマウントの
.I mountflags
と
.I data
を、一度アンマウントしてから再マウントするという作業をせずに
変更できる。
.I source
と
.I target
は最初の
.BR mount ()
呼び出しと同じ値を指定する必要がある。
.I filesystemtype
は無視される。

.I mountflags
のうち
.BR MS_RDONLY ,
.BR MS_SYNCHRONOUS ,
.B MS_MANDLOCK
は変更可能である。
カーネル 2.6.16 より前では、
.BR MS_NOATIME ,
.B MS_NODIRATIME
も変更可能であった。
カーネル 2.4.10 より前では、上記に加えて、
.BR MS_NOSUID ,
.BR MS_NODEV ,
.B MS_NOEXEC
も変更可能であった。
.TP
.BR MS_SILENT " (Linux 2.6.17 以降)"
カーネルのログ内のある種の
.RI ( printk ())
警告メッセージの表示を抑制する。
このフラグは、名前が不適切で廃止された
.B MS_VERBOSE
フラグ (Linux 2.4.12 以降で利用可能) を置き換えるもので、同じ意味を持つ。
.TP
.B MS_SYNCHRONOUS
ファイルシステムに対して同期的に書き込みを行う。
(このファイルシステムの全てのオープンされたファイルに対して、
.BR open (2)
のフラグに
.B O_SYNC
を指定したような動作となる)
.PP
Linux 2.4 以降では、
.BR MS_NODEV ", " MS_NOEXEC ", " MS_NOSUID
はマウントポイント単位で指定できる。
カーネル 2.6.16 以降では、
.B MS_NOATIME
と
.B MS_NODIRATIME
もマウントポイント単位で指定できる。
また、
.B MS_RELATIME
フラグもマウントポイント単位で設定できる。
.PP
引き数
.I data
がどのように解釈されるかは、ファイルシステムによって異なる。
たいていは、指定されたファイルシステムで利用可能なオプションが
コンマ区切りで並べられた文字列である。
各ファイルシステムに対して指定可能なオプションの詳細については
.BR mount (8)
を参照のこと。
.SH 返り値
成功した場合 0 が返る。失敗した場合 \-1 が返り、
.I errno
がエラーの内容に従って設定される。
.SH エラー
以下に示すエラーは、ファイルシステムに依存しないものである。
それぞれのファイルシステムタイプには固有のエラーが存在する場合があり、
独自の動作をすることもある。詳しくはカーネルのソースを見て欲しい。
.TP
.B EACCES
パスに含まれるディレクトリに検索 (実行) 許可がない
.RB ( path_resolution (7)
も参照)。
または、
.B MS_RONLY
フラグを指定せずに読み込み専用のファイルシステムを
マウントしようとした。
または、ブロックデバイス
.I source
が
.B MS_NODEV
オプションでマウントされたファイルシステム上にある。
.\" mtk: Probably: write permission is required for MS_BIND, with
.\" the error EPERM if not present; CAP_DAC_OVERRIDE is required.
.TP
.B EBUSY
.I source
は既にマウントされている。
または、書き込み用にオープンされたファイルがあり、
読み込み専用で再マウントすることができない。
または、
.I target
が使用中 (busy) のため、
.I target
にマウントできない。
.I target
が使用中の例としては、あるタスクが動作しているディレクトリ (working
directory) であるとか、別のデバイスのマウントポイントであるとか、
オープンされたファイルが存在する、などがある。
.TP
.B EFAULT
場所を示す引き数のひとつがユーザーのアドレス空間の外を指している。
.TP
.B EINVAL
.I source
に不正なスーパーブロックがある。
または、
.I source
が
.I target
にマウントされていないのに、再マウント
.RB ( MS_REMOUNT )
が要求された。
または、
.I source
がマウントポイントではないか、\(aq/\(aq なのに、移動
.RB ( MS_MOVE )
が要求された。
.TP
.B ELOOP
パス名の解決中に登場したリンクが多すぎた。
または、
.I target
が
.I source
の子孫なのに移動が要求された。
.TP
.B EMFILE
.\" motoki: どう訳すのがいいだろうか？
(ブロックデバイスが必要でない場合)
ダミーデバイスのテーブルが一杯になった。
.TP
.B ENAMETOOLONG
パス名の長さが
.B MAXPATHLEN
を越えた。
.TP
.B ENODEV
.I filesystemtype
がカーネル中で定義 (config) されていない。
.TP
.B ENOENT
パス名が空である。もしくは指定されたパスが存在しない。
.TP
.B ENOMEM
カーネルがファイル名やデータをコピーするための空きページを確保できない。
.TP
.B ENOTBLK
(ブロックデバイスが必要だが)
.I source
がブロックデバイスではない。
.TP
.B ENOTDIR
.I target
か、
.I source
のプレフィックスがディレクトリではない。
.TP
.B ENXIO
ブロックデバイス
.I source
のメジャー番号が範囲外である。
.TP
.B EPERM
呼び出し元に必要な権限がない。
.SH 準拠
この関数は Linux 固有の関数であり、移植を考慮したプログラムでは
使用すべきでない。
元の
.B MS_SYNC
フラグは、別の
.B MS_SYNC
が \fI<mman.h>\fP に追加されたので
1.1.69 から
.B MS_SYNCHRONOUS
に名前が変わった。
.LP
Linux 2.4 より前のバージョンでは、
.B MS_NOSUID
オプション付きでマウントされたファイルシステム上の
set-UID や set-GID のプログラムを実行しようとすると、
.B EPERM
エラーとなった。
Linux 2.4 以降では、このような場合は set-UID ビットや set-GID ビットが
無視されるだけである。
.\" この変更は patch-2.4.0-prerelease に含まれている。
.SS プロセス単位の名前空間
カーネル 2.4.19 以降の Linux では、プロセス単位のマウント名前空間
(mount namespace) が提供されている。マウント名前空間とは、
あるプロセスに見えているファイルシステムのマウントの集合である。
マウントポイントの名前空間は複数のプロセスで共有することができ、
普通は共有されている。
一つのプロセスによる名前空間の変更 (すなわち、マウントやアンマウント) は
同じ名前空間を共有する他の全てのプロセスにも見える。
(2.4.19 より前の Linux は、システム上の全プロセスで共有される名前空間が
一つだけあるとみなすことができる。)

.BR fork (2)
経由で作成された子プロセスは親プロセスのマウント名前空間を共有する。
.BR execve (2)
の前後でマウント名前空間は保持される。

プロセスは自分用 (private) のマウント名前空間を持つことができる。
自分用の名前空間を持つことができるのは、
そのプロセスが
.BR clone ()
.B CLONE_NEWNS
フラグを使って作成された場合と、
そのプロセスが
.B CLONE_NEWNS
フラグ付きで
.BR unshare (2)
を呼び出した場合である。
前者の場合、作成されたプロセスの新しい名前空間は
.BR clone ()
を呼び出したプロセスの名前空間の「コピー」で初期化される。
後者の場合、
.BR unshare (2)
を呼び出すと、呼び出し元のプロセスのマウント名前空間が、
それまでは他のプロセスと共有していた名前空間の自分用のコピーとなる。
これにより、呼び出し元のプロセスがこれ以後に行うマウント/アンマウントは
他のプロセスから見えなくなる
(ただし、呼び出し元のプロセスが
.BR unshare (2)
の呼び出し以降に作成した子プロセスには見える)。
また、その逆の、他のプロセスが行ったマウント/アンマウントも呼び出し元のプロセスには
見えなくなる。

Linux 独自のファイル
.I /proc/PID/mounts
では、指定された ID を持つプロセスのマウント名前空間における
マウントポイントのリストが公開されている。詳細は
.BR proc (5)
を参照のこと。
.SH 関連項目
.BR umount (2),
.BR path_resolution (7),
.BR mount (8),
.BR umount (8)
