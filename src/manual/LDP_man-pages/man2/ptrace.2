.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 1993 Michael Haardt
.\" (michael@moria.de),
.\" Fri Apr  2 11:32:09 MET DST 1993
.\"
.\" changes Copyright 1999 Mike Coleman (mkc@acm.org)
.\" -- major revision to fully document ptrace semantics per recent Linux
.\"    kernel (2.2.10) and glibc (2.1.2)
.\" Sun Nov  7 03:18:35 CST 1999
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" Modified Fri Jul 23 23:47:18 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Fri Jan 31 16:46:30 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Thu Oct  7 17:28:49 1999 by Andries Brouwer <aeb@cwi.nl>
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\"
.\" 2006-03-24, Chuck Ebbert <76306.1226@compuserve.com>
.\"    Added    PTRACE_SETOPTIONS, PTRACE_GETEVENTMSG, PTRACE_GETSIGINFO,
.\"        PTRACE_SETSIGINFO, PTRACE_SYSEMU, PTRACE_SYSEMU_SINGLESTEP
.\"    (Thanks to Blaisorblade, Daniel Jacobowitz and others who helped.)
.\"
.\" Japanese Version Copyright (c) 1997-1999 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 1999-11-20, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated 2003-10-11, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2006-07-23, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.28
.\" Updated 2007-01-07, Akihiro MOTOKI, LDP v2.43
.\" Updated 2007-05-01, Akihiro MOTOKI, LDP v2.46
.\" Updated 2008-08-06, Akihiro MOTOKI, LDP v3.05
.\" Updated 2009-04-13, Akihiro MOTOKI, LDP v3.20
.\"
.\"WORD:	child process		子プロセス
.\"WORD:	parent process		親プロセス
.\"WORD:	core image		メモリ・イメージ
.\"WORD:	break point		ブレーク・ポイント
.\"WORD:	single step		シングル・ステップ実行
.\"WORD:	trap flag		トラップ・フラグ
.\"WORD:	attach			接続
.\"WORD:	detach			分離
.\"WORD:	process ID		プロセスID
.\"
.TH PTRACE 2 2009-03-30 "Linux" "Linux Programmer's Manual"
.SH 名前
ptrace \- プロセスのトレース
.SH 書式
.nf
.B #include <sys/ptrace.h>
.sp
.BI "long ptrace(enum __ptrace_request " request ", pid_t " pid ", "
.BI "            void *" addr ", void *" data );
.fi
.SH 説明
.BR ptrace ()
システムコールは、親プロセスが、別のプロセスの実行の監視/制御を
行ったり、コアイメージ (core image) やレジスタの調査/変更を
行ったりする手段を提供する。
.BR ptrace ()
は、主にブレークポイントによるデバッグやシステムコールのトレースを
実装するのに用いられる。
.LP
トレースを開始するには、まず親プロセスで
.BR fork (2)
を呼び出す。生成された子プロセスで
.B PTRACE_TRACEME
を行い、続いて (典型的には)
.BR exec (3)
を行なう。
別の方法としては、
親プロセスが既存のプロセスに対して
.B PTRACE_ATTACH
を使用し、トレースを開始する。
.LP
トレースの実行中、子プロセスはシグナルが配送されるたびに、
たとえそのシグナルが無視すべきものであっても停止する
.RB ( SIGKILL
は例外で、通常どおりの効果をもたらす)。
親プロセスには次の
.BR wait (2)
で通知され、停止している間に子プロセスを調べたり修正したりすることができる。
そして親プロセスは子プロセスの実行を再開させるが、配送された
シグナルを無視することもできる (あるいは代わりに別のシグナルを
配送することもできる) 。
.LP
親プロセスがトレースを終了する際には、
.B PTRACE_KILL
を使用して子プロセスを終了させることもできるし、
.B PTRACE_DETACH
を用いて通常のトレースなしのモードにして、
実行を継続させることもできる。
.LP
\fIrequest\fP の値がこのシステムコールの動作を決定する:
.TP
.B PTRACE_TRACEME
このプロセスが親プロセスによってトレースされることを表す。
このプロセスに
.RB ( SIGKILL
以外の) シグナルが配送されると、
プロセスは停止し、親プロセスに
.BR wait (2)
を通じて通知される。
また、これ以降はこのプロセスが
.BR execve (2)
を呼び出す度に
.B SIGTRAP
が送信されるようになる。
これによって、親プロセスは
新しいプログラムが実行を開始する前に制御することができる。
親プロセスが自プロセスをトレースするつもりがない場合には、
おそらくこのプロセスは本要求を行うべきではないだろう。
(\fIpid\fP, \fIaddr\fP, \fIdata\fP は無視される。)
.LP
上記の要求は子プロセスだけが行なうものである。
残りは親プロセスだけが行なうものである。
以下の要求では、\fIpid\fP で操作の対象となる
子プロセスを指定する。
.B PTRACE_KILL
を除き、要求を行なうためには
子プロセスは停止していなければならない。
.TP
.BR PTRACE_PEEKTEXT ", " PTRACE_PEEKDATA
子プロセスのメモリの
.I addr
の位置から 1 ワードを読み出す。読み出したワードは
.BR ptrace ()
の返り値として返される。 Linux ではテキスト (text) とデータ (data) で
同じアドレス空間を使用するため、この 2 つの要求は現在のところ
同じものである。 (引き数 \fIdata\fP は無視される。)
.TP
.B PTRACE_PEEKUSER
.\" PTRACE_PEEKUSR in kernel source, but glibc uses PTRACE_PEEKUSER,
.\" and that is the name that seems common on other systems.
子プロセスの USER 領域のオフセット
.I addr
の位置から 1 ワードを読み込む。USER 領域にはそのプロセスの
レジスタ (registers) などの情報が保持されている
(\fI<sys/user.h>\fP を参照)。読み込んだワードは
.BR ptrace ()
コールの結果として返される。
たいていはオフセットはワード境界になければならないが、
アーキテクチャによってはその必要はない。
「注意」の節を参照。
(\fIdata\fP は無視される。 )
.TP
.BR PTRACE_POKETEXT ", " PTRACE_POKEDATA
ワード
.I data
を子プロセスのメモリの
.I addr
の位置へコピーする。上と同様に、現在のところ二つの
要求は同じものである。
.TP
.B PTRACE_POKEUSER
.\" PTRACE_POKEUSR in kernel source, but glibc uses PTRACE_POKEUSER,
.\" and that is the name that seems common on other systems.
ワード
.I data
を子プロセスの USER 領域のオフセット
.I addr
の位置にコピーする。
上と同様に、通常、オフセットはワード境界になければならない。
カーネルの完全性 (integrity) を維持するため、
変更内容によっては USER 領域の変更は禁止されている。
.TP
.BR PTRACE_GETREGS ", " PTRACE_GETFPREGS
それぞれ、子プロセスの汎用レジスタ、浮動小数点レジスタを親プロセスの
\fIdata\fP の位置にコピーする。この data の書式に関しては
\fI<sys/user.h>\fP を参照すること。(\fIaddr\fP は無視される。)
.TP
.BR PTRACE_GETSIGINFO " (Linux 2.3.99-pre6 以降)"
停止の原因となったシグナルに関する情報を取得する。
\fIsiginfo_t\fP 構造体
.RB ( sigaction (2)
参照) を子プロセスから親プロセスの \fIdata\fP の位置にコピーする。
(\fIaddr\fP は無視される。)
.TP
.BR PTRACE_SETREGS ", " PTRACE_SETFPREGS
それぞれ、子プロセスの汎用レジスタ、浮動小数点レジスタに
親プロセスの \fIdate\fP の位置からコピーする。
.B PTRACE_POKEUSER
と同様に、汎用レジスタによっては
変更が禁止されている場合がある。 (\fIaddr\fP は無視される。)
.TP
.BR PTRACE_SETSIGINFO " (Linux 2.3.99-pre6 以降)"
シグナル情報を設定する。
\fIsiginfo_t\fP 構造体を親プロセスのデータ \fIdata\fP の位置から
子プロセスにコピーする。
この処理を行うことができるのは、子プロセスに通常は配送されるはずで
トレーサに捕捉されたシグナルについてだけである。
これらの通常のシグナルと
.BR ptrace ()
自身が発生するシグナルを見分けるのは難しいかもしれない。
(\fIaddr\fP は無視される。)
.TP
.BR PTRACE_SETOPTIONS " (Linux 2.4.6 以降; バグの章にある警告も参照)"
親プロセスの \fIdata\fP に基づいて ptrace のオプションを設定する
(\fIaddr\fP は無視される)。
\fIdata\fP はオプションのビットマスクとして解釈され、
オプションには以下のフラグを指定できる:
.RS
.TP
.BR PTRACE_O_TRACESYSGOOD " (Linux 2.4.6 以降)"
システムコールのトラップが配送されたときに、シグナル番号のビット 7
を設定する (すなわち、\fI(SIGTRAP | 0x80)\fP を配送する)。
これにより、トレーサが通常のトラップとシステムコールによるトラップを
区別しやすくなる。
.RB ( PTRACE_O_TRACESYSGOOD
はどのアーキテクチャでも動作しない可能性がある。)
.TP
.BR PTRACE_O_TRACEFORK " (Linux 2.5.46 以降)"
次の
.BR fork (2)
呼び出し時に \fISIGTRAP | PTRACE_EVENT_FORK\ <<\ 8\fP で
子プロセスの動作を停止させ、
新たに fork されたプロセスのトレースを自動的に開始し、
.B SIGSTOP
でそのプロセスの実行を開始する。
新しいプロセスの PID は
.B PTRACE_GETEVENTMSG
で取得できる。
.TP
.BR PTRACE_O_TRACEVFORK " (Linux 2.5.46 以降)"
次の
.BR vfork (2)
呼び出し時に \fISIGTRAP | PTRACE_EVENT_VFORK\ <<\ 8\fP で
子プロセスの動作を停止させ、
新たに vfork されたプロセスのトレースを自動的に開始し、
.B SIGSTOP
でそのプロセスの実行を開始する。
新しいプロセスの PID は
.B PTRACE_GETEVENTMSG
で取得できる。
.TP
.BR PTRACE_O_TRACECLONE " (Linux 2.5.46 以降)"
次の
.BR clone (2)
呼び出し時に \fISIGTRAP | PTRACE_EVENT_CLONE\ << \8\fP で
子プロセスの動作を停止させ、
新たに clone で作成されたプロセスのトレースを自動的に開始し、
.B SIGSTOP
でプロセスの実行を開始する。
新しいプロセスの PID は
.B PTRACE_GETEVENTMSG
で取得できる。
このオプションで全ての
.BR clone (2)
コールを捕まえられるわけではない。
子プロセスが
.B CLONE_VFORK
フラグ付きで
.BR clone (2)
を呼び出した場合、
.B PTRACE_O_TRACEVFORK
が設定されていれば代わりに
.B PTRACE_EVENT_VFORK
が配送される。
また、子プロセスが終了シグナルを
.B SIGCHLD
に設定して
.BR clone (2)
を呼び出した場合は、
.B PTRACE_O_TRACEFORK
が設定されていれば
.B PTRACE_EVENT_FORK
が配送される。
.TP
.BR PTRACE_O_TRACEEXEC " (Linux 2.5.46 以降)"
次の
.BR execve (2)
呼び出し時に
\fISIGTRAP | PTRACE_EVENT_EXEC\ <<\ 8\fP
で子プロセスの動作を停止させる。
.TP
.BR PTRACE_O_TRACEVFORKDONE " (Linux 2.5.60 以降)"
次の
.BR vfork (2)
呼び出し時に
\fISIGTRAP | PTRACE_EVENT_VFORK_DONE\ <<\ 8\fP
で子プロセスの動作を停止させる。
.TP
.BR PTRACE_O_TRACEEXIT " (Linux 2.5.60 以降)"
終了 (exit) 時に \fISIGTRAP | PTRACE_EVENT_EXIT\ <<\ 8\fP
で子プロセスの動作を停止させる。子プロセスの終了ステータスは
.B PTRACE_GETEVENTMSG
で取得できる。
この停止はレジスタがまだ参照可能であるプロセス終了処理の初期に行われ、
トレーサはどこで終了が発生したかを知ることができる。
通常の終了通知 (exit notification) はプロセスの終了処理が完了した後に
行われる。コンテキストを参照することはできるにも関わらず、
トレーサはこの時点から終了を止めることはできない。
.RE
.TP
.BR PTRACE_GETEVENTMSG " (Linux 2.5.46 以降)"
発生したばかりの ptrace イベントに関するメッセージを
.RI ( "unsigned long"
型で) 取得する。
取得したメッセージは親プロセスの \fIdata\fP の位置に格納される。
得られる内容は、
.B PTRACE_EVENT_EXIT
の場合は子プロセスの終了ステータスであり、
.BR PTRACE_EVENT_FORK ,
.BR PTRACE_EVENT_VFORK ,
.B PTRACE_EVENT_CLONE
の場合は新しいプロセスの PID である。
Linux 2.6.18 以降では、新しいプロセスの PID は
.B PTRACE_EVENT_VFORK_DONE
で入手できる。
(\fIaddr\fP は無視される。)
.TP
.B PTRACE_CONT
停止した子プロセスの実行を再開させる。
\fIdata\fP がゼロでなく、
.B SIGSTOP
でもなければ、
子プロセスに配送されるシグナルと解釈される。
ゼロや
.B SIGSTOP
の場合はシグナルは配送されない。
これを使うと、例えば、親プロセスは
子プロセスに送られたシグナルを実際に配送するかどうかを
制御することができる。(\fIaddr\fP は無視される。)
.TP
.BR PTRACE_SYSCALL ", " PTRACE_SINGLESTEP
.B PTRACE_CONT
と同様に停止した子プロセスを再開する。ただし、
.B PTRACE_SYSCALL
の場合は子プロセスが
次にシステムコールに入るかシステムコールから抜けるかする時に、
.B PTRACE_SINGLESTEP
の場合は 1 命令 (instruction) 実行した後に停止させる
(通常どおり、子プロセスはシグナルを受け取った場合にも停止する)。
親プロセスから見ると、子プロセスは
.B SIGTRAP
を受信して停止したように見える。そのため、例えば
.B PTRACE_SYSCALL
を使うと、1回目の停止で引き数を調べて
.B PTRACE_SYSCALL
を実行し、 2回目の停止でシステムコールの返り値を調べる、
というようなことができる。
引き数
.I data
は
.B PTRACE_CONT
の場合と同じ様に解釈される。
(\fIaddr\fP は無視される。)
.TP
.BR PTRACE_SYSEMU ", " PTRACE_SYSEMU_SINGLESTEP " (Linux 2.6.14 以降)"
.B PTRACE_SYSEMU
は、実行を再開し、次のシステムコールに入る時に停止させる。
システムコールは実行されない。
.B PTRACE_SYSEMU_SINGLESTEP
も同様だが、システムコールでない場合には
1 命令 (singlestep) だけ実行した時点でも停止させる。
このコールは User Mode Linux のように子プロセスのシステムコールを全て
エミュレートしようとするプログラムで使用される。
引き数
.I data
は
.B PTRACE_CONT
の場合と同じ様に解釈される。
(\fIaddr\fP は無視される。
全てのアーキテクチャでサポートされているわけではない。)
.TP
.B PTRACE_KILL
子プロセスに
.B SIGKILL
を送り終了させる。(\fIaddr\fP と \fIdata\fP は無視される。)
.TP
.B PTRACE_ATTACH
.I pid
で指定されたプロセスに接続 (attach) し、それを呼び出し元のプロセスの
子プロセスとしてトレースできるようにする。子プロセスは
.B PTRACE_TRACEME
したかのように振舞う。呼び出し元のプロセスはそのほとんどの目的において、
その子プロセスの実際の親になる (例えば、子プロセスのイベントの
通知を受けとったり、
.BR ps (1)
で親として表示されたりする)。しかし、子プロセスで
.BR getppid (2)
を実行した場合には元の親プロセスの PID が返される。
子プロセスには
.B SIGSTOP
が送られるが、この呼び出しが完了するまでに
必ずしも停止するとは限らない。子プロセスの停止を待つには
.BR wait (2)
を使用すること。(\fIaddr\fP と \fIdata\fP は無視される。)
.TP
.B PTRACE_DETACH
.B PTRACE_CONT
と同様に停止した子プロセスを再開する。ただし
まずそのプロセスからの分離 (detach) を行い、
.B PTRACE_ATTACH
での親の切り換えによる効果と
.B PTRACE_TRACEME
の効果を取り消す。意図したものではないだろうが、
Linux では、トレースされている子プロセスはどのような方法でトレースを
開始されたとしても、この方法で分離 (detach) することができる。
(\fIaddr\fP は無視される。)
.SH 返り値
成功すると、
.B PTRACE_PEEK*
の場合は要求したデータを返し、
それ以外の場合は 0 を返す。
エラーの場合は \-1 を返し、
.I errno
が適切に設定される。
.B PTRACE_PEEK*
が成功して返す値も　\-1 になることがあるため、
そのような要求の場合には、呼び出し元は
.I errno
を調べ、エラーか発生したのかどうかを判断しなければならない。
.SH エラー
.TP
.B EBUSY
(i386 のみ) デバッグレジスタの確保または解放でエラーが発生した。
.TP
.B EFAULT
親プロセスまたは子プロセスのメモリの不正な領域に読み書きしようとした。
おそらくその領域がマッピングされていないか、
その領域へのアクセスが許されていないかである。
不運なことに、Linux ではこのようなエラーの場合、多かれ少なかれ
恣意的に
.B EIO
を返したり
.B EFAULT
を返したりすることがある。
.TP
.B EINVAL
不正なオプションを設定しようとした。
.TP
.B EIO
\fIrequest\fP が不正である。
または、親プロセスまたは子プロセスのメモリの
不正な領域に読み書きしようとした。
または、ワード境界違反があった。
または、実行再開の要求で不正なシグナルを指定した。
.TP
.B EPERM
指定したプロセスをトレースすることができない。これは親プロセスが
必要な権限 (必要なケーパビリティは
.BR CAP_SYS_PTRACE )
を持っていないことが原因の場合がある。
分かりやすい理由を挙げるなら、
ルートでないプロセスはシグナルを送れないプロセスはトレースできないし、
set-user-ID/set-group-ID プログラムを実行しているプロセスはトレースできない。
または、プロセスはすでにトレース中である、
または
.BR init (8)
プロセス (PID が 1) である。
.TP
.B ESRCH
指定したプロセスが存在しない。
または、指定したプロセスは呼び出したプロセスが
現在トレース中の子プロセスではない。
または、指定したプロセスが停止していない (停止していることが必要な要求の場合)。
.SH 準拠
SVr4, 4.3BSD.
.SH 注意
.BR ptrace ()
の引き数は上のようなプロトタイプに基づいて解釈されるが、
glibc では、現在のところ
.BR ptrace ()
は \fIrequest\fP 引き数だけが固定の可変長引き数関数として
宣言されている。
これは必要なければ残りの引き数は省略可能であることを意味するが、
それは
.BR gcc (1)
の明文化されていない動作を利用していることになる。
.LP
.BR init (8)
すなわち PID が 1 のプロセスはトレースすることができない。
.LP
メモリや USER 領域の内容や配置は OS ごと、アーキテクチャごとに
非常に依存する。
オフセットが指定された場合、返されるデータは
.I "struct user"
の定義と完全に一致しないこともありえる。
.\" http://lkml.org/lkml/2008/5/8/375 参照。
.LP
「ワード (word) 」の大きさは OS によって決まる。
(例えば、32 ビットの Linux では 32 ビットである、など。)
.LP
トレースすることによってトレースされるプロセスの動作に些細な違いが
起こることがある。例えば、プロセスが
.B PTRACE_ATTACH
によって接続された場合には、そのプロセスが停止した時でも本来の親は
.BR wait (2)
を使って通知を受けることができず、新しい親が効率よく
この通知を真似る方法もない。
.LP
親プロセスが
.B PTRACE_EVENT_*
がセットされたイベントを受信した場合、
子プロセスは通常通りのシグナル配送が行われる状態にない。
つまり、親プロセスが、
シグナルにより
.BR ptrace (PTRACE_CONT)
を行ったり、
.BR ptrace (PTRACE_KILL)
を行ったりできないということである。
こららのメッセージの受信後は、子プロセスを終了 (kill) するのに、
シグナル
.B SIGKILL
を指定して
.BR kill (2)
を行う方法を代わりに使用できる。
.LP
このマニュアルは現在の Linux における
.BR ptrace ()
コールの動作について記述している。他の Unix では
その動作は著しく異なる。
いかなる場合も
.BR ptrace ()
を使うと OS やアーキテクチャに非常に依存したものになる。
.LP
SunOS のマニュアル・ページには
.BR ptrace ()
は「独特で不可解」と記述されており、まさしくそうである。
Solaris 2 では proc ベースの
デバッグのインターフェースとして
.BR ptrace ()
の上位互換関数が実装され、より強力で一貫性のあるものとなっている。
.SH バグ
カーネル 2.6 のヘッダがインストールされたホストでは、
.B PTRACE_SETOPTIONS
はカーネル 2.4 のヘッダとは異なる値で宣言される。
このため、カーネル 2.6 のヘッダでコンパイルされたアプリケーションは
カーネル 2.4 では正しく動作しない。
この問題は、
.B PTRACE_SETOPTIONS
が定義されていた際は、
.B PTRACE_SETOPTIONS
を
.B PTRACE_OLDSETOPTIONS
に定義し直すことで対処できる。
.SH 関連項目
.BR gdb (1),
.BR strace (1),
.BR execve (2),
.BR fork (2),
.BR signal (2),
.BR wait (2),
.BR exec (3),
.BR capabilities (7)
