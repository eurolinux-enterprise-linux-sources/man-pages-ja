.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"                               1993 Michael Haardt
.\"                               1993,1994 Ian Jackson.
.\" You may distribute it under the terms of the GNU General
.\" Public License. It comes with NO WARRANTY.
.\"
.\" Japanese Version Copyright (c) 1997 SUTO, Mitsuaki
.\"         all rights reserved.
.\" Translated Thu Jun 26 20:47:26 JST 1997
.\"         by SUTO, Mitsuaki <suto@av.crl.sony.co.jp>
.\" Updated & Modified Fri Jan 22 1999
.\"         by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated Fri Sep 13 JST 2000 by Kentaro Shirakata <argrath@ub32.org>
.\" Updated Sun May 23 JST 2004 by Kentaro Shirakata <argrath@ub32.org>
.\" Updated Thu Mar 24 JST 2005 by Kentaro Shirakata <argrath@ub32.org>
.\" Updated Wed Jul 30 JST 2008 by Kentaro Shirakata <argrath@ub32.org>
.\"
.\"WORD:	permission	許可属性
.\"WORD:	resolve		(パス名を) 解決する
.\"
.TH MKDIR 2 2008-05-13 "Linux" "Linux Programmer's Manual"
.SH 名前
mkdir \- ディレクトリを作成する
.SH 書式
.nf
.B #include <sys/stat.h>
.B #include <sys/types.h>
.\" .B #include <unistd.h>
.sp
.BI "int mkdir(const char *" pathname ", mode_t " mode );
.fi
.SH 説明
.BR mkdir ()
は
.I pathname
で示される名前のディレクトリを作成しようとする。

.I mode
引き数は、作成されたディレクトリの許可属性を決定するのに使われる。
この値に、通常通りプロセスの
.I umask
による修正が加えられる。
したがって、作成されたディレクトリの許可属性は
.RI ( mode " & ~" umask " & 0777)"
となる。
作成されたディレクトリのその他のモードビットはオペレーティングシステムに
依存する。Linux の場合は、以下の通りである。

新しく作成されたディレクトリの所有者はプロセスの実効ユーザ ID に設定される。
新たに作成されたディレクトリが含まれる親ディレクトリに
set group ID ビットがセットされていたり、ファイルシステムが BSD の
グループセマンティクス
.RI ( "mount -o bsdgroups"
あるいは、同じ意味の
.IR "mount -o grpid" )
に従ってマウントされている場合には、
新たに作成されたディレクトリのグループ所有権は親ディレクトリの
ものが継承される (親ディレクトリと同じになる)。
それ以外の場合は、グループ所有権はプロセスの実効グループ ID となる。

もし親ディレクトリに set group ID ビットがセットされていれば新しく作成される
ディレクトリにも set group ID ビットがセットされる。
.SH 返り値
.BR mkdir ()
は成功した場合 0 を、失敗した場合 \-1 を返す (また、
.I errno
がエラーの内容にしたがって適切に設定される)。
.SH エラー
.TP
.B EACCES
プロセスが親ディレクトリへの書き込み許可を持たない、もしくは
.I pathname
中のディレクトリのどれかに検索許可属性が無い
.RB ( path_resolution (7)
も参照)。
.TP
.B EEXIST
.I pathname
が既に存在している(ただしそれがディレクトリであるとは限らない)。
.I pathname
がシンボリックリンクの場合も
(その指定先が存在するかどうかに関らず)エラーになる。
.TP
.B EFAULT
.I pathname
がそのプロセスのアクセス可能なアドレス空間の外を指している。
.TP
.B ELOOP
パス名
.I pathname
を解決するときに、解決すべきシンボリックリンクが多すぎた。
.TP
.B ENAMETOOLONG
.I pathname
が長すぎる。
.TP
.B ENOENT
.I pathname
の構成要素のディレクトリのいずれかが存在しないか、
またはリンク先が存在しないシンボリックリンクである。
.TP
.B ENOMEM
カーネルに、利用できるメモリが不足している。
.TP
.B ENOSPC
.I pathname
を含むデバイスに新たにディレクトリを作成する空きが無い。
.TP
.B ENOSPC
.\"?? ENOSPC がダブっているけど...
もしくはユーザーのディスク quota が使い切られているため、
新たにディレクトリを作成することができない。
.TP
.B ENOTDIR
.I pathname
中のディレクトリ部分が実際にはディレクトリでない。
.TP
.B EPERM
.I pathname
を含むファイルシステムがディレクトリの作成をサポートしていない。
.TP
.B EROFS
.I pathname
が読み出し専用ファイルシステム上のファイルを指している。
.SH 準拠
SVr4, BSD, POSIX.1-2001.
.\" SVr4 にはさらにエラーコード EIO, EMULTIHOP についての記述がある。
.SH 注意
Linux では、許可ビット以外で意味を持つのは、
.B S_ISVTX
モードビットだけである。
つまり、Linux では作成されたディレクトリは実際には
.RI ( mode " & ~" umask " & 01777)"
のモードを持つことになる。
.BR stat (2)
を参照のこと。
.PP
NFS を実現しているプロトコルには多くの不備が存在し、
それら中には
.BR mkdir ()
に影響を与えるものもある。
.SH 関連項目
.BR mkdir (1),
.BR chmod (2),
.BR chown (2),
.BR mkdirat (2),
.BR mknod (2),
.BR mount (2),
.BR rmdir (2),
.BR stat (2),
.BR umask (2),
.BR unlink (2),
.BR path_resolution (7)
