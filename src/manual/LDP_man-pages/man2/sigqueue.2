.\" Copyright (c) 2002 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" added note on self-signaling, aeb, 2002-06-07
.\" added note on CAP_KILL, mtk, 2004-06-16
.\"
.\" Japanese Version Copyright (c) 2002, 2005 Yuichi SATO
.\"         all rights reserved.
.\" Translated 2002-08-06, Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated & Modified 2005-01-08, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated 2007-09-08, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v2.64
.\"
.TH SIGQUEUE 2 2007-07-26 "Linux" "Linux Programmer's Manual"
.SH 名前
sigqueue, rt_sigqueueinfo \- シグナルとデータをプロセスに送る
.SH 書式
.B #include <signal.h>
.sp
.BI "int sigqueue(pid_t " pid ", int " sig ", const union sigval " value );
.sp
.in -4n
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.BR sigqueue ():
_POSIX_C_SOURCE\ >=\ 199309L
.SH 説明
.BR sigqueue ()
は
.I sig
で指定されたシグナルを、PID が
.I pid
であるプロセスに送る。
シグナルを送るのに必要な権限は
.BR kill (2)
と同じである。
.BR kill (2)
と同様に、ヌル・シグナル (0) を使って
指定した PID のプロセスが存在するかをチェックすることができる。
.PP
.I value
引き数はシグナルと一緒に送るデータの付属アイテムを指定する。
.I value
は (整数またはポインタの値であり) 以下のような型である。
.sp
.in +4n
.nf
union sigval {
    int   sival_int;
    void *sival_ptr;
};
.fi
.in

受取先のプロセスに、このシグナルに対するハンドラを
.RB ( sigaction (2)
に
.B SA_SIGINFO
を指定して) インストールしておくと、
そのハンドラの第 2 引き数に渡される
.I siginfo_t
構造体の
.I si_value
フィールドによって、このデータを取得できる。
さらに、この構造体の
.I si_code
フィールドは
.B SI_QUEUE
に設定される。
.SH 返り値
成功した場合、
.BR sigqueue ()
は 0 を返す。
これは受け取り側プロセスの待ち行列に
シグナルが正しく入れられたことを示す。
失敗した場合は \-1 が返され、
.I errno
がエラーを表す値に設定される。
.SH エラー
.TP
.B EAGAIN
待ち行列に入れられるシグナルの最大数に達した
(より詳しい情報は
.BR signal (7)
を参照すること)。
.TP
.B EINVAL
.I sig
が不正である。
.TP
.B EPERM
このプロセスには、受け取り側プロセスにシグナルを送る権限がない。
必要な権限については、
.BR kill (2)
を参照すること。
.TP
.B ESRCH
.I pid
にマッチする PID のプロセスがない。
.SH バージョン
このシステムコールは Linux 2.2 で初めて登場した。
.SH 準拠
POSIX.1-2001.
.SH 注意
この関数を呼び出したプロセスにこの関数がシグナルを送ったときに、
シグナルが呼び出し側スレッドにブロックされず、
かつ (シグナルがブロックされなかった、または
.BR sigwait (3)
を使用するのを待っていることにより)
このシグナルを扱うスレッドが何もない場合は、
この関数がリターンする前に、少なくとも
そのスレッドに対してシグナルが配送されていなければならない。

Linux では、呼び出されるシステムコールの名前は実際には
.BR rt_sigqueueinfo ()
である。
.BR rt_sigqueueinfo ()
では 3 番目の引き数に違いがあり、
.I siginfo_t
構造体である。
.I siginfo_t
構造体は、シグナルを受信するプロセスのシグナルハンドラに渡されたり、
シグナル受信プロセスの
.BR sigtimedwait (2)
システムコールから返されたりする。
glibc の
.BR sigqueue ()
ラッパー関数内部では、
この引き数
.I info
は以下のように初期化される。
.in +4n
.nf

info.si_signo = sig;      /* argument supplied to sigqueue() */
info.si_code = SI_QUEUE;
info.si_pid = getpid();   /* Process ID of sender */
info.si_uid = getuid();   /* Real UID of sender */
info.si_value = val;      /* argument supplied to sigqueue() */
.fi
.in
.SH 関連項目
.BR kill (2),
.BR sigaction (2),
.BR signal (2),
.BR sigwait (3),
.BR signal (7)
