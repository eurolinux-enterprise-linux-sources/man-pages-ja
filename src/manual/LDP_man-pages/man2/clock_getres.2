.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 2003 Nick Clifford (zaf@nrc.co.nz), Jan 25, 2003
.\" Copyright (c) 2003 Andries Brouwer (aeb@cwi.nl), Aug 24, 2003
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" 2003-08-23 Martin Schulze <joey@infodrom.org> improvements
.\" 2003-08-24 aeb, large parts rewritten
.\" 2004-08-06 Christoph Lameter <clameter@sgi.com>, SMP note
.\"
.\" Japanese Version Copyright (c) 2004-2005 Yuichi SATO
.\"         all rights reserved.
.\" Translated Mon Jul 19 21:28:23 JST 2004
.\"         by Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated & Modified Mon Jan 10 07:35:05 JST 2005 by Yuichi SATO
.\"
.TH CLOCK_GETRES 2 2009-02-05 "" "Linux Programmer's Manual"
.SH 名前
clock_getres, clock_gettime, clock_settime \- クロックと時間の関数
.SH 書式
.B #include <time.h>
.sp
.BI "int clock_getres(clockid_t " clk_id ", struct timespec *" res );

.BI "int clock_gettime(clockid_t " clk_id ", struct timespec *" tp );

.BI "int clock_settime(clockid_t " clk_id ", const struct timespec *" tp );
.sp
\fI\-lrt\fP とリンクする。
.sp
.in -4n
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.ad l
.BR clock_getres (),
.BR clock_gettime (),
.BR clock_settime ():
_POSIX_C_SOURCE\ >=\ 199309L
.ad b
.SH 説明
関数
.BR clock_getres ()
は
指定されたクロック
.I clk_id
の分解能 (精度) を探し出す。
.I res
が NULL でない場合、その分解能を
.I res
で指される \fIstruct timespec\fP に格納する。
クロックの分解能は実装に依存し、
特定のプロセスによって設定することはできない。
.BR clock_settime ()
の引き数
.I tp
で指される時間の値が
.I res
の倍数でない場合、
.I res
の倍数に切り詰められる。
.PP
関数
.BR clock_gettime ()
と
.BR clock_settime ()
は、指定されたクロック
.I clk_id
の時間を取得または設定する。
.PP
.I res
と
.I tp
引き数は
.I timespec
構造体であり、
.I <time.h>
で以下のように規定されている:
.sp
.in +4n
.nf
struct timespec {
    time_t   tv_sec;        /* seconds */
    long     tv_nsec;       /* nanoseconds */
};
.fi
.in
.PP
.I clk_id
引き数は特定のクロックの識別子であり、そのクロックで動作する。
クロックはシステム全体に適用することもでき、
その場合は全てのプロセスから見ることができる。
また 1 つのプロセス内でのみ時間を計測する場合は、
プロセス毎に適用することもできる。
.LP
全ての実装においてシステム全体のリアルタイムクロックがサポートされ、
.B CLOCK_REALTIME
で識別される。
時間は紀元 (the Epoch) からの秒とナノ秒で表される。
時間が変更された場合、相対的な時間間隔のタイマは影響を受けないが、
絶対的な時点のタイマは影響を受ける。
.LP
さらにいくつかのクロックが実装されているかもしれない。
対応する時間の値を解釈する方法とタイマへの影響は、定められていない。
.LP
glibc と Linux カーネルの最新のバージョンでは、
以下のような十分なクロックがサポートされている。
.TP
.B CLOCK_REALTIME
システム全体のリアルタイムクロック。
このクロックを設定するには適切な特権が必要である。
.TP
.B CLOCK_MONOTONIC
いくつかの開始点が指定されていないため、
クロックがモノトニックタイムを設定したり表現したりできない。
.TP
.BR CLOCK_MONOTONIC_RAW " (Linux 2.6.28 以降; Linux 特有)"
.\" Added in commit 2d42244ae71d6c7b0884b5664cf2eda30fb2ae68, John Stultz
.B CLOCK_MONOTONIC
と同様だが、NTP による調整の影響を受けない、ハードウェアによる
生の時刻へのアクセスができる。
.TP
.B CLOCK_PROCESS_CPUTIME_ID
CPU による高分解能のプロセス毎のタイマ。
.TP
.B CLOCK_THREAD_CPUTIME_ID
スレッド固有の CPU タイムクロック。
.SH 返り値
.BR clock_gettime (),
.BR clock_settime (),
.BR clock_getres ()
は成功した場合に 0 を返し、失敗した場合に \-1 を返す
(失敗した場合、
.I errno
が適切に設定される)。
.SH エラー
.TP
.B EFAULT
.I tp
がアクセス可能なアドレス空間の外を指した。
.TP
.B EINVAL
指定された
.I clk_id
がこのシステムでサポートされていない。
.TP
.B EPERM
指示されたクロックを設定する権限が
.BR clock_settime ()
にない。
.SH 準拠
SUSv2, POSIX.1-2001.
.SH 可用性
これらの関数が利用可能な POSIX システムでは、\fI<unistd.h>\fP においてシンボル
.B _POSIX_TIMERS
が 0 より大きい値に定義されている。
シンボル
.BR _POSIX_MONOTONIC_CLOCK ,
.BR _POSIX_CPUTIME ,
.B _POSIX_THREAD_CPUTIME
は
.BR CLOCK_MONOTONIC ,
.BR CLOCK_PROCESS_CPUTIME_ID ,
.B CLOCK_THREAD_CPUTIME_ID
が利用可能なことを示す。
.RB ( sysconf (3)
も参照すること。)
.SH 注意
.SS "SMP システムについての注意"
.B CLOCK_PROCESS_CPUTIME_ID
と
.B CLOCK_THREAD_CPUTIME_ID
クロックは、CPU からのタイマ
(i386 上の TSC、Itanium 上の AR.ITC) を用いて実現されている。
これらのレジスタは CPU 間で異なる可能性があり、
プロセスが他の CPU に移動させられた場合、
結果としてこれらのクロックが\fB偽の結果\fR
(bogus results) を返すかもしれない。
.PP
SMP システムの各 CPU が別々のクロック源を持つ場合、
タイマレジスタ間の相互関係を管理する方法はない。
これは各 CPU が微妙に異なる周波数で動作するためである。
これが真実の場合 (訳註: 各 CPU が別々のクロック源を持つ場合)、
.I clock_getcpuclockid(0)
は
.B ENOENT
を返して、その状況を表す。
2 つのクロックは、プロセスが特定の CPU 上に留まっていることが
保証できる場合にのみ有効である。
.PP
SMP システムの各プロセッサは全く同じ時刻に起動する訳ではないので、
各タイマレジスタは通常はあるオフセットで動作している。
オフセットをブート時に制限するコードが含まれるアーキテクチャもある。
しかし、このコードがオフセットを正確に調整することは保証できない。
glibc は (Linux カーネルとは異なり) オフセットを扱うためのコードを提供しない。
通常はこれらのオフセットが小さいので、多くの場合でその影響は無視できる。
.SH バグ
POSIX.1-2001 では、クロック
.B CLOCK_PROCESS_CPUTIME_ID
と
.B CLOCK_THREAD_CPUTIME_ID
は
.BR clock_settime ()
により設定可能にすべきとされている。
しかし、これらのクロックは現在のところ
.\" Linux 2.6.28
そうなっていない。
.\" FIXME . Track the following bug report
.\" http://bugzilla.kernel.org/show_bug.cgi?id=11972
.SH 関連項目
.BR date (1),
.BR adjtimex (2),
.BR gettimeofday (2),
.BR settimeofday (2),
.BR time (2),
.BR clock_getcpuclockid (3),
.BR ctime (3),
.BR ftime (3),
.BR pthread_getcpuclockid (3),
.BR sysconf (3),
.BR time (7)
