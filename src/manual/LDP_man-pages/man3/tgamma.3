.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\" Distributed under GPL
.\" Based on glibc infopages
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\" Modified 2004-11-15, fixed error noted by Fabian Kreutz
.\"	 <kreutz@dbs.uni-hannover.de>
.\"
.\" Japanese Version Copyright (c) 2002 Akihiro MOTOKI
.\"         all rights reserved.
.\" Translated Sun Sep 22 09:31:52 2002
.\"         by Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated & Modified Sat Feb 12 12:00:00 2005
.\"         by SAITOH Akira <s-akira@users.sourceforge.net>
.\" Updated 2008-09-16, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.TH TGAMMA 3 2008-08-11 "GNU" "Linux Programmer's Manual"
.SH 名前
tgamma, tgammaf, tgammal \- 本当のガンマ関数
.SH 書式
.B #include <math.h>
.sp
.BI "double tgamma(double " x );
.br
.BI "float tgammaf(float " x );
.br
.BI "long double tgammal(long double " x );
.sp
\fI\-lm\fP でリンクする。
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR tgamma (),
.BR tgammaf (),
.BR tgammal ():
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE; or
.I cc\ -std=c99
.ad b
.SH 説明
ガンマ関数は以下のように定義される:
.sp
     Gamma(x) = t^(x\-1) e^\-t dt の 0 から無限大までの積分
.sp
この関数は正でない整数を除くすべての実数に対して定義されている。
非負の整数 \fIm\fP に関して、以下が成立する:
.sp
    Gamma(m+1) = m!
.sp
より一般的には、すべての \fIx\fP に関して以下が成立する:
.sp
    Gamma(x+1) = x * Gamma(x)
.sp
さらに、極を除くすべての \fIx\fP で次式も成立する:
.sp
    Gamma(x) * Gamma(1 \- x) = PI / sin(PI * x)
.PP
.SH 返り値
成功すると、これらの関数は Gamma(x) を返す。

.I x
が NaN の場合、NaN が返される。

.I x
が正の無限大の場合、正の無限大が返される。

.I x
が負の整数か負の無限大の場合、領域エラー (domain error) が発生し、
NaN が返される。

結果がオーバーフローする場合、範囲エラー (range error) が発生し、
各関数はそれぞれ
.BR HUGE_VAL ,
.BR HUGE_VALF ,
.BR HUGE_VALL ,
を返す。この際、数学的に正しい符号が付与される。

結果がアンダーフローする場合、範囲エラー (range error) が発生し、
関数は 0 をを返す。この際、数学的に正しい符号が付与される。

.I x
が \-0 か +0 の場合、極エラー (pole error) が発生し、
各関数はそれぞれ
.BR HUGE_VAL ,
.BR HUGE_VALF ,
.BR HUGE_VALL ,
を返す。
0 と同じ符号が付与される。
.SH エラー
これらの関数を呼び出した際にエラーが発生したかの判定方法についての情報は
.BR math_error (7)
を参照のこと。
.PP
以下のエラーが発生する可能性がある。
.TP
領域エラー: \fIx\fP が負の整数か負の無限大
.\" FIXME . errno is not set to EDOM for x == -inf
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6809
.I errno
に
.B EDOM
が設定される。
不正 (invalid) 浮動小数点例外
.RB ( FE_INVALID )
が上がる (「バグ」の節を参照)。
.TP
極エラー (pole error): \fIx\fP が +0 か \-0
.I errno
に
.B ERANGE
が設定される。
0 による除算 (divide-by-zero) 浮動小数点例外
.RB ( FE_DIVBYZERO )
が上がる。
.TP
範囲エラー (range error): 結果のオーバーフロー
.I errno
に
.B ERANGE
が設定される。
オーバーフロー浮動小数点例外
.RB ( FE_OVERFLOW )
が上がる。
.PP
glibc では、C99 や POSIX.1-2001 で規定されていない以下のエラーも
起こり得る。
.TP
範囲エラー (range error): 結果のアンダーフロー
.\" e.g., tgamma(-172.5) on glibc 2.8/x86-32
.\" .I errno
.\" is set to
.\" .BR ERANGE .
アンダーフロー浮動小数点例外
.RB ( FE_UNDERFLOW )
が上がる。
この場合は
.I errno
は設定されない。
.\" FIXME . Is it intentional that errno is not set:
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6810
.\"
.\" glibc (as at 2.8) also supports and an inexact
.\" exception for various cases.
.SH バージョン
これらの関数は glibc バージョン 2.1 で初めて登場した。
.SH 準拠
C99, POSIX.1-2001.
.SH 注意
この関数を「本当の (true) ガンマ関数」と呼ばなければならなかった。
なぜなら、他の値を返す
.BR gamma (3)
という関数がすでに存在するからである (詳細については
.BR gamma (3)
を参照)。
.SH バグ
.I x
が負の無限大の場合、
.I errno
は設定されない
.RB ( EDOM
が設定されるべきである)。
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6809

glibc バージョン 2.3.3 以前では、
引き数に +0 や \-0 を渡すと、極エラーではなく、
領域エラーを間違って発生していた
(領域エラーの場合、
.I errno
に
.B EDOM
を設定され、
.B FE_INVALID
例外が発生する)。
.SH 関連項目
.BR gamma (3),
.BR lgamma (3)
