.\" Copyright 2002 walter harms (walter.harms@informatik.uni-oldenburg.de)
.\" Distributed under GPL
.\" based on the description in glibc source and infopages
.\"
.\" Corrections and additions, aeb
.\"
.\" Japanese Version Copyright (c) 2002 Akihiro MOTOKI, all rights reserved.
.\" Translated Mon Feb  2 2003 by Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.TH ARGZ_ADD 3 2007-05-18  "" "Linux Programmer's Manual"
.SH 名前
argz_add, argz_add_sep, argz_append, argz_count, argz_create,
argz_create_sep, argz_delete, argz_extract, argz_insert,
argz_next, argz_replace, argz_stringify \- argz リストを操作するための関数群
.SH 書式
.nf
.B "#include <argz.h>"
.sp
.BI "error_t argz_add(char **" argz ", size_t *" argz_len \
", const char *" str );
.sp
.BI "error_t argz_add_sep(char **" argz ", size_t *" argz_len ,
.ti 20n
.BI "const char *" str ", int " delim );
.sp
.BI "error_t argz_append(char **" argz ", size_t *" argz_len ,
.ti 20n
.BI "const char *" buf ", size_t " buf_len );
.sp
.BI "size_t argz_count(const char *" argz ", size_t " argz_len );
.sp
.BI "error_t argz_create(char * const " argv "[], char **" argz ,
.ti 20n
.BI "size_t *" argz_len );
.sp
.BI "error_t argz_create_sep(const char *" str ", int " sep ", char **" argz ,
.ti 20n
.BI "size_t *" argz_len );
.sp
.BI "error_t argz_delete(char **" argz ", size_t *" argz_len ", char *" entry );
.sp
.BI "void argz_extract(char *" argz ", size_t " argz_len ", char  **" argv );
.sp
.BI "error_t argz_insert(char **" argz ", size_t *" argz_len ", char *" before ,
.ti 20n
.BI "const char *" entry );
.sp
.BI "char *argz_next(char *" argz ", size_t " argz_len ", const char *" entry );
.sp
.BI "error_t argz_replace(char **" argz ", size_t *" argz_len \
", const char *" str ,
.ti 20n
.BI "const char *" with ", unsigned int *" replace_count );
.sp
.BI "void argz_stringify(char *" argz ", size_t " len ", int " sep );
.fi
.SH 説明
これらの関数は glibc 固有である。
.LP
argz vector は長さ情報付きの文字バッファへのポインタである。
文字バッファでは、複数の文字列が NULL バイト (\\(aq\\0\\(aq) で区切られており、
文字列の配列として解釈されるようになっている。
長さが 0 でない場合、バッファの最後のバイトは NULL バイトでなければならない。
.LP
これらの関数は argz vector を操作するためのものである。
ペア (NULL,0) は argz vector であり、逆に言えば
長さ 0 の argz vectorは NULL ポインタを持たなければならない。
空でない argz vector の割り当ては
.BR malloc (3)
を使って行われる。したがって、argz vector を解放するのに
.BR free (3)
を使うことができる。
.LP
.BR argz_add ()
は、文字列
.I str
を配列
.IR *argz
の末尾に追加し、
.IR *argz
と
.IR *argz_len
を更新する。
.LP
.BR argz_add_sep ()
も同様の動作をするが、区切り文字
.I delim
にしたがって文字列
.I str
を複数の文字列に分割する点が異なる。
例えば、区切り文字 \\(aq:\\(aq を指定して、Unix サーチ・パスに対して
この関数を使うことができるだろう。
.LP
.BR argz_append ()
は argz vector
.RI ( buf ,\  buf_len )
の後ろに
.RI (* argz ,\  *argz_len )
を付け加え、
.I *argz
と
.I *argz_len
を更新する。
(したがって、
.I *argz_len
は
.I buf_len
だけ増加する。)
.LP
.BR argz_count ()
は
.RI ( argz ,\  argz_len )
内の文字列の数を数える。実際には NULL バイト (\\(aq\\0\\(aq) の数を数えている。
.LP
.BR argz_create ()
は、Unix 流の引き数ベクトルである
.RI ( "(char *) 0"
で終端される)
.I argv
を、argz vector
.RI ( *argz ,\  *argz_len )
に変換する。
.LP
.BR argz_create_sep ()
は、NULL 終端された文字列
.I str
を区切り文字
.I sep
が現れる毎に分割しながら、argz vector
.RI (* argz ,\  *argz_len )
に変換する。
.LP
.BR argz_delete ()
は、
.I entry
で指し示された文字列を argz vector
.RI ( *argz ,\  *argz_len )
から削除し、
.I *argz
と
.I *argz_len
を更新する。
.LP
.BR argz_extract ()
は
.BR argz_create ()
の反対の操作を行う。argz vector
.RI ( argz ,\  argz_len )
を調べ、
.I argv
から始まる配列をサブ文字列へのポインタで埋めていき、
一番最後に NULL を入れて、Unix 流の argv ベクトルを作成する。
配列
.I argv
は
.IR argz_count ( argz , argz_len ") + 1"
個のポインタを収容できる空間を持っていなければならない。
.LP
.BR argz_insert ()
は
.BR argz_delete ()
の反対の操作を行う。argz vector
.RI ( *argz ,\  *argz_len )
の位置
.I before
に引き数
.I entry
を挿入し、
.I *argz
と
.I *argz_len
を更新する。
.I before
が NULL の場合、
.I entry
は末尾に挿入される。
.LP
.BR argz_next ()
は argz vector を順番に調べるための関数である。
.I entry
が NULL の場合、最初のエントリを返す。
そうでない場合、次のエントリを返す。
次のエントリがない場合、NULL を返す。
.LP
.BR argz_replace ()
は、
.I str
をすべて
.I with
で置き換える (必要に応じて argz の再割り当てを行う)。
.I replace_count
が NULL でない場合、
.I *replace_count
を置き換えを行った数だけ増やす。
.LP
.BR argz_stringify ()
は
.BR argz_create_sep ()
の反対の操作を行う。
末尾の NULL バイト以外の全ての NULL バイト (\\(aq\\0\\(aq) を
.I sep
で置き換えて、
argz vector を通常の文字列に変換する。
.SH 返り値
メモリ割り当てを行う argz 関数群はすべて \fIerror_t\fP 型の返り値を持つ。
成功した場合は 0 を返し、割り当てエラーが発生した場合は
\fBENOMEM\fP を返す。
.SH 準拠
これらの関数は GNU による拡張である。注意して使用すること。
.SH バグ
NULL バイトで終端されていない argz vector を使用した場合、
segmentation fault を起こすかもしれない。
.SH 関連項目
.BR envz_add (3)
