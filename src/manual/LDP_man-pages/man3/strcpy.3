.\" Copyright (C) 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:06:49 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Fri Aug 25 23:17:51 1995 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Wed Dec 18 00:47:18 1996 by Andries Brouwer (aeb@cwi.nl)
.\" 2007-06-15, Marc Boyer <marc.boyer@enseeiht.fr> + mtk
.\"     Improve discussion of strncpy().
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH STRCPY 3 2012\-07\-19 GNU "Linux Programmer's Manual"
.SH 名前
strcpy, strncpy \- 文字列をコピーする
.SH 書式
.nf
\fB#include <string.h>\fP
.sp
\fBchar *strcpy(char *\fP\fIdest\fP\fB, const char *\fP\fIsrc\fP\fB);\fP
.sp
\fBchar *strncpy(char *\fP\fIdest\fP\fB, const char *\fP\fIsrc\fP\fB, size_t \fP\fIn\fP\fB);\fP
.fi
.SH 説明
The \fBstrcpy\fP()  function copies the string pointed to by \fIsrc\fP, including
the terminating null byte (\(aq\e0\(aq), to the buffer pointed to by
\fIdest\fP.  The strings may not overlap, and the destination string \fIdest\fP
must be large enough to receive the copy.  \fIBeware of buffer overruns!\fP
(See BUGS.)
.PP
\fBstrncpy\fP()  関数も同様だが、 \fIsrc\fP のうち最大でも \fIn\fP バイトしかコピーされない点が異なる。 \fB警告\fP: \fIsrc\fP
の最初の \fIn\fP バイトの中にヌルバイトがない場合、 \fIdest\fP に格納される文字列はヌルで終端されないことになる。
.PP
If the length of \fIsrc\fP is less than \fIn\fP, \fBstrncpy\fP()  writes additional
null bytes to \fIdest\fP to ensure that a total of \fIn\fP bytes are written.
.PP
\fBstrncpy\fP()  の簡単な実装は以下のような感じであろう:
.in +4n
.nf

char *
strncpy(char *dest, const char *src, size_t n)
{
    size_t i;

    for (i = 0; i < n && src[i] != \(aq\e0\(aq; i++)
        dest[i] = src[i];
    for ( ; i < n; i++)
        dest[i] = \(aq\e0\(aq;

    return dest;
}
.fi
.in
.SH 返り値
\fBstrcpy\fP()  関数と \fBstrncpy\fP()  関数は 受け側の文字列\fIdest\fPへのポインタを返す。
.SH 準拠
SVr4, 4.3BSD, C89, C99.
.SH 注意
\fBstrncpy\fP()  は効率的でなく間違いを起こしやすいと考えるプログラマもいるだろう。 プログラマが \fIdest\fP の大きさが \fIsrc\fP
の長さよりも 大きいことを知っている (つまり、そのことをチェックするコードを 書いている) 場合は、 \fBstrcpy()\fP を使うことができる。

One valid (and intended) use of \fBstrncpy\fP()  is to copy a C string to a
fixed\-length buffer while ensuring both that the buffer is not overflowed
and that unused bytes in the target buffer are zeroed out (perhaps to
prevent information leaks if the buffer is to be written to media or
transmitted to another process via an interprocess communication technique).

If there is no terminating null byte in the first \fIn\fP bytes of \fIsrc\fP,
\fBstrncpy\fP()  produces an unterminated string in \fIdest\fP.  You can force
termination using something like the following:
.in +4n
.nf

strncpy(buf, str, n);
if (n > 0)
    buf[n \- 1]= \(aq\e0\(aq;
.fi
.in
.PP
(Of course, the above technique ignores the fact that information contained
in \fIsrc\fP is lost in the copying to \fIdest\fP.)

Some systems (the BSDs, Solaris, and others) provide the following function:

    size_t strlcpy(char *dest, const char *src, size_t size);

.\" http://static.usenix.org/event/usenix99/full_papers/millert/millert_html/index.html
.\"     "strlcpy and strlcat - consistent, safe, string copy and concatenation"
.\"     1999 USENIX Annual Technical Conference
.\" https://lwn.net/Articles/506530/
This function is similar to \fBstrncpy\fP(), but it copies at most \fIsize\-1\fP
bytes to \fIdest\fP, always adds a terminating null byte, and does not pad the
target with (further) null bytes.  This function fixes some of the problems
of \fBstrcpy\fP()  and \fBstrncpy\fP(), but the caller must still handle the
possibility of data loss if \fIsize\fP is too small.  The return value of the
function is the length of \fIsrc\fP, which allows truncation to be easily
detected: if the return value is greater than or equal to \fIsize\fP,
truncation occurred.  If loss of data matters, the caller \fImust\fP either
check the arguments before the call, or test the function return value.
\fBstrlcpy\fP()  is not present in glibc and is not standardized by POSIX, but
is available on Linux via the \fIlibbsd\fP library.
.SH バグ
\fBstrcpy\fP()  の受け側の文字列が十分な大きさでない場合、何が起こるかわからない。
固定長文字列を溢れさせるのは、マシンの制御を掌中に収めるために クラッカーが好んで使うテクニックである。
プログラムでデータをバッファに読み込んだりコピーしたりする場合には、 必ずまず最初に十分な大きさがあるかどうかをチェックする必要がある。
プログラマがオーバーフローが不可能だと示せる場合には このチェックは不要かもしれないが、十分注意すること。
長い間には、不可能だったことが可能になるような方法でプログラムが 変更されることもあるからだ。
.SH 関連項目
\fBbcopy\fP(3), \fBmemccpy\fP(3), \fBmemcpy\fP(3), \fBmemmove\fP(3), \fBstpcpy\fP(3),
\fBstpncpy\fP(3), \fBstrdup\fP(3), \fBstring\fP(3), \fBwcscpy\fP(3), \fBwcsncpy\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.51 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
