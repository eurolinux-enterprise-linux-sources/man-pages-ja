'\" t
.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Japanese Version Copyright (c) 2006 Akihiro MOTOKI all rights reserved.
.\" Translated 2006-04-18, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.TH SEM_WAIT 3 2009-02-09 "Linux" "Linux Programmer's Manual"
.SH 名前
sem_wait, sem_timedwait, sem_trywait \- セマフォをロックする
.SH 書式
.nf
.B #include <semaphore.h>
.sp
.BI "int sem_wait(sem_t *" sem );
.sp
.BI "int sem_trywait(sem_t *" sem );
.sp
.BI "int sem_timedwait(sem_t *" sem ", const struct timespec *" abs_timeout );
.fi
.sp
.sp
\fI\-lrt\fP または \fI\-pthread\fP でリンクする。
.in -4n
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.BR sem_timedwait ():
_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600
.SH 説明
.BR sem_wait ()
は
.I sem
が指すセマフォの値を 1 減らす (ロックする)。
セマフォの値が 0 より大きい場合、減算が実行され、関数は直ちに復帰する。
セマフォの現在値が 0 の場合には、減算を実行できるようになる
(つまり、セマフォの値が 0 より大きな値になる) まで、もしくは
シグナルハンドラによって呼び出しが中断されるまで、
関数呼び出しは停止 (block) する。

.BR sem_trywait ()
は
.BR sem_wait ()
と同じだが、セマフォ値の減算をすぐに実行できなかった場合に、
停止 (block) するのではなくエラーで復帰する
.RI ( errno
に
.B EAGAIN
がセットされる) 点が異なる。

.BR sem_timedwait ()
は
.BR sem_wait ()
と同じだが、セマフォ値の減算をすぐに実行できなかった場合に
関数呼び出しが停止する時間の上限を
.I abs_timeout
で指定する点が異なる。
.I abs_timeout
引き数は、タイムアウト時刻を指定する構造体へのポインタである。
この構造体には、タイムアウト時刻を時刻紀元 (Epoch; 1970 年 1 月 1 日
00:00:00) からの経過時間 (秒＋ナノ秒) で指定する。
構造体は以下のように定義されている:

.nf
.in +4n
struct timespec {
    time_t tv_sec;      /* Seconds */
    long   tv_nsec;     /* Nanoseconds [0 .. 999999999] */
};
.in
.fi
.PP
関数呼び出し時点ですでにタイムアウトに指定した時刻が過ぎており、
かつセマフォをすぐにロックできなかった場合は、
.BR sem_timedwait ()
はタイムアウトエラー
.RI ( errno
に
.B ETIMEDOUT
がセットされる) で失敗する。

セマフォ操作がすぐに実行できるときは、
.I abs_timeout
がどんな値であっても
.BR sem_timedwait ()
が失敗することは決してない。さらにいうと、この場合には
.I abs_timeout
の正当性の検査は行われない。
.SH 返り値
成功すると、これらの関数は 0 を返す。
エラーの場合、セマフォの値を変更せずに、\-1 を返し、
.I errno
にエラーを示す値をセットする。
.SH エラー
.TP
.B EINTR
呼び出しはシグナルハンドラにより中断された。
.BR signal (7)
参照。
.TP
.B EINVAL
.I sem
は有効なセマフォでない。
.PP
.BR sem_trywait ()
の場合には、上記に加えて以下のエラーも起こる。
.TP
.B EAGAIN
停止 (block) せずにロック操作を完了できなかった (つまり、
セマフォの現在の値が 0 であった)。
.PP
.BR sem_timedwait ()
の場合、以下のエラーも起こる。
.TP
.B EINVAL
.I abs_timeout.tv_nsecs
の値が 0 未満、もしくは 1,000,000,000 以上である。
.TP
.B ETIMEDOUT
セマフォのロックに成功する前に時間切れとなった。
.\" POSIX.1-2001 ではエラーとして EDEADLK も用意している。
.\" これはデッドロック条件を検出したことを示すものだが、
.\" Linux で発生することはない(?)
POSIX.1-2001.
.SH 注意
シグナルハンドラは、
.BR sigaction (2)
の
.B SA_RESTART
フラグを使用しているかどうかに関わらず、これらの関数の呼び出しが
停止している場合、シグナルハンドラにより常に中断される。
.\" sem_wait() は他のほとんどの実装では常に中断されるが、
.\" FreeBSD 5.4 では SA_RESTART を指定しておくと実行が再開される。
.SH 例
.PP
以下に示す (ちょっとした) プログラムは名前なしセマフォの操作を行う。
プログラムはコマンドライン引き数を 2 つ取る。
最初の引き数には、
.B SIGALRM
シグナルを生成するためのアラームタイマーの設定に使われる値を
秒単位で指定する。このシグナルハンドラは、
.I main()
内で
.BR sem_timedwait ()
を使って待っているセマフォを、
.BR sem_post (3)
を使って加算する。
2番目の引き数には、
.BR sem_timedwait ()
に渡すタイムアウトまでの時間を秒単位で指定する。

.in +4n
.nf
.RB "$" " ./a.out 2 3"
About to call sem_timedwait()
sem_post() from handler
sem_getvalue() from handler; value = 1
sem_timedwait() succeeded
.RB "$" " ./a.out 2 1"
About to call sem_timedwait()
sem_timedwait() timed out
.fi
.in
.SS プログラムのソース
\&
.nf
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>
#include <time.h>
#include <assert.h>
#include <errno.h>
#include <signal.h>

sem_t sem;

#define handle_error(msg) \\
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

static void
handler(int sig)
{
    write(STDOUT_FILENO, "sem_post() from handler\\n", 24);
    if (sem_post(&sem) == \-1) {
        write(STDERR_FILENO, "sem_post() failed\\n", 18);
        _exit(EXIT_FAILURE);
    }
}

int
main(int argc, char *argv[])
{
    struct sigaction sa;
    struct timespec ts;
    int s;

    if (argc != 3) {
        fprintf(stderr, "Usage: %s <alarm\-secs> <wait\-secs>\\n",
                argv[0]);
        exit(EXIT_FAILURE);
    }

    if (sem_init(&sem, 0, 0) == \-1)
        handle_error("sem_init");

    /* Establish SIGALRM handler; set alarm timer using argv[1] */

    sa.sa_handler = handler;
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = 0;
    if (sigaction(SIGALRM, &sa, NULL) == \-1)
        handle_error("sigaction");

    alarm(atoi(argv[1]));

    /* Calculate relative interval as current time plus
       number of seconds given argv[2] */

    if (clock_gettime(CLOCK_REALTIME, &ts) == \-1)
        handle_error("clock_gettime");

    ts.tv_sec += atoi(argv[2]);

    printf("main() about to call sem_timedwait()\\n");
    while ((s = sem_timedwait(&sem, &ts)) == \-1 && errno == EINTR)
        continue;       /* Restart if interrupted by handler */

    /* Check what happened */

    if (s == \-1) {
        if (errno == ETIMEDOUT)
            printf("sem_timedwait() timed out\\n");
        else
            perror("sem_timedwait");
    } else
        printf("sem_timedwait() succeeded\\n");

    exit((s == 0) ? EXIT_SUCCESS : EXIT_FAILURE);
}
.fi
.SH 関連項目
.BR clock_gettime (2),
.BR sem_getvalue (3),
.BR sem_post (3),
.BR sem_overview (7),
.BR time (7)
