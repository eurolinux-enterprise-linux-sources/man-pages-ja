.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:08:17 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-08-25, aeb
.\" Modified 2004-11-12 as per suggestion by Fabian Kreutz/AEB
.\" 2008-07-24, mtk, created this page, based on material from j0.3.
.\"
.\" Japanese Version Copyright (c) 2008  Akihiro MOTOKI
.\"         all rights reserved.
.\" Translated 2008-09-19, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.07
.\" 
.TH Y0 3  2008-08-10 "" "Linux Programmer's Manual"
.SH 名前
y0, y0f, y0l, y1, y1f, y1l, yn, ynf, ynl \-
第二種ベッセル関数
.SH 書式
.nf
.B #include <math.h>
.sp
.BI "double y0(double " x );
.br
.BI "double y1(double " x );
.br
.BI "double yn(int " n ", double " x );
.sp
.BI "float y0f(float " x );
.br
.BI "float y1f(float " x );
.br
.BI "float ynf(int " n ", float " x );
.sp
.BI "long double y0l(long double " x );
.br
.BI "long double y1l(long double " x );
.br
.BI "long double ynl(int " n ", long double " x );
.fi
.sp
\fI\-lm\fP でリンクする。
.sp
.in -4n
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.ad l
.BR y0 (),
.BR y1 (),
.BR yn ():
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE
.br
.BR y0f (),
.BR y0l (),
.BR y1f (),
.BR y1l (),
.BR ynf (),
.BR ynl ():
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\ >=\ 600
.\" Also seems to work: -std=c99 -D_XOPEN_SOURCE
.ad b
.SH 説明
.PP
関数
.BR y0 ()
と
.BR y1 ()
はそれぞれ \fIx\fP の 0 次、1 次の
第二種ベッセル関数の値を返す。
関数
.BR yn ()
は \fIx\fP の \fIn\fP 次の
第二種ベッセル関数の値を返す。
.PP
\fIx\fP は正の値でなければならない。
.PP
.BR y0f ()
群の関数、
.BR y0l ()
群の関数は、それぞれ
.I float
型、
.I "long double"
型の返り値を返す。
.SH 返り値
成功すると、これらの関数は
.I x
に対する第二種ベッセル関数の値を返す。

.I x
が NaN の場合、NaN が返される。

.I x
が負の場合、領域エラー (domain error) が発生し、
各関数はそれぞれ
.RB - HUGE_VAL ,
.RB - HUGE_VALF ,
.RB - HUGE_VALL
を返す (POSIX.1-2001 ではこの場合に NaN を返すことも認めている)。

.I x
が 0.0 の場合、極エラー (pole error) が発生し、
各関数はそれぞれ
.RB - HUGE_VAL ,
.RB - HUGE_VALF ,
.RB - HUGE_VALL
を返す。

結果がアンダーフローする場合、
範囲エラー (range error) が発生し、
各関数は 0.0 を返す。

結果がオーバーフローする場合、範囲エラーが発生し、
各関数はそれぞれ
.RB - HUGE_VAL ,
.RB - HUGE_VALF ,
.RB - HUGE_VALL
を返す (POSIX.1-2001 ではこの場合に 0.0 を返すことも認めている)。
.SH エラー
これらの関数を呼び出した際にエラーが発生したかの判定方法についての情報は
.BR math_error (7)
を参照のこと。
.PP
以下のエラーが発生する可能性がある。
.TP
領域エラー: \fIx\fP が負
.I errno
に
.B EDOM
が設定される。
不正 (invalid) 浮動小数点例外
.RB ( FE_INVALID )
が上がる。
.TP
極エラー: \fIx\fP が 0.0
.\" Before POSIX.1-2001 TC2, this was (inconsistently) specified
.\" as a range error.
.\" FIXME . y0(0.0) gives EDOM
.I errno
に
.B ERANGE
が設定される (「バグ」の節を参照のこと)。
このエラーの場合、
.BR fetestexcept (3)
は
.B FE_DIVBYZERO
例外を返さない。
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6808
.TP
範囲エラー: 結果のアンダーフロー
.\" e.g., y0(1e33) on glibc 2.8/x86-32
.I errno
に
.B ERANGE
が設定される。
.\" An underflow floating-point exception
.\" .RB ( FE_UNDERFLOW )
.\" is raised.
.\" FIXME . Is it intentional that these functions do not use FE_*?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6806
このエラーの場合、
.BR fetestexcept (3)
は
.B FE_UNDERFLOW
例外を返さない。
.TP
範囲エラー: 結果のオーバーフロー
.\" e.g., yn(10, 1e-40) on glibc 2.8/x86-32
.\" .I errno
.\" is set to
.\" .BR ERANGE .
この場合、
.I errno
は設定されない。
.\" FIXME . Is it intentional that errno is not set?
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6808
オーバーフロー浮動小数点例外
.RB ( FE_OVERFLOW )
が上がる。
.SH 準拠
.I double
型の値を返す関数は、SVr4, 4.3BSD, POSIX.1-2001
に準拠する。
それ以外は非標準の関数で、BSD にも存在する。
.SH バグ
極エラーの場合、これらの関数は
.I errno
に
.B EDOM
を設定するが、
POSIX.1-2004 では
.B ERANGE
を設定することが要求されている。
.\" FIXME .
.\" Bug raised: http://sourceware.org/bugzilla/show_bug.cgi?id=6807

glibc バージョン 2.3.2 以前では、
.\" FIXME . Actually, 2.3.2 is the earliest test result I have; so yet
.\" to confirm if this error occurs only in 2.3.2.
領域エラーが発生した場合に、これらの関数は
不正浮動小数点例外
.RB ( FE_INVALID )
を上げない。
.SH 関連項目
.BR j0 (3)
