.\" Copyright (C) 2012 Chandan Apsangi <chandan.jc@gmail.com>
.\" and Copyright (C) 2013 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH PTHREAD_SETNAME_NP 3 2013\-04\-02 Linux "Linux Programmer's Manual"
.SH 名前
pthread_setname_np, pthread_getname_np \- スレッド名のの設定/取得を行う
.SH 書式
.nf
\fB#define _GNU_SOURCE\fP             /* feature_test_macros(7) 参照 */
\fB#include <pthread.h>\fP
\fBint pthread_setname_np(pthread_t \fP\fIthread\fP\fB, const char *\fP\fIname\fP\fB);\fP
\fBint pthread_getname_np(pthread_t \fP\fIthread\fP\fB,\fP
\fB                       const char *\fP\fIname\fP\fB, size_t \fP\fIlen\fP\fB);\fP
.fi
.sp
\fI\-pthread\fP を付けてコンパイルとリンクを行う。
.SH 説明
By default, all the threads created using \fBpthread_create\fP()  inherit the
program name.  The \fBpthread_setname_np\fP()  function can be used to set a
unique name for a thread, which can be useful for debugging multithreaded
applications.  The thread name is a meaningful C language string, whose
length is restricted to 16 characters, including the terminating null byte.
The \fIthread\fP argument specifies the thread whose name is to be changed;
\fIname\fP specifies the new name.

The \fBpthread_getname_np\fP()  function can be used to retrieve the name of
the thread.  The \fIthread\fP argument specifies the thread whose name is to be
retrieved.  The buffer \fIname\fP is used to return the thread name; \fIlen\fP
specifies the number of bytes available in \fIname\fP.  The buffer specified by
\fIname\fP should be at least 16 characters in length.  The returned thread
name in the output buffer will be null terminated.
.SH 返り値
成功すると、これらの関数は 0 を返す。
エラーの場合、0 以外のエラー番号を返す。
.SH エラー
\fBpthread_setname_np\fP() は以下のエラーで失敗する場合がある。
.TP 
\fBERANGE\fP
The length of the string specified pointed to by \fIname\fP exceeds the allowed
limit.
.PP
\fBpthread_getname_np\fP() は以下のエラーで失敗する場合がある。
.TP 
\fBERANGE\fP
The buffer specified by \fIname\fP and \fIlen\fP is too small to hold the thread
name.
.PP
If either of these functions fails to open \fI/proc/self/task/[tid]/comm\fP,
then the call may fail with one of the errors described in \fBopen\fP(2).
.SH バージョン
これらの関数は glibc バージョン 2.12 で初めて登場した。
.SH 準拠
これらの関数は非標準の GNU による拡張である。
.SH 注意
\fBpthread_setname_np\fP()  internally writes to the thread specific comm file
under \fI/proc\fP filesystem: \fI/proc/self/task/[tid]/comm\fP.
\fBpthread_getname_np\fP()  retrieves it from the same location.
.SH 例
.PP
以下のプログラムは、 \fBpthread_setname_np\fP() と \fBpthread_getname_np\fP()
の使用例を示している。

以下のシェルセッションは、このプログラムの実行例である。
.in +4n
.nf

$\fB ./a.out\fP
Created a thread. Default name is: a.out
The thread name after setting it is THREADFOO.
\fB^Z\fP                           # Suspend the program
[1]+  Stopped           ./a.out
$ \fBps H \-C a.out \-o 'pid tid cmd comm'\fP
  PID   TID CMD                         COMMAND
 5990  5990 ./a.out                     a.out
 5990  5991 ./a.out                     THREADFOO
$ \fBcat /proc/5990/task/5990/comm\fP
a.out
$ \fBcat /proc/5990/task/5991/comm\fP
THREADFOO
.fi
.in
.SS プログラムのソース
\&
.nf
#define _GNU_SOURCE
#include <pthread.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <stdlib.h>

#define NAMELEN 16

#define errExitEN(en, msg) \e
            do { errno = en; perror(msg); exit(EXIT_FAILURE); \e
        } while (0)

static void *
threadfunc(void *parm)
{
    sleep(5);          // allow main program to set the thread name
    return NULL;
}

int
main(int argc, char **argv)
{
    pthread_t thread;
    int rc;
    char thread_name[NAMELEN];

    rc = pthread_create(&thread, NULL, threadfunc, NULL);
    if (rc != 0)
        errExitEN(rc, "pthread_create");

    rc = pthread_getname_np(thread, thread_name, NAMELEN);
    if (rc != 0)
        errExitEN(rc, "pthread_getname_np");

    printf("Created a thread. Default name is: %s\en", thread_name);
    rc = pthread_setname_np(thread, (argc > 1) ? argv[1] : "THREADFOO");
    if (rc != 0)
        errExitEN(rc, "pthread_setname_np");

    sleep(2);

    rc = pthread_getname_np(thread, thread_name,
                            (argc > 2) ? atoi(argv[1]) : NAMELEN);
    if (rc != 0)
        errExitEN(rc, "pthread_getname_np");
    printf("The thread name after setting it is %s.\en", thread_name);

    rc = pthread_join(thread, NULL);
    if (rc != 0)
        errExitEN(rc, "pthread_join");

    printf("Done\en");
    exit(EXIT_SUCCESS);
}
.fi
.SH 関連項目
.ad l
.nh
\fBprctl\fP(2), \fBpthread_create\fP(3), \fBpthreads\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.51 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
