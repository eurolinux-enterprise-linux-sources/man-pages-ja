.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\"     GNU texinfo documentation on glibc date/time functions.
.\" Modified Sat Jul 24 18:03:44 1993 by Rik Faith (faith@cs.unc.edu)
.\" Applied fix by Wolfgang Franke, aeb, 961011
.\" Corrected return value, aeb, 970307
.\" Added Single Unix Spec conversions and %z, aeb/esr, 990329.
.\" 2005-11-22 mtk, added Glibc Notes covering optional 'flag' and
.\"           'width' components of conversion specifications.
.\"
.\" Japanese Version Copyright (c) 2000 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated 2000-10-10, HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated 2002-01-09, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2002-01-14, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-02-26, Akihiro MOTOKI
.\" Updated 2005-04-17, Akihiro MOTOKI
.\" Updated 2005-12-05, Akihiro MOTOKI, Catch up to LDP man-pages 2.16
.\"
.\"WORD:	conversion specifier	変換指定文字
.\"WORD:	conversion specification	変換指定
.\"WORD:	modifier		修飾子
.\"WORD:	broken-down time	要素別の(時刻)
.\"WORD:	Single Unix Specification	統一 Unix 規格
.\"
.TH STRFTIME 3  2008-10-29 "GNU" "Linux Programmer's Manual"
.SH 名前
strftime \- 日付および時刻の文字列への変換
.SH 書式
.nf
.B #include <time.h>
.sp
.BI "size_t strftime(char *" s ", size_t " max ", const char *" format ,
.BI "                const struct tm *" tm );
.fi
.SH 説明
.BR strftime ()
関数 は、要素別の時刻 \fItm\fP の内容を
\fIformat\fP で指定された書式指定にしたがって変換し、
長さ \fImax\fP の文字列 \fIs\fP に書き込む。
.\" FIXME POSIX says: Local timezone information is used as though
.\" strftime() called tzset().  But this doesn't appear to be the case
.PP
書式文字列に含まれる通常の文字は変換されずそのまま文字列 \fIs\fP
にコピーされる。「変換指定」は \(aq%\(aq 文字で始まり、
「変換指定文字」で終端される。
以下のように変換されて \fIs\fP に格納される:
.TP
.B %a
現在のロケールにおける曜日の省略名。
.TP
.B %A
現在のロケールにおける曜日の完全な名前。
.TP
.B %b
現在のロケールにおける月の省略名。
.TP
.B %B
現在のロケールにおける月の完全な名前。
.TP
.B %c
現在のロケールにおいて一般的な日付・時刻の表記。
.TP
.B %C
世紀 (西暦年の上 2 桁)。 (SU)
.TP
.B %d
月内通算日 (10 進数表記) (01-31)。
.TP
.B %D
.B %m/%d/%y
と等価。(うえっ、アメリカ専用だ。アメリカ以外の国では
.B %d/%m/%y
の方が一般的だ。紛らわしいので、使用すべきではない。) (SU)
.TP
.B %e
.B %d
と同様に月内通算日を 10 進数で表現するが、
1 桁の場合 10 の位にゼロを置かずスペースを置く。(SU)
.TP
.B %E
別形式を使用する際の修飾子。下記参照。 (SU)
.TP
.B %F
.B %Y-%m-%d
と等価 (ISO 8601 形式の日付フォーマット)。 (C99)
.TP
.B %G
ISO 8601 形式の年 (世紀も 10 進数で表す)。
ISO 週数
.RB ( %V
を参照) に対応した 4 桁の西暦年。
これは基本的には
.B %y
と同じ形式だが、ISO 週数が前年や翌年になる
場合にはその年が使用される。(TZ)
.TP
.B %g
.B %G
と同様。但し、世紀を含まず下 2 桁のみを表示 (00-99)。 (TZ)
.TP
.B %h
.B %b
と等価 (SU)
.TP
.B %H
24 時間表記での時 (hour)。 (00-23)
.TP
.B %I
12 時間表記での時 (hour)。 (01-12)
.TP
.B %j
年の初めから通算の日数。 (001-366)
.TP
.B %k
24 時間表記での時 (0-23)。
1 桁の場合には前にゼロでなくスペースが置かれる。
.RB ( %H
も参照) (TZ)
.TP
.B %l
12 時間表記での時 (0-12)。
1 桁の場合には前にゼロでなくスペースが置かれる。
.RB ( %I
も参照) (TZ)
.TP
.B %m
月 (10 進数表記)。 (01-12)
.TP
.B %M
分 (10 進数表記) (00-59)
.TP
.B %n
改行。 (SU)
.TP
.B %O
別形式を使用する際の修飾子。以下を参照。(SU)
.TP
.B %p
現在のロケールにおける「午前」「午後」に相当する文字列。
英語の場合には "AM" または "PM" となる。
正午は「午後」、真夜中は「午前」として扱われる。
.TP
.B %P
.B %p
と同様であるが小文字が使用される。
英語の場合には "am" や "pm" となる。(GNU)
.TP
.B %r
午前・午後形式での時刻。
POSIX ロケールでは
.B "%I:%M:%S %p"
と等価である。(SU)
.TP
.B %R
24 時間表記での時刻、秒は表示しない
.RB ( %H:%M )。
秒を含んだものは以下の
.B %T
を参照すること。(SU)
.TP
.B %s
紀元 (1970年 1 月 1 日 00:00:00 UTC) からの秒数。 (TZ)
.TP
.B %S
秒 (10 進数表記) (00-60)
(時々ある閏秒に対応するため、値の範囲は 60 までとなっている)
.TP
.B %t
タブ文字 (SU)
.TP
.B %T
24 時間表記の時間 (\fB%H:%M:%S\fP) (SU)
.TP
.B %u
週の何番目の日 (10 進数表記) か。月曜日を 1 とする (1-7)。
.B %w
も参照。(SU)
.TP
.B %U
年の初めからの通算の週数 (10 進数表記) (00-53)。
その年の最初の日曜日を、第 1 週の始まりとして計算する。
.B %V
と
.B %W
も参照すること。
.TP
.B %V
ISO 8601:1988 形式での年の始めからの週数 (10 進数表記) (00-53)。
その年に少なくとも 4 日以上含まれる最初の週を 1 として計算する。
週の始まりは月曜日とする。
.B %U
と
.B %W
も参照すること。
.TP
.B %w
週の何番目の日 (10 進数表記) か。日曜日を 0 とする。(0-6)。
.B %u
も参照。(SU)
.TP
.B %W
年の初めからの通算の週数 (10 進数表記) (00-53)。
その年の最初の月曜日を、第 1 週の始まりとして計算する。
.TP
.B %x
現在のロケールで一般的な日付表記。時刻は含まない。
.TP
.B %X
現在のロケールで一般的な時刻表記。日付は含まない。
.TP
.B %y
西暦の下2桁 (世紀部分を含まない年) (00-99)。
.TP
.B %Y
世紀部分を含めた ( 4 桁の) 西暦年。
.TP
.B %z
タイムゾーンの GMT へのオフセット時間。
RFC\ 822 形式の日時に必要である。
("%a,\ %d\ %b\ %Y\ %H:%M:%S\ %z" として使用する)。(GNU)
.TP
.B %Z
タイムゾーンまたはゾーン名または省略名。
.TP
.B %+
.\" Nov 05 -- Not in Linux/glibc, but is in some BSDs (according to
.\" their man pages)
.BR date (1)
形式での日時。(TZ)
(glibc2 ではサポートされていない)
.TP
.B %%
\(aq%\(aq 文字。
.PP
いくつかの変換指定では、変換指定文字の前に
.B E
や
.B O
「修飾子」を置くことによって別書式を使用するように指定することができる。
現在のロケールにおいて別書式が存在しない場合には、
通常の変換指定が使用されたかのように動作する (SU)。
統一 UNIX 規格 (Single Unix Specification) では
.BR %Ec ,
.BR %EC ,
.BR %Ex ,
.BR %EX ,
.BR %Ey ,
.BR %EY ,
.BR %Od ,
.BR %Oe ,
.BR %OH ,
.BR %OI ,
.BR %Om ,
.BR %OM ,
.BR %OS ,
.BR %Ou ,
.BR %OU ,
.BR %OV ,
.BR %Ow ,
.BR %OW ,
.BR %Oy ,
について記述がある。ここで
.B O
修飾子は別形式の数値 (ローマ数字とか) を指定するために使用する。
.B E
修飾子はロケール依存の別表現を指定するのに使用する。
(訳注:
.B E
修飾子は日本で使用されている「昭和」「平成」
などの元号による年表記を指定する。glibc 2.2 以降でのみ有効)
.PP
要素別の時刻構造体 \fItm\fP の詳細は \fI<time.h>\fP に定義されている。
.BR ctime (3)
も参照すること。
.SH 返り値
.BR strftime ()
関数は文字列 \fIs\fP に格納された文字数を返す。
この文字数に終端の NULL バイトは含まない。
終端の NULL バイトを格納できるだけの大きさを持った文字列を渡すこと。
それ以外の場合は 0 を返し、文字列の内容は修正されない。
(libc 4.4.4 以降でこの挙動が適用されている。
libc 4.4.1 などの非常に古いバージョンの libc では
文字列が短か過ぎた場合には \fImax\fP が返される。)
.LP
返り値 0 は必ずしもエラーを意味している訳ではないので注意すること。
例えば、多くのロケールでは
.B %p
は空文字列を返す。
.SH 環境変数
環境変数
.B TZ
と
.B LC_TIME
が使用される。
(訳注:
.B LC_ALL
が設定されている場合には
.B LC_TIME
よりもそちらが優先される。
.B LC_TIME
も
.B LC_ALL
も設定されていない場合には
.B LANG
が使用される。)
.SH 準拠
SVr4, C89, C99.
個々の変換が厳密にどの規格に含まれるかは、
ANSI C (印なし)、統一 UNIX 規格 (SU印)、Olson の timezone パッケージ (TZ印)、
glibc 独自 (GNU印) で示している。glibc2 では
.B %+
はサポートされていないが、
いくつかの拡張が行われている。POSIX.1 では ANSI C のみを参照している。
POSIX.2 の
.BR date (1)
のところに記述されている幾つかの拡張は
.BR strftime ()
にも適用できるだろう。
.B %F
変換は C99 と POSIX.1-2001 にある。

SUSv2 では、
.B %S
は 00 から 61 の範囲をとると規定されている。
これは、1分間のうち閏秒が 2つ入る可能性が理論的にはあることを
考慮してのものである (実際には、このような状況はこれまで一度も
起こっていない)。
.SH 注意
.SS glibc での注意
glibc では変換指定にいくつか拡張を行っている
(これらの拡張は POSIX.1-2001 には規定されていないが、
他のいくつかのシステムで同様の機能が提供されている)。
.\" HP-UX と Tru64 にも同様の機能がある。
\(aq%\(aq 文字と変換指定文字の間に、オプションとして
.I flag
とフィールドの
.I 幅
を指定できる (これらを指定する場合には
.B E
や
.B O
修飾子の前に置く)。

以下のフラグ文字が使用できる:
.TP
.B _
(下線)
数値の結果文字列のパディング (穴埋め) をスペース (空白文字) で行う。
.TP
.B \-
(ダッシュ)
数値の結果文字列に対するパディングを行わない。
.TP
.B 0
変換指定文字がデフォルトではスペースでパディングを行う場合でも、
数値の結果文字列へのパディングを 0 で行う。
.TP
.B ^
結果文字列中のアルファベット文字を大文字に変換する。
.TP
.B #
結果文字列の大文字・小文字を入れ替える
(このフラグは特定の変換指定文字でしか機能しない。その中でも
本当に有用なのは
.B %Z
の場合だけである)。
.PP
オプションの10進数の幅指定子はフラグの後ろに置くことができる
(フラグはなくてもよい)。フィールドの本来の大きさが指定された幅よりも
小さい場合、結果文字列の左側は指定された幅までパディングされる。
.SH バグ
.BR gcc (1)
のいくつかのバージョンにはおかしなところがあり、
.B %c
の使用法について以下のような警告を出す:
.I "warning: `%c' yields only last 2 digits of year in some locales"
.RI ( 警告: いくつかのロケールでは `%c' は年の下2桁しか出力しない )。
もちろんプログラマが
.B %c
を使うのはお薦めできることである。
.B %c
を使うと適切な日付と時刻の表記を得ることができるからである。
.BR gcc (1)
のこの問題を回避しようとすると、何かすっきりしない気分になるだろう。
比較的きれいな解決方法は以下のような中間関数を追加することである。
.in +4n
.nf

size_t
my_strftime(char *s, size_t max, const char *fmt,
            const struct tm *tm)
{
    return strftime(s, max, fmt, tm);
}
.fi
.in
.RE

現在では、
.BR gcc (1)
はこの警告を抑えるための \fI\-Wno\-format\-y2k\fP オプションを
提供しており、上記の回避策はもはや必要ない。
.SH 例
以下のプログラムを使うと
.BR strftime ()
の実験ができる。
.PP
以下に、
.BR strftime ()
の glibc 実装が生成する結果の例をいくつか示す:
.nf

.RB "$" " ./a.out \(aq%m\(aq"
Result string is "11"
.RB "$" " ./a.out \(aq%5m\(aq"
Result string is "00011"
.RB "$" " ./a.out \(aq%_5m\(aq"
Result string is "   11"
.fi
.in
.SS プログラムのソース
\&
.nf
#include <time.h>
#include <stdio.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
    char outstr[200];
.PP
以下に、
.BR strftime ()
の glibc 実装が生成する結果の例をいくつか示す:
.nf

$ ./a.out "%m"
Result string is "11"
$ ./a.out "%5m"
Result string is "00011"
$ ./a.out "%_5m"
Result string is "   11"
.fi
    time_t t;
    struct tm *tmp;

    t = time(NULL);
    tmp = localtime(&t);
    if (tmp == NULL) {
        perror("localtime");
        exit(EXIT_FAILURE);
    }

    if (strftime(outstr, sizeof(outstr), argv[1], tmp) == 0) {
        fprintf(stderr, "strftime returned 0");
        exit(EXIT_FAILURE);
    }

    printf("Result string is \\"%s\\"\\n", outstr);
    exit(EXIT_SUCCESS);
} /* main */
.fi
.SH 関連項目
.BR date (1),
.BR time (2),
.BR ctime (3),
.BR setlocale (3),
.BR sprintf (3),
.BR strptime (3)
