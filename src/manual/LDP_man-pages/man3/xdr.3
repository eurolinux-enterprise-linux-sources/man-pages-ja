.\" This page was taken from the 4.4BSD-Lite CDROM (BSD license)
.\"
.\" @(#)xdr.3n	2.2 88/08/03 4.0 RPCSRC; from 1.16 88/03/14 SMI
.\"
.\" 2007-12-30, mtk, Convert function prototypes to modern C syntax
.\"
.\" Japanese Version Copyright (c) 1999 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated Tue Jan  4 20:48:51 JST 2000
.\"         by HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\"
.TH XDR 3 2007-12-30 "" "Linux Programmer's Manual"
.SH 名前
xdr \- 外部データ表現(XDR)のためのライブラリ・ルーティン
.SH 書式と説明
.LP
これらのルーティンは C プログラマーがマシン非依存な形式で
任意のデータ構造体を記述することを可能にする。
リモート・プロシジャ・コールのためのデータはこれらのルーティンを
使用して送信される。

以下に示すプロトタイプ宣言は
.I <rpc/xdr.h>
で行われており、その中では次の型が使用される。
.in +4n
.nf

typedef int \fIbool_t\fP;

typedef bool_t (*\fIxdrproc_t\fP) (XDR *, void *,...);
.fi
.in
.LP
.I XDR
型の宣言については、
.I <rpc/xdr.h>
を参照。
.LP
.nf
.BI "bool_t xdr_array(XDR *" xdrs ", char **" arrp ", unsigned int *" sizep ,
.BI "                 unsigned int " maxsize ", unsigned int " elsize ,
.BI "                 xdrproc_t " elproc );
.fi
.IP
可変長の配列とそれに対応する外部表現とを変換する基本フィルター。
引き数
.I arrp
は配列へのポインターのアドレスであり、
.I sizep
は配列の要素数のアドレスである。
これらの要素数は
.I maxsize
を超えてはならない。
引き数
.I elsize
は各配列の要素の
.I sizeof
であり、
.I elproc
は配列要素を C 形式からその外部表現に変換するための XDR フィルターである。
このルーティンは成功した場合には 1 を返す。
失敗した場合にはゼロを返す。
.LP
.nf
.BI "bool_t xdr_bool(XDR *" xdrs ", bool_t *" bp );
.fi
.IP
真偽値(C の int)とその外部表現とを変換する基本フィルター。
データをエンコードする時、このフィルターは 1 また 0 の値を生成する。
このルーティンは成功した場合には 1 を返す。
失敗した場合には 0 を返す。
.LP
.nf
.BI "bool_t xdr_bytes(XDR *" xdrs ", char **" sp ", unsigned int *" sizep ,
.BI "                 unsigned int " maxsize );
.fi
.IP
ある長さのバイト文字列とその外部表現とを変換する基本フィルター。
引き数
.I sp
は文字列ポインターのアドレスである。文字列の長さは
.I sizep
のアドレスに置く。文字列は
.I maxsize
より長くてはいけない。
このルーティンは成功した場合には 1 を返す。
失敗した場合には 0 を返す。
.LP
.nf
.BI "bool_t xdr_char(XDR *" xdrs ", char *" cp );
.fi
.IP
C の文字(char)とその外部表現との間を変換する基本フィルター。
このルーティンは成功した場合には 1 を返す。
失敗した場合には 0 を返す。
注意: エンコードされたデータは詰め込まれておらず、それぞれ 4 バイトを
占める。文字の配列の場合には
.BR xdr_bytes (),
.BR xdr_opaque (),
.BR xdr_string ()
などを考慮した方が良い。
.LP
.nf
.BI "void xdr_destroy(XDR *" xdrs );
.fi
.IP
このマクロは XDR ストリーム
.I xdrs
に関連付けられた破壊ルーティンを呼び出す。
破壊には通常、ストリームに関連付けられた私的データ構造体の解放が含まれている。
.BR xdr_destroy ()
の呼び出しの後に
.I xdrs
を使用することは未定義である。
.LP
.nf
.BI "bool_t xdr_double(XDR *" xdrs ", double *" dp );
.fi
.IP
C の
.I 倍精度数 (double)
とその外部表現との変換を行なう基本フィルター。
このルーティンは成功した場合は 1 を返す。
失敗した場合は 0 を返す。
.LP
.nf
.BI "bool_t xdr_enum(XDR *" xdrs ", enum_t *" ep );
.fi
.IP
C の
.I enum
(実際には int)とその外部表現との変換を行なう基本フィルター。
このルーティンは成功した場合は 1 を返す。
失敗した場合は 0 を返す。
.LP
.nf
.BI "bool_t xdr_float(XDR *" xdrs ", float *" fp );
.fi
.IP
C の
.IR "浮動小数点数 (float)"
とその外部表現との変換を行なう基本フィルター。
このルーティンは成功した場合は 1 を返す。
失敗した場合は 0 を返す。
.LP
.nf
.BI "void xdr_free(xdrproc_t " proc ", char *" objp );
.fi
.IP
汎用解放(free)ルーティン。最初の引き数はオブジェクトを解放するための
XDR ルーティンである。二番目の引き数はそのオブジェクト自身へのポインター
である。注意: このルーティンに渡されるポインターは
.I 解放されない
が、このポインターの指すデータは(再帰的に)
.IR 解放される 。
.LP
.nf
.BI "unsigned int xdr_getpos(XDR *" xdrs );
.fi
.IP
このマクロは XDR ストリーム
.I xdrs
に関連付けられた位置取得ルーティンを呼び出す。
このルーティンは XDR バイト・ストリームの位置を指示する符号無し整数を返す。
XDR ストリームの機能としてこの数値で単純な算術作業ができることが
期待されてるいる。しかしながら
XDR ストリームの実体はこれを保証する必要はない。
.LP
.nf
.BI "long *xdr_inline(XDR *" xdrs ", int " len );
.fi
.IP
このマクロは XDR ストリーム
.I xdrs
に関連付けられた内部(inline)ルーティンを呼び出す。
ルーティンはストリームのバッファーの連続する断片へのポインターを返す。
.I len
は要求するバッファーのバイト長である。
注意: ポインターは
.I "long *"
にキャストされる。
.IP
警告:
.BR xdr_inline ()
はバッファーの連続する断片を割り当てることができなかった場合には
NULL (0)を返すかもしれない。
どの場合もその動作はストリームの実体によって変化するかもしれない。
これは効率化のために存在している。
.LP
.nf
.BI "bool_t xdr_int(XDR *" xdrs ", int *" ip );
.fi
.IP
C の整数(int)とその外部表現とを変換するための基本フィルター。
このルーティンは成功した場合は 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_long(XDR *" xdrs ", long *" lp );
.fi
.IP
C の
.I long
整数とそのその外部表現とを変換するための基本フィルター。
このルーティンは成功した場合は 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "void xdrmem_create(XDR *" xdrs ", char *" addr ", unsigned int " size ,
.BI "                   enum xdr_op " op );
.fi
.IP
このルーティンは
.I xdrs
によって指されている XDR ストリーム・オブジェクトを初期化する。
ストリームのデータは
.I addr
位置にあるメモリーの塊から読み書きされる。
その長さはバイト単位で
.I size
超えてはいけない。
.I op
は XDR ストリームの変換方向を決定する
.RB ( XDR_ENCODE ,
.BR XDR_DECODE ,
.B XDR_FREE
のどれか)。
.LP
.nf
.BI "bool_t xdr_opaque(XDR *" xdrs ", char *" cp ", unsigned int " cnt );
.fi
.IP
固定長の不明データとその外部表現との変換を行なう基本フィルター。
引き数
.I cp
は不明オブジェクトのアドレスであり
.I cnt
はそのバイト単位の大きさである。
このルーティンは成功した場合は 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_pointer(XDR *" xdrs ", char **" objpp ,
.BI "                   unsigned int " objsize ", xdrproc_t " xdrobj );
.fi
.IP
.BR xdr_reference ()
と同様であるが、これが NULL ポインターを番号化するのに対して
.BR xdr_reference ()
はそうしない点が異なっている。これにより、
.BR xdr_pointer ()
は二分木や連結リストのような再帰的なデータ構造体を
表現できる。
.LP
.nf
.BI "void xdrrec_create(XDR *" xdrs ", unsigned int " sendsize ,
.BI "                   unsigned int " recvsize ", char *" handle ,
.BI "                   int (*" readit ") (char *, char *, int),"
.BI "                   int (*" writeit ") (char *, char *, int));"
.fi
.IP
このルーティンは
.I xdrs
で指された XDR ストリーム・オブジェクトを初期化する。
ストリームのデータは大きさ
.I sendsize
のバッファへ書き込まれる。
.I sendsize
をゼロにすると、システムに適切なデフォルトを使用するように指示する。
ストリームのデータは大きさ
.I recvsize
のバッファから読み込まれる。これもゼロを渡すことで適切なデフォルトに
設定することができる。
ストリームの出力バッファが一杯の場合は
.I writeit
が呼び出される。同様にストリーム入力バッファが空の場合には
.I readit
が呼び出される。これらの二つのルーティンの動作はシステムコールの
.BR read (2)
や
.BR write (2)
と似ているが、前者のルーティンは最初の引き数として
.I handle
が渡される点で異なっている。
注意: XDR ストリームの
.I op
は呼び出し側で設定しなければならない。
.IP
警告: この XDR ストリームは中間レコード・ストリームを実装している。
レコード境界の情報を提供するためにストリームには余分なバイトが存在する。
.LP
.nf
.BI "bool_t xdrrec_endofrecord(XDR *" xdrs ", int " sendnow );
.fi
.IP
このルーティンは
.BR xdrrec_create ()
によって作成されたストリームに対してのみ呼び出すことができる。
出力バッファのデータは完全なレコードとして印され、
.I sendnow
がゼロでない場合には出力バッファは書き出される。
このルーティンは成功した場合は 1 を返す。失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdrrec_eof(XDR *" xdrs );
.fi
.IP
このルーティンは
.BR xdrrec_create ()
によって作成されたストリームに対してのみ呼び出すことができる。
ストリームの現在のレコードの残りを消費した後に、
ストリームに入力が残っていない場合には 1 を返す。
それ以外の場合はゼロを返す。
.LP
.nf
.BI "bool_t xdrrec_skiprecord(XDR *" xdrs );
.fi
.IP
このルーティンは
.BR xdrrec_create ()
によって作成されたストリームに対してのみ呼び出すことができる。
XDR の実装にそのストリームの入力バッファーの現在のレコードの残りを
捨てるように伝える。このルーティンは成功した場合は 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_reference(XDR *" xdrs ", char **" pp ", unsigned int " size ,
.BI "                     xdrproc_t " proc );
.fi
.IP
構造体へのポインター追跡を提供する基本ルーティン。
引き数
.I pp
はポインターのアドレスである。
.I size
は
.I *pp
が指している構造体の
.I sizeof
である。
.I proc
はその構造体の C 形式と外部表現との変換を行なう XDR プロシジャである。
このルーティンは成功した場合 1 を返す。
失敗した場合はゼロを返す。
.IP
警告: このルーティンは NULL ポインターを理解することができない。かわりに
.BR xdr_pointer ()
を使用すること。
.LP
.nf
.BI "xdr_setpos(XDR *" xdrs ", unsigned int " pos );
.fi
.IP
このマクロは XDR ストリーム
.I xdrs
に関連付けられた位置設定ルーティンを呼び出す。引き数
.I pos
は
.BR xdr_getpos ()
によって取得される位置数値である。
このルーティンは XDR ストリームの位置の変更ができた場合には 1 を返す。
それ以外の場合は 0 を返す。
.IP
警告: ある種の XDR ストリームの場合は位置の変更を行なうことが困難である。
それでこのルーティンはある種のストリームの場合には成功し、別の種類の
場合には失敗するかもしれない。
.LP
.nf
.BI "bool_t xdr_short(XDR *" xdrs ", short *" sp );
.fi
.IP
C の
.I short
整数とその外部表現との変換を行なう基本フィルター。
このルーティンは成功すると 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "void xdrstdio_create(XDR *" xdrs ", FILE *" file ", enum xdr_op " op );
.fi
.IP
このルーティンは
.I xdrs
で指された XDR ストリーム・オブジェクトを初期化する。
XDR ストリームに読み書きれたデータは
.I stdio
ストリーム
.I file
が使用される。
.I op
引き数は XDR ストリームの変換方向を決定する
.RB ( XDR_ENCODE ,
.BR XDR_DECODE ,
.B XDR_FREE
のどれか)。
.IP
警告: このような XDR ストリームに関連付けられた破壊ルーティンは
.I file
ストリームに対して
.BR fflush (3)
を呼び出すが
.BR fclose (3)
を呼び出すことはない。
.LP
.nf
.BI "bool_t xdr_string(XDR *" xdrs ", char **" sp ", unsigned int " maxsize );
.fi
.IP
C の文字列とそれに対応する外部表現とを変換するための基本フィルター。
文字列は
.I maxsize
より長くはできない。
注意:
.I sp
は文字列へのポインターのアドレスである。
このルーティンは成功した場合は 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_u_char(XDR *" xdrs ", unsigned char *" ucp );
.fi
.IP
C の
.I 符号無し文字 (unsigned char)
とその外部表現とを変換する基本フィルター。
このルーティンは成功した場合は 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_u_int(XDR *" xdrs ", unsigned *" up );
.fi
.IP
C の
.I 符号無し整数 (unsigned)
とその外部表現を変換するための基本フィルター。
このルーティンは成功した場合は 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_u_long(XDR *" xdrs ", unsigned long *" ulp );
.fi
.IP
C の
.I "unsigned long"
整数とその外部表現を変換するための基本フィルター。
このルーティンは成功した場合は 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_u_short(XDR *" xdrs ", unsigned short *" usp );
.fi
.IP
C の
.I "unsigned short"
整数とその外部表現を変換するための基本フィルター。
このルーティンは成功した場合は 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_union(XDR *" xdrs ", int *" dscmp ", char *" unp ,
.BI "                 struct xdr_discrim *" choices ,
.BI "                 xdrproc_t " defaultarm ");     /* may equal NULL */"
.fi
.IP
分別可能な C の
.I "共用体 (union)"
とその外部形式とを変換する基本フィルター。
最初に
.I dscmp
として与えられた共用体の分別要素が変換される。
この分別要素は常に
.I enum_t
である。
次に
.I unp
の位置の共用体が変換される。引き数
.I choices
は
.BR xdr_discrim ()
構造体の配列へのポインターである。各構造体は
.RI [ value , proc ]
の順序付きペアを格納している。
もし共用体の分別要素が関連付けられた
.I value
と等しい場合には、共用体を変換するために
.I proc
が呼び出される。
.BR xdr_discrim ()
構造体の配列の最後は、ルーティンとして
.SM NULL
を指定することで示される。
分別要素が
.I choices
配列の中に見つからなかった場合、
.I defaultarm
が (NULL でなければ) 呼び出される。
成功した場合は 1 を返す。失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_vector(XDR *" xdrs ", char *" arrp ", unsigned int " size ,
.BI "                  unsigned int " elsize ", xdrproc_t " elproc );
.fi
.IP
固定長の配列とそれらが対応する外部表現とを変換する基本フィルター。
引き数
.I arrp
は配列へのポインターのアドレスである。一方で
.I size
は配列の要素数そのものである。引き数
.I elsize
は配列の各要素の
.I sizeof
で、
.I elproc
は配列の要素を C 形式からその外部表現へと変換する XDR フィルターである。
このルーティンは成功した場合 1 を返す。
失敗した場合はゼロを返す。
.LP
.nf
.BI "bool_t xdr_void(void);"
.fi
.IP
このルーティンは常に 1 を返す。
これは何も行なわないが、関数引き数が必要な
RPC ルーティンに渡すことができる。
.LP
.nf
.BI "bool_t xdr_wrapstring(XDR *" xdrs ", char **" sp );
.fi
.IP
.B "xdr_string(xdrs, sp, \s-1MAXUN.UNSIGNED\s0 );"
を呼び出す基本ルーティン。
ここで
.B
.SM MAXUN.UNSIGNED
は符号無し整数(unsigned int)の最大値である。
.BR xdr_wrapstring ()
は、
.SM RPC
パッケージは二つの
.SM XDR
ルーティンの最大値を引き数として渡すため便利である。
.BR xdr_string ()
は最も頻繁に利用される基本ルーティンであるが三つを要求する。
成功した場合は 1 を返す、失敗した場合はゼロを返す。
.SH 関連項目
.BR rpc (3)
.LP
以下のマニュアル:
.RS
eXternal Data Representation Standard: Protocol Specification
.br
eXternal Data Representation: Sun Technical Notes
.br
.IR "XDR: External Data Representation Standard" ,
RFC\ 1014, Sun Microsystems, Inc.,
USC-ISI.
.RE
