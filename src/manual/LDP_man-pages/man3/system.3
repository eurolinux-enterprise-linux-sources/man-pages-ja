.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" License.
.\" Modified Sat Jul 24 17:51:15 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 11 May 1998 by Joseph S. Myers (jsm28@cam.ac.uk)
.\" Modified 14 May 2001, 23 Sep 2001 by aeb
.\" 2004-12-20, mtk
.\"
.\" Japanese Version Copyright (c) 1996 Shoichi OZAWA
.\"	all right reserved.
.\" Translated 1996-09-01, Shoichi OZAWA <ozawa@omika.hitachi.co.jp>
.\" Updated 2001-03-19, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2001-10-16, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2005-02-27, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.\"WORD:	feature test macro	機能検査マクロ
.\"
.TH SYSTEM 3  2004-12-20 "" "Linux Programmer's Manual"
.SH 名前
system \- シェルコマンドの実行
.SH 書式
.nf
.B #include <stdlib.h>
.sp
.BI "int system(const char *" "command" );
.fi
.SH 説明
.BR system ()
は
.I command
で指定したコマンドを
.B "/bin/sh \-c"
.I command
の形で実行する。指定したコマンドが終了すればこの関数も終了する。
コマンド実行中は、
.B SIGCHLD
はブロックされ、
.B SIGINT
と
.B SIGQUIT
は無視される。
.SH 返り値
エラーが発生した場合
.RB ( fork (2)
に失敗した場合など)、\-1 を返す。
そうでなければ、コマンドのステータスを返す。
後者の場合、ステータスは
.BR wait (2)
で定義されているフォーマットで返ってくる。
従って、コマンドの終了コードは
.I WEXITSTATUS(status)
で得ることが出来る。
.I /bin/sh
が実行出来なかった場合、
終了ステータスはコマンドが
.I exit(127)
を実行した場合と同じになる。
.PP
.I command
の値が NULL のときは、
.BR system ()
はシェルが利用可能ならゼロ以外の値を返し、利用不可ならゼロを返す。
.PP
.BR system ()
は他の子プロセスのウエイトステータスには影響を与えない。
.SH 準拠
C89, C99, POSIX.1-2001.
.SH 注意
.PP
機能検査マクロである
.B _XOPEN_SOURCE
が定義された場合には、
.BR wait (2)
で説明されているマクロ群
.RB ( WEXITSTATUS ()
等) が
.I <stdlib.h>
をインクルードすると利用可能になる。
.PP
既に述べたように、
.BR system ()
は
.B SIGINT
と
.B SIGQUIT
を無視する。
よってループから
.BR system ()
を呼ぶプログラムは、
以下の例のように子プロセスの終了状態を自分でチェックしておかないと、
中断できなくなるかもしれない。
.br
.nf

    while (something) {
        int ret = system("foo");

        if (WIFSIGNALED(ret) &&
            (WTERMSIG(ret) == SIGINT || WTERMSIG(ret) == SIGQUIT))
                break;
    }
.fi
.PP
set-user-ID や set-group-ID の特権をもつプログラムの中では
.BR system ()
を使ってはいけない。なぜなら、ある環境変数の未知の値によって
システムの安全が損なわれるからである。代わりに
.BR exec (3)
関連の関数群の中で
.BR execlp (3)
と
.BR execvp (3)
以外の関数を使用すべきである。
実際のところ、
.BR system ()
は
.I /bin/sh
が bash バージョン 2 であるシステムでは、
set-user-ID や set-group-ID の特権を持つプログラムからは正しく動作しない。
なぜなら、bash バージョン 2 はスタートアップ時に特権を落とすからである。
(Debian では、sh として起動された時にはこのような動作を行なわないように
修正された bash を用いている)
.PP
glibc 2.1.3 より前のバージョンでは、
.I command
が NULL の場合に
.I /bin/sh
が利用可能かどうかのチェックは実際には行わず、
いつでも利用可能であるとみなしていた。
.BR system ()
はこの場合に常に 1 を返していた。
POSIX.1-2001 ではシェルが提供されているという標準に準拠した実装を
要求しているが、glibc 2.1.3 以降ではシェルのチェックを実行している。
なぜなら、呼び出し元のプログラムが
.BR system ()
を呼び出すより前に (POSIX.1-2001 では規定されていない)
.BR chroot (2)
を呼び出していた時には、シェルが利用可能でない場合や実行可能ファイル
でない場合があるからである。
.PP
実行したシェルコマンドが 127
.RB ( /bin/sh
の呼び出しに失敗した時に返す値) を返すことも考えられる。
そのため、プログラムは (リターンコードを見るだけでは)
.BR execve (2)
の呼び出しが失敗したことを確実に知ることはできない。
.SH 関連項目
.BR sh (1),
.BR signal (2),
.BR wait (2),
.BR exec (3)
