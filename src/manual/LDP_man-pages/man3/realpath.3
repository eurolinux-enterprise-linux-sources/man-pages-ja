.\" Copyright (C), 1994, Graeme W. Wilford. (Wilf.)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Rewritten old page, 990824, aeb@cwi.nl
.\" 2004-12-14, mtk, added discussion of resolved_path == NULL
.\"
.\" Japanese Version Copyright (c) 1998 SHOJI Yasushi all rights reserved.
.\" Translated 1998-03-22, SHOJI Yasushi <yashi@yashi.com>
.\" Updated 1999-03-07, Shouichi Saito
.\" Updated 2003-01-17, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\" Updated 2005-02-27, Akihiro MOTOKI
.\" Updated 2005-09-06, Akihiro MOTOKI
.\"
.\"WORD: bounded	制限がない
.\"
.TH REALPATH 3  2008-09-26 "" "Linux Programmer's Manual"
.SH 名前
realpath \- 正規化された絶対パス名を返す
.SH 書式
.nf
.B #include <limits.h>
.B #include <stdlib.h>
.sp
.BI "char *realpath(const char *" path ", char *" resolved_path );
.fi
.sp
.in -4n
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.BR realpath ():
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500
.SH 説明
.BR realpath ()
は
.I path
として与えられた NULL 終端された文字列中の
すべてのシンボリックリンクを展開し、
.IR "/./" ", " "/../"
による参照や余分な \(aq/\(aq
を解決して、正規化された絶対パス名を生成する。
得られた絶対パス名は、最大で
.B PATH_MAX
バイトの NULL 終端された文字列として、
.I resolved_path
により参照されるバッファに格納される。
結果として返るパスの中には、シンボリックリンクや
.IR "/./" ", " "/../"
といった要素は含まれない。
.I resolved_path
に NULL が指定されると、
.BR realpath ()
は
.BR malloc (3)
を使って解決したパス名を保持するためのバッファを
最大で
.B PATH_MAX
バイトまで割り当て、このバッファへのポインタを返す。
呼び出し元は、
.BR free (3)
を使ってこのバッファを解放すべきである。
.\" resolved_path == NULL を指定した場合でも、解決したパス名の長さが
.\" PATH_MAX バイトを超えたときには、realpath() は前と同じく
.\" ENAMETOOLONG を返す。-- MTK, Dec 04
.\" .SH 歴史
.\" .BR realpath ()
.\" 関数は 4.4BSD で初めて登場した (Jan-Simon Pendry により提供された)。
.SH 返り値
エラーがなかった場合、
.BR realpath ()
は
.I resolved_path
へのポインターを返す。

それ以外の場合は、ヌル (NULL) ポインターが返り、配列
.I resolved_path
の内容は不定である。
グローバル変数
.I errno
がエラーの内容にあわせてセットされる。
.SH エラー
.TP
.B EACCES
パスのディレクトリ部分に、読み出し許可または検索許可が与えられていない。
.TP
.B EINVAL
.I path
か
.I resolved_path
のいずれかが NULL である。
(libc5 では、このような場合 segfault を起こすだけであろう)
但し、下記の「注意」の節を参照のこと。
.TP
.B EIO
ファイルシステムを読むときに、I/Oエラーが起こった。
.TP
.B ELOOP
パス名の変換にあたり、解決すべきシンボリック・リンクの数が多過ぎた。
.TP
.B ENAMETOOLONG
パス名の一要素の文字数が
.B NAME_MAX
を越えている、またはパス名全体の文字数が
.B PATH_MAX
を越えている。
.TP
.B ENOENT
指定されたファイルが存在しない。
.TP
.B ENOTDIR
パスのディレクトリ要素が、ディレクトリでない。
.SH バージョン
この関数が Linux に登場したのは libc 4.5.21 である。
.SH 準拠
4.4BSD, POSIX.1-2001.

POSIX.1 では
.I resolved_path
が NULL の場合の動作は実装に依存するとしている。
POSIX.1-2008 では、このマニュアルページに書かれている動作が規定されている。
4.4BSD と Solaris では、パス名の長さの上限は
(\fI<sys/param.h>\fP の中にある)
.B MAXPATHLEN
である。SUSv2 では
.B PATH_MAX
と
.B NAME_MAX
が規定されており、
これらは \fI<limits.h>\fP で定義されているか、
.BR pathconf (3)
関数から得られる。以下のようなソースコードになっていることが多い。
.LP
.in +4n
.nf
#ifdef PATH_MAX
  path_max = PATH_MAX;
#else
  path_max = pathconf(path, _PC_PATH_MAX);
  if (path_max <= 0)
	 path_max = 4096;
#endif
.fi
.in
.LP
(バグの章も参照のこと。) 
.LP
4.4BSD、Linux、SUSv2 では、返り値は常に絶対パス名である。
Solaris では、
引き数
.I path
が相対パスの場合、返り値が相対パスになることがある。
.BR realpath ()
のプロトタイプ宣言は、
libc4 と libc5 では \fI<unistd.h>\fP にあるが、
それ以外の環境ではいずれも \fI<stdlib.h>\fP にある。
.SH バグ
この関数の使用は避けること。設計段階から問題があるからだ。
(非標準の
.I "resolved_path\ ==\ NULL"
の拡張機能を使わない限り) 出力バッファ
.I resolved_path
の適切なサイズを決定することができないからである。
POSIX ではバッファ・サイズとして
.B PATH_MAX
は十分だとされているが、
.B PATH_MAX
は定義済の定数である必要はなく、
.BR pathconf (3)
を使って得られる値であってもよいことになっている。
.BR pathconf (3)
からバッファ・サイズを取得したとしても必ずしも十分ではない。
なぜなら、
.BR pathconf (3)
の返り値が大き過ぎて適切にメモリを確保することができないかもしれない
と POSIX では警告されているし、
.BR pathconf (3)
は
.B PATH_MAX
に制限がないことを示す \-1 を返すかもしれないからである。
.LP
libc4 と libc5 の実装はバッファ・オーバーフローの可能性を持っている
(libc-5.4.13 で修正されたが)。したがって、
.BR mount (8)
のような set-user-ID されるプログラムでは、
この関数相当の関数を自前で持つ必要がある。
.SH 関連項目
.BR readlink (2),
.BR canonicalize_file_name (3),
.BR getcwd (3),
.BR pathconf (3),
.BR sysconf (3)
