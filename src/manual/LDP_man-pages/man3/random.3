.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Mar 28 00:25:51 1993, David Metcalfe
.\" Modified Sat Jul 24 18:13:39 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Aug 20 21:47:07 2000, aeb
.\"
.\" Japanese Version Copyright (c) 1997 YOSHINO Takashi
.\"       all rights reserved.
.\" Translated 1997-01-21, YOSHINO Takashi <yoshino@civil.jcn.nihon-u.ac.jp>
.\" Updated 2008-08-08, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.\" WORD: non-linear additive feedback   非線形加法フィードバック
.\" WORD: state array   状態配列
.\"
.TH RANDOM 3  2009-02-03 "GNU" "Linux Programmer's Manual"
.SH 名前
random, srandom, initstate, setstate \- 乱数を生成する関数
.SH 書式
.nf
.B #include <stdlib.h>
.sp
.B long int random(void);
.br
.BI "void srandom(unsigned int " seed );

.BI "char *initstate(unsigned int " seed ", char *" state ", size_t " n );

.BI "char *setstate(char *" state );
.fi
.sp
.in -4n
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.ad l
.BR random (),
.BR srandom (),
.BR initstate (),
.BR setstate ():
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500
.ad b
.SH 説明
.BR random ()
関数は、非線形加法フィードバックを用いた乱数生成関数である。
この関数は、0 から \fBRAND_MAX\fR までの疑似乱数を返す。
そのために 31 個のロング整数からなるデフォルトの表を使用する。
この乱数を生成する関数の周期はとても長く、およそ
.I "16\ *\ ((2^31)\ \-\ 1)"
である。
.PP
.BR srandom ()
関数は、
.BR random ()
で返される疑似乱数整数系列の種を設定する。
そのためには新しい種を引数にして
.BR srandom ()
を呼べばよい。
.BR random ()
で生成される系列は、
引数に同じ種の値を用いて
.BR srandom ()
を呼ぶことで再現可能である。
種の値が与えられない場合には
.BR random ()
関数は、自動的に 1 を種に設定する。
.PP
.BR initstate ()
関数は、
.BR random ()
で使用される状態配列
\fIstate\fP を初期化する。
.BR initstate ()
では、状態配列の大きさ \fIn\fP は
使用する関数の乱数生成の性能の程度を決定するために使用される
\(em 状態配列が大きい程、乱数の性能はよくなる。
\fIseed\fP は初期化のための種である。
これは乱数系列の開始位置を決定するものであり、
この値を指定することで同一の開始位置から乱数の生成を
再開することができる。
.PP
.BR setstate ()
関数は、
.BR random ()
で使用される状態配列を変更する。
状態配列 \fIstate\fP は、
.BR initstate ()
または
.BR setstate ()
が
次に呼び出されるまで、乱数の生成に使用される。
\fIstate\fP は
.BR initstate ()
を用いて最初に初期化されているか、
以前に呼び出した
.BR setstate ()
の結果でなければならない。
.SH 返り値
.BR random ()
関数は 0 と
.B RAND_MAX
の間の値を返す。
.BR srandom ()
関数は値を返さない。
.BR initstate ()
関数と
.BR setstate ()
関数は
直前の状態配列へのポインタまたは NULL を返す。
.SH エラー
.TP
.B EINVAL
.BR initstate ()
で8バイトよりも小さい状態配列を指定した。
.SH 準拠
4.3BSD, POSIX.1-2001.
.SH 注意
状態配列 \fIn\fP の大きさの現在の「最適」値は
8、32、64、128、256 バイトである。
その他の量を指定した場合には、指定した量を越えない上述の値に
最も近い値になる。
8 バイト未満の量を指定した場合にはエラーの原因となる。

複数のスレッドが
.BR random ()
を使うような状況では、この関数を使用すべきではない。
その場合には
.BR random_r (3)
を使うこと。

乱数の生成は複雑な話題である。
.I Numerical Recipes in C: The Art of Scientific Computing
(William H. Press, Brian P. Flannery, Saul A. Teukolsky, William
T. Vetterling; New York: Cambridge University Press, 2007, 3rd ed.)
では実用的な乱数生成を論点とした優れた議論が第 7 章 (乱数) で展開されている。

より理論的な議論については Donald E. Knuth の
.IR "The Art of Computer Programming" ,
volume 2 (Seminumerical Algorithms), 2nd ed.; Reading, Massachusetts:
Addison-Wesley Publishing Company, 1981
の第 3 章 (乱数) を見よ。ここでは、
たくさんの実用的な話題についても深く網羅されている。
.SH 関連項目
.BR drand48 (3),
.BR rand (3),
.BR random_r (3),
.BR srand (3)
