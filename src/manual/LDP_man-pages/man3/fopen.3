.\" Copyright (c) 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Chris Torek and the American National Standards Committee X3,
.\" on Information Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)fopen.3	6.8 (Berkeley) 6/29/91
.\"
.\" Converted for Linux, Mon Nov 29 15:22:01 1993, faith@cs.unc.edu
.\" Modified, aeb, 960421, 970806
.\" Modified, joey, aeb, 2002-01-03
.\"
.\" Japanese Version Copyright (c) 1997 YOSHINO Takashi
.\"       all rights reserved.
.\" Translated Thu Feb 13 12:10:38 JST 1997
.\"       by YOSHINO Takashi <yoshino@civil.jcn.nihon-u.ac.jp>
.\" Updated & Modified Mon Mar 1 1999
.\"       by NAKANO Takeo <nakano@apm.seikei.ac.jp>
.\" Updated 1999-12-08, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2001-12-13, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2002-03-23, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2005-10-15, Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2006-07-20, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>
.\"
.\"WORD:	file descriptor		ファイル記述子
.\"WORD:	file position indicator	ファイル位置指示子
.\"WORD:	indicator		指示子
.\"WORD:	global variable		大域変数
.\"WORD:	cancellation points	取り消しポイント
.\"
.TH FOPEN 3  2009-02-23 "GNU" "Linux Programmer's Manual"
.SH 名前
fopen, fdopen, freopen \- ストリームを開く関数
.SH 書式
.nf
.B #include <stdio.h>
.sp
.BI "FILE *fopen(const char *" path ", const char *" mode );

.BI "FILE *fdopen(int " fd ", const char *" mode );

.BI "FILE *freopen(const char *" path ", const char *" mode ", FILE *" stream );
.fi
.sp
.in -4n
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.BR fdopen ():
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.SH 説明
.BR fopen ()
関数は、
.I path
で指定された名前のファイルを開き、ストリームと結びつける。
.PP
引数
.I mode
は、以下に続く文字のひとつから始まる文字列へのポインタである
(追加の文字がこの文字の後に続くこともある):
.TP
.B r
テキストファイルを読み出すために開く。
ストリームはファイルの先頭に位置される。
.TP
.B r+
読み出しおよび書き込みするために開く。
ストリームはファイルの先頭に位置される。
.TP
.B w
ファイルを書き込みのために開く。
ファイルが既に存在する場合には長さゼロに切り詰める。
ファイルがなかった場合には新たに作成する。
ストリームはファイルの先頭に位置される。
.TP
.B w+
読み出しおよび書き込みのために開く。
ファイルが存在していない場合には新たに作成する。
存在している場合には長さゼロに切り詰められる。
ストリームはファイルの先頭に位置される。
.TP
.B a
追加 (ファイルの最後に書き込む) のために開く。
ファイルが存在していない場合には新たに作成する。
ストリームはファイルの最後に位置される。
.TP
.B a+
読み出しおよび追加 (ファイルの最後に書き込む) のために開く。
ファイルが存在していない場合には新たに作成する。
読み出しの初期ファイル位置はファイルの先頭であるが、
書き込みは常にファイルの最後に追加される。
.PP
.I mode
文字列には文字 \(aqb\(aq を追加指定することができ、
.I mode
文字列の最後の文字として指定する。
上記のうち 2 文字のモードの場合には 2 つの文字の間に指定することもできる。
これは C89 との互換性のためだけに用意された
ものであり、関数の実行に対してはいかなる影響も持たない。
すなわち、Linux を含む全ての POSIX 準拠システムでは、
この \(aqb\(aq は無視される。
(その他のシステムではテキストファイルとバイナリファイルを別々に扱うものもあるので、
もしバイナリファイルの入出力を行い、
そのプログラムが非 UNIX 環境へ移植されると予測するなら、
\(aqb\(aqを付けておくのは良い考えである)
.PP
.I mode
の glibc による拡張の詳細については下記の「注意」を参照。
.PP
すべての生成されたファイルは、
.BR S_IRUSR " | " S_IWUSR " | "  S_IRGRP " | "  S_IWGRP " | " S_IROTH " | " S_IWOTH
(0666) のモードを
そのプロセスの umask 値によって修正したモードを持つ
.RB ( umask (2)
を見よ)。
.PP
読み出し/書き込みストリームに対しては任意の順序で読み書きを行うことができる。
ただし ANSI C では、
(入力操作がファイルの末尾に到達した場合を除いて)
出力と入力の間にはファイルの位置決め関数を
挟まなければならないことになっていることに注意されたい
(この条件を満足しない場合には、読み込み操作は、
最後に書き込まれたものでなく、以前に書き込まれた
値を返すことを許されている)。
したがって、このようなストリームでの読み書き操作の間には
.BR fseek (3)
または
.BR fgetpos (3)
操作を挟んでおくと良いだろう
(Linux では本当に必要となることもときどきある)。
この操作は見かけ上何もしない操作 (no-op) でも良い
(例えば \fIfseek(..., 0L, SEEK_CUR)\fP を
その副次的効果である同期のためだけに呼べば良い)。
.PP
ファイルを追加モード
.RI ( mode
の最初の文字を \fBa\fP にする) で開くと、
このストリームに対する書き込み操作は (先に
.nf

    fseek(stream,0,SEEK_END);

.fi
の呼び出しを実行したかのように) ファイル末尾に対して行われる。
.PP
.BR fdopen ()
関数は、既存のファイル記述子
.I fd
にストリームを結びつける。
ストリームの
.I mode
("r", "r+", "w", "w+", "a", "a+" のいずれか) は
ファイル記述子のモードと互換のものでなければならない。
新しいストリームのファイル位置指示子は
.I fd
に属している値に設定される。
error と end-of-file の各指示子はクリアされる。
"w" および "w+" モードでのファイルの切り詰めは行われない。
ファイル記述子の複製は行なわれない。
.BR fdopen ()
で作成されたストリームが閉じられたときにファイル記述子も
閉じられる。
共有メモリのオブジェクトへ
.BR fdopen ()
を行ったときの結果は定義されていない。
.PP
.BR freopen ()
関数は
.I path
で名前が指定されたファイルを開き、
.I stream
で指定されたストリームに、そのファイルを結びつける。
もとのストリームは (もし存在する場合には) 閉じられる。
.I mode
引数は
.BR fopen ()
関数と同じ形で使われる。
.BR freopen ()
関数の主な用途は、標準テキストストリーム
.RI ( stderr ", " stdin ", " stdout )
と対応付けられているファイルを変更することである。
.SH 返り値
.BR fopen (),
.BR fdopen (),
.BR freopen ()
は成功すると
.I FILE
型のポインタを返す。
失敗すると NULL が返され、
.I errno
がエラーを示す値にセットされる。
.SH エラー
.TP
.B EINVAL
.BR fopen (),
.BR fdopen (),
.BR freopen ()
で与えられた
.I mode
が不適切である。
.PP
.BR fopen (),
.BR fdopen (),
.BR freopen ()
関数は
.BR malloc (3)
ルーチンで規定されているエラーでも失敗することがあり、
その時は対応する値に
.I errno
をセットする。
.PP
.BR fopen ()
関数は
.BR open (2)
ルーチンで規定されているエラーでも失敗することがあり、
その時は対応する値に
.I errno
をセットする。
.PP
.BR fdopen ()
関数は
.BR fcntl (2)
ルーチンで規定されているエラーでも失敗することがあり、
その時は対応する値に
.I errno
をセットする。
.PP
.BR freopen ()
関数は
.BR open (2),
.BR fclose (3),
.BR fflush (3)
各ルーチンで規定されているエラーでも失敗することがあり、
その時は対応する値に
.I errno
をセットする。
.SH 準拠
.BR fopen ()
関数と
.BR freopen ()
関数は C89に準拠している。
.BR fdopen ()
関数は POSIX.1-1990 に準拠している。
.SH 注意
.SS glibc での注意
GNU C ライブラリでは、
.I mode
に指定できる文字列として、以下の拡張が行われている:
.TP
.BR c " (glibc 2.3.3 以降)"
open 操作、それに続く read/write 操作の、
スレッドの取り消しポイント (cancellation points)
を作成しない。
.TP
.BR e " (glibc 2.7 以降)"
.B O_CLOEXEC
フラグを有効にしてファイルをオープンする。
詳細は
.BR open (2)
を参照。
.TP
.BR m " (glibc 2.3 以降)"
I/O システムコール
.RB ( read (2),
.BR write (2))
ではなく、
.BR mmap (2)
を使ってファイルにアクセスしようとする。
.\" glibc 2.4 では
.BR mmap (2)
を使おうとするのは、読み出し用にオープンするファイルについてだけである。
.TP
.B x
ファイルを排他的にオープンする
.RB ( open (2)
の
.B O_EXCL
フラグと同様)。
ファイルがすでに存在する場合、
.BR fopen ()
は失敗し、
.I errno
に
.B EEXIST
がセットされる。
このフラグは
.BR fdopen ()
では無視される。
.\" FIXME document /,ccs= charset/
.SH 関連項目
.BR open (2),
.BR fclose (3),
.BR fileno (3),
.BR fmemopen (3),
.BR fopencookie (3)
