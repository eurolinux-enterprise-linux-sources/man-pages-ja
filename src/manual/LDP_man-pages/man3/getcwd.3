.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" License.
.\" Modified Wed Jul 21 22:35:42 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 18 Mar 1996 by Martin Schulze (joey@infodrom.north.de):
.\"   Corrected description of getwd().
.\" Modified Sat Aug 21 12:32:12 MET 1999 by aeb - applied fix by aj
.\" Modified Mon Dec 11 13:32:51 MET 2000 by aeb
.\" Modified Thu Apr 22 03:49:15 CEST 2002 by Roger Luethi <rl@hellgate.ch>
.\"
.\" Japanese Version Copyright (c) 1997 IMAMURA Nobutaka
.\"         all rights reserved.
.\" Translated Fri Feb 14 12:40:22 JST 1997
.\"         by IMAMURA Nobutaka <imamura@spp.hpc.fujitsu.co.jp>
.\" Modified Thu Dec 8 05:08:44 JST 1999
.\"	    by Kentaro Shirakata <argrath@yo.rim.or.jp>
.\" Modified Sun Mar 12 21:08:44 JST 2000
.\"	    by HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\" Updated 2001-01-29 by Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2002-03-23 by Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2002-10-17 by Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2007-01-01 by Kentaro Shirakata <argrath@ub32.org>
.\" Updated 2008-08-21, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.07
.\"
.\" WORD: current working directory	カレントワーキングディレクトリ
.\" WORD: LEGACY	「過去の名残(LEGACY)」
.\"
.TH GETCWD 3 2009-03-31 "GNU" "Linux Programmer's Manual"
.SH 名前
getcwd, getwd, get_current_dir_name \- カレントワーキングディレクトリ名の取得
.SH 書式
.nf
.B #include <unistd.h>
.sp
.BI "char *getcwd(char *" buf ", size_t " size );
.sp
.BI "char *getwd(char *" buf );
.sp
.B "char *get_current_dir_name(void);"
.fi
.sp
.in -4n
glibc 向けの機能検査マクロの要件
.RB ( feature_test_macros (7)
参照):
.in
.sp
.BR getcwd ():
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500
.br
.BR get_current_dir_name ():
_GNU_SOURCE
.SH 説明
これらの関数は、呼び出したプロセスのカレントワーキングディレクトリの
絶対パス名 (absolute pathname) が入った文字列を返す。
返される文字列は NULL で終端される。
パス名は関数の結果として返され、引数
.I buf
がある場合は
.I buf
経由でも返される。

.BR getcwd ()
関数はカレントワーキングディレクトリの絶対パス名を
.I buf
で示された
.I size
長の配列にコピーする。
.PP
終端の NULL バイトも含めた、カレントワーキングディレクトリの
絶対パス名の長さが
.I size
バイトを超えている場合は、返り値として NULL が返り
.I errno
に
.B ERANGE
がセットされる。
アプリケーションはこのエラーをチェックし、
必要に応じてより長いバッファを用意すべきである。
.PP
POSIX.1-2001 標準の拡張として、
Linux (libc4, libc5, glibc) では
.I buf
が NULL の場合、
.BR getcwd ()
は必要なバッファを
.BR malloc (3)
を用いて動的に割り当てる。
この場合、
.I size
が 0 の場合を除き、バッファの長さは
.I size
となる。
.I size
が 0 の場合には必要な大きさが確保される。
呼び出し側で、返されたバッファを
.BR free (3)
すべきである。

.BR get_current_dir_name ()
はカレントワーキングディレクトリの絶対パス名を収めるのに
十分な大きさの配列を
.BR malloc (3)
で獲得する。環境変数
.B PWD
が設定されておりその値が正しければ、その値が返される。
呼び出し側で、返されたバッファを
.BR free (3)
すべきである。

.BR getwd ()
は
.BR malloc (3)
によるメモリ獲得を一切行なわない。
.I buf
引数は少なくとも
.B PATH_MAX
バイトの長さを持つ配列へのポインタである必要がある。
終端の NULL バイトも含めた、カレントワーキングディレクトリの
絶対パス名の長さが
.B PATH_MAX
バイトを超えている場合、
NULL が返され、
.I errno
に
.B ENAMETOOLONG
が設定される。
(システムによっては、
.B PATH_MAX
は必ずしもコンパイル時に決まる定数ではない点に注意すること。
また、ファイルシステムに依存する場合もある。
.BR pathconf (3)
を参照。)
移植性とセキュリティ上の理由から、
.BR getwd ()
の利用は推奨されない。
.SH 返り値
成功すると、これらの関数はカレントワーキングディレクトリの絶対パス名
が入った文字列へのポインタを返す。
.BR getcwd ()
と
.BR getwd ()
の場合、返り値は
.I buf
と同じ値になる。

失敗した場合、これらの関数は NULL を返し、
.I errno
にエラーを示す値を設定する。
.I buf
が指す配列の内容は未定義である。
.SH エラー
.TP
.B EACCES
ファイル名の構成要素に対する読み込みあるいは検索の権限がない。
.TP
.B EFAULT
.I buf
が不正なアドレスを指している。
.TP
.B EINVAL
.I size
引数が 0 かつ、
.I buf
引数が NULL ポインタでない。
.TP
.B EINVAL
.BR getwd ():
.I buf
が NULL である。
.TP
.B ENAMETOOLONG
.BR getwd ():
絶対パス名が入った NULL 終端された文字列の長さが
.B PATH_MAX
バイトを超えている。
.TP
.B ENOENT
カレントワーキングディレクトリが削除されている。
.TP
.B ERANGE
.I size
引数の値がワーキングディレクトリの絶対パス名の長さより小さい。
長さには文字列の終端バイトも含まれる。
より大きい配列を確保してもう一度実行する必要がある。
.SH 準拠
.BR getcwd ()
は POSIX.1-2001 に準拠している。
POSIX.1-2001 は、
.I buf
が NULL の場合の
.BR getcwd ()
の動作を規定しないままとしている。

.BR getwd ()
は POSIX.1-2001 に存在しているが、「過去の名残(LEGACY)」とされている。
POSIX.1-2008 では、
.BR getwd ()
の仕様が削除されている。
代わりに
.BR getcwd ()
を使うこと。
POSIX.1-2001 は
.BR getwd ()
に関するエラーを定義していない。

.BR get_current_dir_name ()
は GNU 拡張である。
.SH 注意
Linux では (2.1.92 以降)、
.BR getcwd ()
はシステムコールである。
古いシステムでは
.I /proc/self/cwd
を参照する。
システムコールも proc ファイルシステムもない場合、
一般的な実装が呼び出される。
この場合においてのみ、(Linux では) この関数は
.B EACCES
で失敗する可能性がある。
.LP
これらの関数はしばしばカレントワーキングディレクトリの位置を保存し、
後で戻ってくるために利用される。
未使用のファイルディスクリプタが十分ある場合は、
現在のディレクトリ (".") を開いて
.BR fchdir (2)
を呼び出すほうが普通は高速で信頼性がある。
特に Linux 以外のプラットフォームの場合はそうである。
.SH 関連項目
.BR chdir (2),
.BR fchdir (2),
.BR open (2),
.BR unlink (2),
.BR free (3),
.BR malloc (3)
