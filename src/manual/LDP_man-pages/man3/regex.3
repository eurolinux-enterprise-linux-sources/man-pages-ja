.\" Copyright (C), 1995, Graeme W. Wilford. (Wilf.)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Wed Jun 14 16:10:28 BST 1995 Wilf. (G.Wilford@ee.surrey.ac.uk)
.\" Tiny change in formatting - aeb, 950812
.\" Modified 8 May 1998 by Joseph S. Myers (jsm28@cam.ac.uk)
.\"
.\" Japanese Version Copyright (c) 1998 Takatsugu Nokubi
.\"	all rights reserved.
.\" Translated 1998-06-30, Takatsugu Nokubi
.\" Updated & Modified 2001-11-05, Yuichi SATO <ysato@h4.dion.ne.jp>
.\" Updated & Modified 2005-02-24, Yuichi SATO <ysato444@yahoo.co.jp>
.\" Updated 2008-08-02, Akihiro MOTOKI <amotoki@dd.iij4u.or.jp>, LDP v3.05
.\"
.\"WORD:	bitwise-or		ビットごとのOR
.\"WORD:	element			(構造体)要素
.\"WORD:	collating element	照合順序の要素
.\"
.\" show the synopsis section nicely
.de xx
.in \\n(INu+\\$1
.ti -\\$1
..
.TH REGEX 3 2008-05-29 "GNU" "Linux Programmer's Manual"
.SH 名前
regcomp, regexec, regerror, regfree \- POSIX regex 関数
.SH 書式
.nf
.B #include <sys/types.h>
.B #include <regex.h>

.BI "int regcomp(regex_t *" preg ", const char *" regex ", int " cflags );

.BI "int regexec(const regex_t *" preg ", const char *" string \
", size_t " nmatch ,
.BI "            regmatch_t " pmatch[] ", int " eflags );

.BI "size_t regerror(int " errcode ", const regex_t *" preg ", char *" errbuf ,
.BI "                size_t " errbuf_size );

.BI "void regfree(regex_t *" preg );
.fi
.SH 説明
.SS "POSIX regex コンパイル"
.BR regcomp ()
は、正規表現をコンパイルして、
.BR regexec ()
での検索処理に適合する形態にする。

.BR regcomp ()
はパターンを記憶するバッファへのポインタ
.IR preg 、
ヌル文字で終端された文字列
.IR regex 、
そしてコンパイルの形式を決めるためのフラグ
.I cflag
を引数に伴う。

全ての正規表現検索は、コンパイルされたパターンによって行わなければならない。
よって、
.BR regexec ()
に指定するのは、必ず
.RB ( regcomp ()
によってコンパイルされた) パターンバッファへのアドレスでなければならない。

.I cflags
には以下に示す定数一つ以上のビットごとの OR (bitwise-or) を指定する。
.TP
.B REG_EXTENDED
.I regex
に
.B POSIX
拡張正規表現を使用する。もしこのフラグが設定されない場合、
.B POSIX
標準正規表現が使われる。
.TP
.B REG_ICASE
大文字小文字の違いを無視する。このフラグを指定してコンパイルされた
パターンバッファを用いて
.BR regexec ()
関数を呼び出すと、大文字小文字の区別を付けずに検索が行われる。
.TP
.B REG_NOSUB
このフラグを設定してコンパイルされたパターンバッファが
.BR regexec ()
の引数に指定されると、引き数
.IR nmatch ,
.I pmatch
が無視される。
.TP
.B REG_NEWLINE
全ての文字にマッチするオペレータに改行をマッチさせない。

改行を含まない非マッチング文字リスト
.RB ( [^...] )
に改行をマッチさせない。

.BR regexec ()
の実行時に指定するフラグ
.I eflags
に
.B REG_NOTBOL
を含むかどうかにかかわらず、行頭にマッチするオペレータ
.RB ( ^ )
を改行直後の空文字列にマッチさせる。

.I eflags
に
.B REG_NOTEOL
を含むかどうかにかかわらず、行末にマッチするオペレータ
.RB ( $ )
を改行直前の空文字列にマッチさせる。
.SS "POSIX regex マッチング"
.BR regexec ()
は、
プリコンパイルされたパターンバッファ
.I preg
をヌル文字で終端された文字列にマッチさせる。
.I nmatch
と
.I pmatch
はマッチングの位置に関する情報を取得するのに用いられる。
.I eflags
には
.B REG_NOTBOL
と
.B REG_NOTEOL
のどちらか、もしくは両方のビットごとの
.BR OR " (bitwise-" or )
を指定し、以下で説明するようにマッチング動作を変化させる。
.TP
.B REG_NOTBOL
行頭にマッチするオペレータは、必ずマッチに失敗する (コンパイル時のフラグ
.B REG_NEWLINE
の項目も参照)。
このフラグは、複数行にまたがる文字列を
.BR regexec ()
で検索する際に、文字列の先頭を行の先頭として解釈させない場合に用いる。
.TP
.B REG_NOTEOL
行末にマッチするオペレータは、必ずマッチに失敗する (コンパイル時のフラグ
.B REG_NEWLINE
の項目も参照)。
.SS バイトオフセット
パターンバッファのコンパイル時に
.B REG_NOSUB
が設定されない場合は、部分文字列のマッチング位置情報を得ることができる。
.I pmatch
は、少なくとも
.I nmatch
の大きさを持つように指定しなければならない。
.BR regexec ()
の実行によって、それらに部分文字列マッチング位置情報が代入される。
未使用の構造体要素には \-1 が値として代入される。

.I pmatch
の型である
.I regmatch_t
構造体は、
.I <regex.h>
内で定義される。

.in +4n
.nf
typedef struct {
    regoff_t rm_so;
    regoff_t rm_eo;
} regmatch_t;
.fi
.in

構造体要素
.I rm_so
の値が \-1 でない場合、それは文字列内での次の最大のマッチング部分の開始
オフセット位置を示す。それに対し、構造体要素
.I rm_eo
はマッチング部分の終了オフセット位置を示し、
マッチング部分の直後の文字のオフセット位置が使用される。
.SS "POSIX エラーレポート"
.BR regerror ()
は、
.BR regcomp ()
と
.BR regexec ()
の実行によって得られるエラーコードから、エラーメッセージ文字列を
得るのに用いられる。

.BR regerror ()
はエラーコード
.IR errcode 、
パターンバッファ
.IR preg 、
文字列バッファへのポインタ
.IR errbuf 、
文字列バッファのサイズ
.I errbuf_size
を引数にとる。
この関数は、ヌル文字で終端されたエラーメッセージ文字列を格納するのに必要な
.I errbuf
のサイズを返す。もし
.I errbuf
と
.I errbuf_size
の両方が非 0 値であれば、
.I errbuf
には最初の
.I "errbuf_size \- 1"
文字分にエラーメッセージと終端のヌル文字が収まるように代入される。
.SS "POSIX パターンバッファ解放"
引数にコンパイルされたパターンバッファ
.I preg
を与えて
.BR regfree ()
を呼び出すと、
.BR regcomp ()
によるコンパイル時にパターンバッファに割り当てられたメモリが解放される。
.SH 返り値
.BR regcomp ()
は、コンパイルの成功時には 0 を返し、失敗時にはエラーコードを返す。

.BR regexec ()
は、マッチングの成功時には 0 を返し、失敗時には
.B REG_NOMATCH
を返す。
.SH エラー
.BR regcomp ()
は以下のエラーを返す。
.TP
.B REG_BADBR
無効な後方参照オペレータの使用。
.TP
.B REG_BADPAT
グループやリストなどの、パターンオペレータの無効な使用。
.TP
.B REG_BADRPT
\(aq*\(aq が最初の文字としてくるような、無効な繰り返しオペレータの使用。
.TP
.B REG_EBRACE
インターバルオペレータ
.B {}
(brace interval operators) が閉じていない。
.TP
.B REG_EBRACK
リストオペレータ
.B []
(bracket list operators) が閉じていない。
.TP
.B REG_ECOLLATE
照合順序の要素 (collating element) として有効ではない。

(訳注) 照合順序の要素 (collating element) については、
.BR regex (7)
を参照。
.TP
.B REG_ECTYPE
未知のキャラクタクラス名。
.TP
.B REG_EEND
未定義エラー。これは POSIX.2 には定義されていない。
.TP
.B REG_EESCAPE
正規表現がバックスラッシュで終っている。

(訳注) 日本語環境の場合、バックスラッシュとなるべき所が円記号で
表示されることがあるが、これは単に表示フォントの問題で、
内部的には同じ意味である。
.TP
.B REG_EPAREN
グループオペレータ
.B ()
(parenthesis group operators) が閉じていない。
.TP
.B REG_ERANGE
無効な範囲オペレータの使用。
例えば、範囲の終了位置が開始位置よりも前にあるような場合。
.TP
.B REG_ESIZE
正規表現のコンパイルに、64Kb 以上のパターンバッファが必要。
これは POSIX.2 には定義されていない。
.TP
.B REG_ESPACE
regex ルーチンがメモリを使いはたしている。
.TP
.B REG_ESUBREG
サブエクスプレッション
.RB \e (...\e )
(subexpression) への無効な後方参照。
.SH 準拠
POSIX.1-2001.
.SH 関連項目
.BR grep (1),
.BR regex (7),
GNU regex マニュアル
