.\" Hey Emacs! This file is -*- nroff -*- source.
.\" Copyright 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Japanese Version Copyright (c) 1999 ishikawa, keisuke
.\"         all rights reserved.
.\" Translated Tue Mar  9 08:21:04 JST 1999
.\"         by ishikawa, keisuke <ishikawa@sgk.gr.jp>
.\" Updated & Modified Sun Jan 20 11:31:46 JST 2002
.\"         by Yuichi SATO <ysato@h4.dion.ne.jp>
.\"
.TH TSEARCH 3  2008-09-23 "GNU" "Linux Programmer's Manual"
.SH 名前
tsearch, tfind, tdelete, twalk, tdestroy \- 二分木 (binary tree) の操作
.SH 書式
.nf
.B #include <search.h>
.sp
.BI "void *tsearch(const void *" key ", void **" rootp ,
.BI "                int (*" compar ")(const void *, const void *));"
.sp
.BI "void *tfind(const void *" key ", const void **" rootp ,
.BI "                int (*" compar ")(const void *, const void *));"
.sp
.BI "void *tdelete(const void *" key ", void **" rootp ,
.BI "                int (*" compar ")(const void *, const void *));"
.sp
.BI "void twalk(const void *" root ", void (*" action ")(const void *" nodep ,
.BI "                                   const VISIT " which ,
.BI "                                   const int " depth "));"
.sp
.B #define _GNU_SOURCE
.br
.B #include <search.h>
.sp
.BI "void tdestroy(void *" root ", void (*" free_node ")(void *" nodep ));
.fi
.SH 説明
.BR tsearch (),
.BR tfind (),
.BR twalk (),
.BR tdelete ()
は
二分木を操作する関数である。
これらの関数は Knuth (6.2.2) Algorithm T に基づいている。
木構造における各ノードの最初のフィールドは、対応するデータ・
アイテムへのポインタである。
(参照先のデータは、呼び出しプログラムで用意する。)
\fIcompar\fP は比較ルーチンへのポインタである。
比較ルーチンは、アイテムへのポインタ 2 つを引数に持つ。
比較ルーチンの返り値は、1 つ目のアイテムが 2 つ目のアイテムよりも
「小さい、等しい、大きい」によって、
「負、0、正」の整数値でなければならない。
.PP
.BR tsearch ()
は、木構造からアイテムを検索する関数である。
\fIkey\fP は、検索するアイテムへのポインタである。
\fIrootp\fP は木構造の根へのポインタへのポインタである。
木構造がノードを含まない場合、\fIrootp\fP の参照している変数は
NULL に設定されていなければならない。
木構造にアイテムが見つかった場合、
.BR tsearch ()
はそのアイテムへのポインタを返す。
見つからなかった場合は、アイテムを木構造に追加し、
追加したアイテムへのポインタを返す。
.PP
.BR tfind ()
は、
.BR tsearch ()
に似ているが、
アイテムが見つからなかった場合 NULL を返す点が異なる。
.PP
.BR tdelete ()
は木構造からアイテムを削除する。
引数は
.BR tsearch ()
と同じである。
.PP
.BR twalk ()
は、二分木を深さ優先 (depth-first) で、
左から右にたどっていく関数である。
\fIroot\fP は起点となるノードへのポインタである。
\fIroot\fP に根以外のノードを指定すると、部分木が対象となる。
.BR twalk ()
は、ノードを訪れる度に
(つまり、内部ノードに対しては 3 回、葉に対しては 1 回)
ユーザ関数 \fIaction\fP を呼び出す。
\fIaction\fP には以下の順に 3 つの引数が与えられる。
最初の引数は訪れたノードへのポインタである。
2 つ目の引数には、内部ノードの場合は訪問回数に応じて
\fBpreorder\fP, \fBpostorder\fP, \fBendorder\fP が、
葉の場合は \fBleaf\fP が与えられる。
(これらのシンボルは \fI<search.h>\fP で定義されている。)
3 つ目の引数はノードの深さで、根の場合は 0 である。
.PP
(より一般的には、\fBpreorder\fP, \fBpostorder\fP, \fBendorder\fP は
\fBpreorder\fP, \fBinorder\fP, \fBpostorder\fP として知られている:
それぞれ、子要素を辿る前・最初の子要素を辿った後かつ 2 番目の子要素を辿る前・
子要素を辿った後ということを表している。
よって \fBpost\%order\fP という名前を選ぶのは少し紛らわしい。)
.PP
.BR tdestroy ()
は \fIroot\fP が指す木構造全体を削除し、
.BR tsearch ()
関数で確保されたリソースを全て解放する。
木構造の各ノードについて、関数 \fIfree_node\fP が呼び出される。
データへのポインタがこの関数の引数として渡される。
そのような動作が必要でなければ、
\fIfree_node\fP は何もしない関数へのポインタでなければならない。
.SH 返り値
.BR tsearch ()
は、木構造に見つかったアイテムか、
新しく追加したアイテムへのポインタを返す。
メモリの不足のためアイテムを追加できなかった場合は NULL を返す。
.BR tfind ()
は、アイテムへのポインタを返す。
一致するアイテムが見つからない場合は NULL を返す。
検索条件に一致する要素が複数ある場合、返される値は不定である。
.PP
.BR tdelete ()
は削除したアイテムの親へのポインタを返す。
アイテムが見つからなかった場合は NULL を返す。
.PP
\fIrootp\fP が NULL の場合、
.BR tsearch (),
.BR tfind (),
.BR tdelete ()
は NULL を返す。
.SH 準拠
SVr4, POSIX.1-2001.
関数
.BR tdestroy ()
は GNU の拡張である。
.SH 注意
.BR twalk ()
は根へのポインタを引数にとるが、
ほかの関数は根へのポインタへのポインタである。
.PP
.BR twalk ()
においては、\fBpostorder\fP は
「左の部分木の後で、右の部分木の前」を意味している。
しかし、人によってはこれを "inorder" と呼んで、
"postorder" を「両方の部分木の後」とする場合もある。
.PP
.BR tdelete ()
は、削除したノードの使用していたメモリを解放するが、
ノードに対応するデータのメモリは、ユーザが解放しなければならない。
.PP
下のプログラム例は、ユーザ関数が "endorder" か "leaf" を引数にして
呼び出されて以降は、
.BR twalk ()
がそのノードを参照しないことを前提としている。
これは GNU ライブラリの実装では機能するが、System V のマニュアルには存在しない。
.SH 例
以下のプログラムは 12 個の乱数を二分木に挿入した後、
挿入した数を順番に出力する (挿入の際、重複した乱数は 1 つにまとめられる)。
.sp
.nf
#define _GNU_SOURCE     /* Expose declaration of tdestroy() */
#include <search.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>

void *root = NULL;

void *
xmalloc(unsigned n)
{
    void *p;
    p = malloc(n);
    if (p)
        return p;
    fprintf(stderr, "insufficient memory\\n");
    exit(EXIT_FAILURE);
}

int
compare(const void *pa, const void *pb)
{
    if (*(int *) pa < *(int *) pb)
        return \-1;
    if (*(int *) pa > *(int *) pb)
        return 1;
    return 0;
}

void
action(const void *nodep, const VISIT which, const int depth)
{
    int *datap;

    switch (which) {
    case preorder:
        break;
    case postorder:
        datap = *(int **) nodep;
        printf("%6d\\n", *datap);
        break;
    case endorder:
        break;
    case leaf:
        datap = *(int **) nodep;
        printf("%6d\\n", *datap);
        break;
    }
}

int
main(void)
{
    int i, *ptr;
    void *val;

    srand(time(NULL));
    for (i = 0; i < 12; i++) {
        ptr = (int *) xmalloc(sizeof(int));
        *ptr = rand() & 0xff;
        val = tsearch((void *) ptr, &root, compare);
        if (val == NULL)
            exit(EXIT_FAILURE);
        else if ((*(int **) val) != ptr)
            free(ptr);
    }
    twalk(root, action);
    tdestroy(root, free);
    exit(EXIT_SUCCESS);
}
.fi
.SH 関連項目
.BR bsearch (3),
.BR hsearch (3),
.BR lsearch (3)
.BR qsort (3),
.BR feature_test_macros (7)
