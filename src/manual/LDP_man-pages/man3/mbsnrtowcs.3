.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single Unix specification http://www.UNIX-systems.org/online.html
.\"
.\" Japanese Version Copyright (c) 1999 HANATAKA Shinya
.\"         all rights reserved.
.\" Translated Tue Jan 11 00:56:10 JST 2000
.\"         by HANATAKA Shinya <hanataka@abyss.rim.or.jp>
.\"
.TH MBSNRTOWCS 3  2007-07-26 "GNU" "Linux Programmer's Manual"
.SH 名前
mbsnrtowcs \- マルチバイト文字列をワイド文字列に変換する
.SH 書式
.nf
.B #define _GNU_SOURCE
.B #include <wchar.h>
.sp
.BI "size_t mbsnrtowcs(wchar_t *" dest ", const char **" src ,
.BI "                  size_t " nms ", size_t " len ", mbstate_t *" ps );
.fi
.SH 説明
.BR mbsnrtowcs ()
関数は
.BR mbsrtowcs (3)
関数に似ているが
変換するバイト数が \fI*src\fP から始まる \fInms\fP バイトに制限されている
点が異なっている。
.PP
\fIdest\fP が NULL ポインターでなければ
.BR mbsnrtowcs ()
関数は
\fI*src\fP からのマルチバイト文字列の最大 \fInms\fP までを
\fIdest\fP からのワイド文字列に変換する。
最大 \fIlen\fP 文字のワイド文字が \fIdest\fP に書き込まれる。
同時にシフト状態 \fI*ps\fP を更新する。
変換は
.I "mbrtowc(dest, *src, n, ps)"
を、この呼び出しが成功する限り、繰り返し実行したのと実質的に同様である。
ここでの \fIn\fP は正の数であり、繰り返しごとに \fIdest\fP が 1 増加させられ、
\fI*src\fP が消費したバイト数だけ増加させられる。変換は以下の三つの
いずれかの条件で停止する:
.IP 1. 3
不正なマルチバイト列に遭遇した。この場合には \fI*src\fP は不正な
マルチバイト列を指すようにして、
.I (size_t)\ \-1
を返し、\fIerrno\fP に \fBEILSEQ\fP を設定する。
.IP 2.
\fInms\fP 制限によって強制的に停止するか、\fIlen\fP 文字の L\(aq\\0\(aq 以外の
ワイド文字を \fIdest\fP に格納した場合。この場合は \fI*src\fP は
次に変換されるマルチバイト列を指すようにして、\fIdest\fP に書き込まれた
ワイド文字の数を返す。
.IP 3.
マルチバイト文字列が終端の \(aq\\0\(aq まで含めて完全に変換された場合。
(この時、副作用として \fI*ps\fP が初期状態に戻される。)
この場合は \fI*src\fP には NULL が設定され、終端の L\(aq\\0\(aq 文字を除いて
\fIdest\fP に書き込まれた文字数を返す。
.PP
\fIdest\fP が NULL の場合、\fIlen\fP は無視され、上記と同様の変換が
行われるが、変換されたワイド文字はメモリに書き込まれず、変換先の上限
が存在しない。
.PP
上記のどちらの場合でも、\fIps\fP が NULL ポインターならば、代りに
mbsnrtowcs 関数のみが使用する静的で名前のない状態が使用される。
.PP
プログラマーは \fIdest\fP に最低でも \fIlen\fP ワイド文字を書き込むこ
とができる空間があることを保証しなければならない。
.SH 返り値
.BR mbsnrtowcs ()
関数はワイド文字列に変換完了したワイド文字の数を返す。
終端のナルワイド文字は含まない。不正なマルチバイト列に遭遇した場合には
.I (size_t)\ \-1
を返し、\fIerrno\fP に \fBEILSEQ\fP を設定する。
.SH 準拠
この関数は GNU の拡張である。
.SH 注意
.BR mbsnrtowcs ()
の動作は現在のロケールの
.B LC_CTYPE
カテゴリに依存している。
.PP
\fIps\fP として NULL を渡すことはマルチスレッドでは安全でない。
.SH 関連項目
.BR iconv (3),
.BR mbsrtowcs (3)
